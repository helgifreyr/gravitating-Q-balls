C================================================C
C         SUBROUTINE CLOCK (DUMMY)
C
C================================================C
      SUBROUTINE  CLOCK(TIME,N1,N2)
      INTEGER N1,N2
      DOUBLE PRECISION TIME
      TIME =0.0
        RETURN
      END
C:::55    ,,,,,FDS001.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS001 ( A )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 0 1   COMPUTES THAT MACHINE-CONSTANT EPS > 0.0     ***
C**      WHICH IS THE SMALLEST POSITIVE FLOATING POINT NUMBER,      ***
C**      FOR WHICH  1.0 + EPS > 1.0 IS VALID.                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      DOUBLE PRECISION               A
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C A      I DP   I  -  I  AUXILIARY VARIABLE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION              ONE, TWO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ONE=1.0, TWO=2.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      A=ONE
   10 FDS001=A
      A=A/TWO
      IF(ONE+A.GT.ONE) GO TO 10
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS001----------------------------------------------------
      E    N    D
C:::56    ,,,,,FDS002.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS002 (I,IA,X,XS,MNX,MOX,NP,NX,ST,Z1,Z2,NB)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 0 2   COMPUTES THE SCHEME OF DIVIDED DIFFERENCES   ***
C**      FOR THE DIFFERENT UNIT VECTORS AND STORES THE UPPER        ***
C**      DIAGONAL FOR THE UNIT NUMER J IN THE COLUMN J OF THE       ***
C**      MATRIX ST(MOX,MOX).                                        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  MNX, MOX, NX, NP, NB(MOX), I, IA
C**                                                                 ***
      DOUBLE PRECISION   X(MNX), XS(MOX), ST(MOX,MOX), Z1(MOX),
     &                  Z2(MOX)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C I      I  I   I IN  I  NUMBER OF ACTUAL GRID POINT
C--------I------I-----I------------------------------------------------
C IA     I  I   I IN  I  IA + 1 = FIRST POINT IN THE FORMULA
C--------I------I-----I------------------------------------------------
C X      I DP   I IN  I  (NONEQUIDISTANT) GRID
C        I      I     I  ARRAY : X(MNX)
C--------I------I-----I------------------------------------------------
C XS     I DP   I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C MNX    I  I   I IN  I  ARRAY BOUND ( MNX >= NX )
C--------I------I-----I------------------------------------------------
C MOX    I   I  I IN  I  ARRAY BOUND ( MOX >= NP )
C--------I------I-----I------------------------------------------------
C NP     I  I   I IN  I  NP = NUMBER OF POINTS USED IN THE FORMULA
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRID POINTS
C--------I------I-----I------------------------------------------------
C ST     I DP   I OUT I  NEWTON SCHEME OF DIVIDED DIFFERENCES, UPPER
C        I      I     I  DIAGONAL FOR THE DIFFERENT UNIT VECTORS
C        I      I     I  ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C Z1     I DP   I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I DP   I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C NB     I  I   I OUT I  NUMBERS OF NEIGHBOURING GRID POINTS IN THE
C        I      I     I  DIFFERENCE FORMULA
C        I      I     I  ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NH, J, JV, JM, JP, K, L, JA, IM
C**                                                                 ***
      DOUBLE PRECISION              ZERO, ONE, FAK
C**
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO=0.0, ONE=1.0 )
C
C**-----------------------------------------------------------------***
C
C
C**** INITIALIZATIONS :
C     ---------------
C
C
      NH   =  NP / 2
      NB(1) =  I
      J     =  1
      JV    =  0
      JM    =  0
      JP    =  0
      DO 10 L = 1,MOX
         DO 10 K = 1,MOX
            ST(K,L) = ZERO
  10     CONTINUE
      DO 20 K = 1,MOX
         XS(K) = ZERO
  20  CONTINUE
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
C**** NEIGHBOURS OF POINT I :
C
      DO 80 K = 1,NH
         IF(JV) 30,40,60
  30     JM = JM + 2
         JP = JM + 1
         GO TO  70
  40     JM = JM - 1
         JP = JP + 1
         IF(I + JM .GE. 1)  GO TO  50
         JV = -1
         JM = JP
         JP = JM + 1
         GO TO  70
  50     IF(I + JP .LE. NX)  GO TO  70
         JV = +1
         JP = JM - 1
         GO TO  70
  60     JM = JM - 2
         JP = JM - 1
  70     J  = J + 1
         IF(J .GT. MOX)  GO TO 80
         NB(J) = I + JM
         J = J + 1
         IF(J .GT. MOX)  GO TO 80
         NB(J) = I + JP
  80  CONTINUE
C
C
C**** DIFFERENCES XS AND INITIAL VALUES FOR ST :
C
      DO 90 K = 1,NP
         JA = NB(K)
         XS(K) = X(JA) - X(I)
         IM = JA - IA
         ST(K,IM) = ONE
  90  CONTINUE
C
C
C**** DIVIDED DIFFERENCES FOR THE UNIT VECTORS :
C
      DO 150 K = 1,NP-1
         DO 110 L = 1,NP
            Z2(L) = ST(K,L)
 110     CONTINUE
         DO 140 L = K,NP-1
            DO 120 J = 1,NP
               Z1(J) = Z2(J)
               Z2(J) = ST(L+1,J)
 120        CONTINUE
            FAK = ONE / ( XS(L+1-K) - XS(L+1) )
            DO 130 J = 1,NP
               ST(L+1,J) = (Z1(J) - Z2(J)) * FAK
 130        CONTINUE
 140     CONTINUE
 150  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS002 ---------------------------------------------------
      E    N    D
C:::57    ,,,,,FDS003.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS003 (X,NX,NOX,MNX,MOX,MLF,NA,NFA,NFL,NCTR,NB,
     &                   ABX,ABXX,FABX,FABXX,XS,ST,Z1,Z2,XH,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 0 3   COMPUTES THE COEFFICIENTS OF THE DIFFERENCE  ***
C**      FORMULAE FOR THE FIRST AND SECOND DERIVATIVE AT NX GRID    ***
C**      POINTS AND THE COEFFICIENTS OF THE CORRESPONDING           ***
C**      ERROR FORMULAE.                                            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NX,NOX,MNX,MOX,MLF,NA(MNX),NFA(MNX),NFL(MNX),
     &         NCTR,NB(MOX),IER
C**                                                                 ***
      DOUBLE PRECISION       X(MNX),ABX(MNX,MLF),ABXX(MNX,MLF),
     &       FABX(MNX,MLF),FABXX(MNX,MLF),
     &       XS(MOX),ST(MOX,MOX),Z1(MOX),Z2(MOX),XH(MOX)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C X      I DP   I IN  I  (NONEQUIDISTANT) GRID, X(1) < X(2) <...< X(NX)
C        I      I     I  ARRAY : X(MNX)
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRID POINTS
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE SECOND DERIVATIVE
C        I      I     I  NOX=2,4,6,...
C--------I------I-----I------------------------------------------------
C MNX    I  I   I IN  I  ARRAY BOUND ( MNX >= NX )
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NPMAX )
C--------I------I-----I------------------------------------------------
C MLF    I  I   I IN  I  ARRAY BOUND ( MLF = 2*MOX - 1 )
C--------I------I-----I------------------------------------------------
C NA     I  I   I OUT I  THE DIFFERENCE FORMULA I STARTS FOR THE
C        I      I     I  SOLUTION VECTOR AT NA(I)+1
C        I      I     I  ARRAY : NA(MNX)
C--------I------I-----I------------------------------------------------
C NFA    I  I   I OUT I  THE DIFFERENCE FORMULAE I STARTS FOR THE ARRAY
C        I      I     I  OF FORMULAE AT NFA(I)+1
C        I      I     I  ARRAY : NFA(MNX)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I OUT I  NFA(I) = LENGTH OF THE DIFFERENCE FORMULA I
C        I      I     I  ARRAY : NFL(MNX)
C--------I------I-----I------------------------------------------------
C NCTR   I  I   I OUT I  CENTRE OF THE FORMULAE IN THE ARRAY OF FORMUL.
C--------I------I-----I------------------------------------------------
C NB     I  I   I  -  I  AUXILIARY ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C ABX    I DP   I OUT I  DIFFERENCE FORMULAE FOR THE 1ST DERIVATIVE
C        I      I     I  UX(I) =  SUM  ( ABX(I,NFA(I)+J) * U(NA(I)+J) )
C        I      I     I       J=1(1)NFL(I)
C        I      I     I  ARRAY : ABX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABXX   I DP   I OUT I  DIFFERENCE FORMULAE FOR THE 2ND DERIVATIVE
C        I      I     I  UXX(I) =  SUM  (ABXX(I,NFA(I)+J) * U(NA(I)+J))
C        I      I     I        J=1(1)NFL(I)
C        I      I     I  ARRAY : ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C FABX   I DP   I OUT I  FORMULAE FOR THE ERROR OF THE 1ST DERIVATIVE
C        I      I     I  DUX(I) =  SUM  (FABX(I,NFA(I)+J) * U(NA(I)+J))
C        I      I     I        J=1(1)NFL(I)
C        I      I     I  ARRAY : FABX(MNX,MOX)
C--------I------I-----I------------------------------------------------
C FABXX  I DP   I OUT I  FORMULAE FOR THE ERROR OF THE 2ND DERIVATIVE
C        I      I     I  DUXX(I) =  SUM  (FABXX(I,NFA(I)+J)*U(NA(I)+J))
C        I      I     I         J=1(1)NFL(I)
C        I      I     I  ARRAY : FABXX(MNX,MOX)
C--------I------I-----I------------------------------------------------
C XS     I DP   I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C ST     I DP   I  -  I  AUXILIARY ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C Z1     I DP   I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I DP   I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C XH     I DP   I  -  I  AUXILIARY ARRAY : XH(MOX)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, IA, IFA, IL, J, K, L, NH, NOXPLU, NOXFPL,
     &         NP, NPF, NPMAX, N0, N1, N2
C**                                                                 ***
      DOUBLE PRECISION              FAK, FN, ZERO, ONE, TWO, H, H2
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0, ONE=1.0, TWO=2.0)
C**
C**-----------------------------------------------------------------***
C
C**** TEST FOR CORRECTNES OF INPUT ( ONLY FOR ORDER NOX )
C
      IER = 0
      IF( MOD(NOX,2) .NE. 0  .OR.  NOX.LT.2  .OR.  NOX+4 .GT. MOX
     &                       .OR.  NOX+4 .GT. NX )            IER = 1
      IF( IER.EQ.1 )  R E T U R N
C
C
C**** INITIALIZATIONS :
C
      NPMAX = NOX + 4
      NH = NPMAX / 2
      NCTR = NPMAX
      N0 = NPMAX - 4
      N1 = N0 + 1
      N2 = N0 + 2
      NP = N0 + 3
C
      DO 10 J=1,MLF
         DO 10 I=1,MNX
            ABX(I,J)  = ZERO
            FABX(I,J) = ZERO
            ABXX(I,J) = ZERO
            FABXX(I,J)= ZERO
   10 CONTINUE
C
C**** START OF CALCULATION :
C     --------------------
C
C
C**** FORMULAE FOR THE GRID POINTS X(I) , I=1(1)NX :
C
      IL=0
      H=ONE/(X(2)-X(1))
      DO 70  I=1,NX
         IF( I .LE. NH  .OR.  I .GE. NX - NH + 2 )   IL = IL + 1
         IF( I .EQ. NX - NH + 2 )   IL = IL + 1
         NOXPLU = 0
         NOXFPL = 0
         IF( I .LE. NH - 1  .OR.  I .GE. NX - NH + 2 )  NOXFPL = 1
         IF( I .LE. NH - 2  .OR.  I .GE. NX - NH + 3 )  NOXPLU = 1
         NPF = NP + NOXFPL
         IA = I - IL
         IFA = NCTR - IL
         NA(I) = IA
         NFA(I) = IFA
         NFL(I) = NPF
C
         IF(I.GT.1) H=ONE/(X(I)-X(I-1))
         DO 25 K=1,NPF
            XH(K)=(X(IA+K)-X(I))*H
   25    CONTINUE
C
C**** MATRIX OF THE DIVIDED DIFFERENCES FOR THE UNIT VECTORS :
C
         CALL FDS002(IL,0,XH,XS,MOX,MOX,NPF,
     &               NPF,ST,Z1,Z2,NB)
C
C**** DIFFERENCE FORMULAE FOR THE 1ST AND 2ND DERIVATIVE :
C
         H2=H*H
         FAK = ONE
         FN  = ZERO
         DO 40 J=1,N0+NOXPLU
*VOCL LOOP,SCALAR
            DO 30 L=1,NPMAX
               ABX(I,IFA+L) =ABX(I,IFA+L) +FAK*ST(J+1,L)*H
               ABXX(I,IFA+L)=ABXX(I,IFA+L)+FN *ST(J+1,L)*H2
   30       CONTINUE
            FN  = -FN * XS(J+1) + TWO * FAK
            FAK = -XS(J+1) * FAK
   40    CONTINUE
C
C**** DIFFERENCE FORMULAE FOR THE ERRORS OF THE DERIVATIVES :
C
         DO 60  J=N1+NOXPLU,N2+NOXFPL
*VOCL LOOP,SCALAR
            DO 50  L=1,NPMAX
               FABX(I,IFA+L)= FABX(I,IFA+L)+ FAK*ST(J+1,L)*H
               FABXX(I,IFA+L)=FABXX(I,IFA+L)+FN *ST(J+1,L)*H2
   50       CONTINUE
            FN  = -FN * XS(J+1) + TWO * FAK
            FAK = -XS(J+1) * FAK
   60    CONTINUE
   70 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS003 ---------------------------------------------------
      E    N    D
C:::58      ,,,,,FDS005.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS005 (X,NX,NOX,MNX,MOX,MLF,NA,NFA,NFL,NCTR,NB,
     &                   ABX,ABXX,FABX,FABXX,XS,ST,Z1,Z2,XH,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 0 5   COMPUTES THE COEFFICIENTS OF THE DIFFERENCE  ***
C**      FORMULAE FOR THE FIRST AND SECOND DERIVATIVE AT NX GRID    ***
C**      POINTS AND THE COEFFICIENTS OF THE CORRESPONDING           ***
C**      ERROR FORMULAE FOR A (X(NX)-X(1))-PERIODIC PROBLEM.        ***
C**      THE FORMULAE FOR X(1) AND X(NX) ARE IDENTICAL, BECAUSE     ***
C**      X(1) AND X(NX) ARE THE 'SAME' POINTS IN THE PERIODIC       ***
C**      PROBLEM.                                                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NX,NOX,MNX,MOX,MLF,NA(MNX),NFA(MNX),NFL(MNX),
     &         NCTR,NB(MOX),IER
C**                                                                 ***
      DOUBLE PRECISION      X(MNX),ABX(MNX,MLF),ABXX(MNX,MLF),
     &       FABX(MNX,MLF),FABXX(MNX,MLF),
     &       XS(MOX),ST(MOX,MOX),Z1(MOX),Z2(MOX),XH(MOX)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C X      I DP   I IN  I  (NONEQUIDISTANT) GRID, X(1) < X(2) <...< X(NX)
C        I      I     I  ARRAY : X(MNX)
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRID POINTS
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE SECOND DERIVATIVE
C        I      I     I  NOX=2,4,6,...
C--------I------I-----I------------------------------------------------
C MNX    I  I   I IN  I  ARRAY BOUND ( MNX >= NX )
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NOX + 4 )
C--------I------I-----I------------------------------------------------
C MLF    I  I   I IN  I  ARRAY BOUND ( MLF = MOX )
C--------I------I-----I------------------------------------------------
C NA     I  I   I OUT I  THE DIFFERENCE FORMULA I STARTS FOR THE
C        I      I     I  SOLUTION VECTOR AT NA(I)+1
C        I      I     I  ARRAY : NA(MNX)
C--------I------I-----I------------------------------------------------
C NFA    I  I   I OUT I  THE DIFFERENCE FORMULAE I STARTS FOR THE ARRAY
C        I      I     I  OF FORMULAE AT NFA(I)+1
C        I      I     I  ARRAY : NFA(MNX)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I OUT I  NFA(I) = LENGTH OF THE DIFFERENCE FORMULA I
C        I      I     I  ARRAY : NFL(MNX)
C--------I------I-----I------------------------------------------------
C NCTR   I  I   I OUT I  CENTRE OF THE FORMULAE IN THE ARRAY OF FORMUL.
C--------I------I-----I------------------------------------------------
C NB     I  I   I  -  I  AUXILIARY ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C ABX    I DP   I OUT I  DIFFERENCE FORMULAE FOR THE 1ST DERIVATIVE
C        I      I     I  UX(I) =  SUM  ( ABX(I,NFA(I)+J) * U(NA(I)+J) )
C        I      I     I       J=1(1)NFL(I)
C        I      I     I  ARRAY : ABX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABXX   I DP   I OUT I  DIFFERENCE FORMULAE FOR THE 2ND DERIVATIVE
C        I      I     I  UXX(I) =  SUM  (ABXX(I,NFA(I)+J) * U(NA(I)+J))
C        I      I     I        J=1(1)NOX+4
C        I      I     I  ARRAY : ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C FABX   I DP   I OUT I  FORMULAE FOR THE ERROR OF THE 1ST DERIVATIVE
C        I      I     I  DUX(I) =  SUM  (FABX(I,NFA(I)+J) * U(NA(I)+J))
C        I      I     I        J=1(1)NFL(I)
C        I      I     I  ARRAY : FABX(MNX,MOX)
C--------I------I-----I------------------------------------------------
C FABXX  I DP   I OUT I  FORMULAE FOR THE ERROR OF THE 2ND DERIVATIVE
C        I      I     I  DUXX(I) =  SUM  (FABXX(I,NFA(I)+J)*U(NA(I)+J))
C        I      I     I         J=1(1)NFL(I)
C        I      I     I  ARRAY : FABXX(MNX,MOX)
C--------I------I-----I------------------------------------------------
C XS     I DP   I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C ST     I DP   I  -  I  AUXILIARY ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C Z1     I DP   I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I DP   I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C XH     I DP   I  -  I  AUXILIARY ARRAY : XH(MOX)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I, IA, J, K, L, KL, NP, NPMAX, N0, N1 ,N2
C**                                                                 ***
      DOUBLE PRECISION      FAK, FN, ZERO, ONE, TWO, H, H2
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0, ONE=1.0, TWO=2.0)
C***
C**-----------------------------------------------------------------***
C
C
C**** TEST FOR CORRECTNES OF INPUT ( ONLY FOR ORDER NOX )
C
      IER = 0
      IF( MOD(NOX,2) .NE. 0  .OR.  NOX .LT. 2  .OR.  NOX+3. GT. MOX
     &                       .OR.  NOX+3 .GT. NX )            IER = 1
      IF( IER.EQ.1 )  R E T U R N
C
C
C**** INITIALIZATIONS :
C
      NPMAX = NOX + 3
      NCTR = ( NPMAX + 1 ) / 2
      N0 = NPMAX - 3
      N1 = N0 + 1
      N2 = N0 + 2
      NP = N0 + 3
C
      DO 10 J=1,MLF
         DO 10 I=1,MNX
            ABX(I,J)  = ZERO
            FABX(I,J) = ZERO
            ABXX(I,J) = ZERO
            FABXX(I,J)= ZERO
   10 CONTINUE
C
C**** START OF CALCULATION :
C     --------------------
C
C
C**** FORMULAE FOR THE GRID POINTS X(I) , I=1(1)NX :
C
      IA=0
      H=ONE/(X(NX)-X(NX-1))
      DO 20  I=1,NX
         NA(I) = I - NCTR
         NFA(I) = 0
         NFL(I) = 2 * NCTR - 1
   20 CONTINUE
C
      DO 70  I=1,NX
         IF(I.GT.1) H=ONE/(X(I)-X(I-1))
         DO 25 K=1,NP
            KL=I-NCTR+K
            IF(KL.LT.1)  KL=KL+NX-1
            IF(KL.GT.NX) KL=KL-NX+1
            XH(K)=X(KL)
            IF(KL.GT.I-NCTR+K) XH(K)=XH(K)-(X(NX)-X(1))
            IF(KL.LT.I-NCTR+K) XH(K)=XH(K)+(X(NX)-X(1))
            XH(K)=(XH(K)-X(I))*H
   25    CONTINUE
C
C**** MATRIX OF THE DIVIDED DIFFERENCES FOR THE UNIT VECTORS :
C
         CALL FDS002(NCTR,0,XH,XS,MOX,MOX,NP,NP,ST,Z1,Z2,NB)
C
C**** DIFFERNCE FORMULAE FOR THE 1ST AND 2ND DERIVATIVE :
C
         H2=H*H
         FAK = ONE
         FN  = ZERO
         DO 40 J=1,N0
*VOCL LOOP,SCALAR
            DO 30 L=1,NPMAX
               ABX(I,L)  = ABX(I,L)  + FAK * ST(J+1,L) * H
               ABXX(I,L) = ABXX(I,L) + FN  * ST(J+1,L) * H2
   30       CONTINUE
            FN  = -FN * XS(J+1) + TWO * FAK
            FAK = -XS(J+1) * FAK
   40    CONTINUE
C
C**** DIFFERENCE FORMULAE FOR THE ERRORS OF THE DERIVATIVES :
C
         DO 60  J=N1,N2
*VOCL LOOP,SCALAR
            DO 50  L=1,NPMAX
               FABX(I,L)= FABX(I,L)+ FAK*ST(J+1,L) * H
               FABXX(I,L)=FABXX(I,L)+FN *ST(J+1,L) * H2
   50       CONTINUE
            FN  = -FN * XS(J+1) + TWO * FAK
            FAK = -XS(J+1) * FAK
   60    CONTINUE
   70 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS005 ---------------------------------------------------
      E    N    D
C:::59      ,,,,,FDS007.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS007 (T,M,NOT,MOT,MP,NEX,NAB,NOTMAX,ST,STA,
     &                   EX,ABT,FABT,LV,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 0 7   COMPUTES THE COEFFICIENTS OF THE DIFFERENCE  ***
C**      FORMULAE FOR THE EXTRAPOLATION, THE FIRST DERIVATIVE AND   ***
C**      THE ERROR-ESTIMATES FOR ALL POSSIBLE ORDERS OF CONSISTENCY.***
C**      (INITIAL-VALUE-DIRECTION)                                  ***
C**      THE ARRAYS ST AND STA MUST NOT BE CHANGED OUTSIDE THIS     ***
C**      SUBROUTINE.                                                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   M,NOT,MOT,MP,NEX,NAB,NOTMAX,IER
      DOUBLE PRECISION       T(MP),ST(MP,MP),STA(MP,MP),EX(MP),
     &                   ABT(MP),FABT(MP,MOT)
      LOGICAL   LV
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  (NONEQUIDISTANT) GRID IN INITIAL-VALUE-
C        I      I     I  DIRECTION, T(1) > T(2) > ... > T(M)
C        I      I     I  ARRAY : T(MP)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  NUMBER OF AVAILABLE T-VALUES
C--------I------I-----I------------------------------------------------
C NOT    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE FIRST
C        I      I     I  T-DERIVATIVE
C        I      I     I  NOT = 1, 2, 3, ...,MOT
C--------I------I-----I------------------------------------------------
C MOT    I  I   I IN  I  MAXIMUM ORDER
C--------I------I-----I------------------------------------------------
C MP     I  I   I IN  I  MAXIMUM NUMBER OF AVAILABLE T-VALUES
C--------I------I-----I------------------------------------------------
C NEX    I  I   I OUT I  NUMBER OF COEFFICIENTS FOR THE EXTRAPOLATION-
C        I      I     I  FORMULA
C--------I------I-----I------------------------------------------------
C NAB    I  I   I OUT I  NUMBER OF COEFFICIENTS FOR THE DERIVATIVE-
C        I      I     I  FORMULA
C--------I------I-----I------------------------------------------------
C NOTMAX I  I   I OUT I  MAXIMUM ORDER FOR M AVAILABLE T-VALUES
C--------I------I-----I------------------------------------------------
C ST     I  DP  I  -  I  WORKARRAY FOR THE DEVIDED DIFFERENCES
C        I      I     I  INPUT( IF M > 2 ) : VALUES OF FORMER CALL
C        I      I     I  ARRAY : ST(MP,MP)
C--------I------I-----I------------------------------------------------
C STA    I  DP  I  -  I  WORKARRAY FOR THE DEVIDED DIFFERENCES
C        I      I     I  INPUT( IF LV ) : VALUES OF FORMER CALL
C        I      I     I  ARRAY : STA(MP,MP)
C--------I------I-----I------------------------------------------------
C EX     I  DP  I OUT I  DIFFERENCE FORMULA FOR THE EXTRAPOLATION
C        I      I     I  AT T(1)
C        I      I     I  UEX = SUM( U(I + 1) * EX(I) )
C        I      I     I      I = 1(1)NEX
C        I      I     I  U(I+1) : SOLUTION AT T(I+1)
C        I      I     I  ARRAY : EX(MP)
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I OUT I  DIFFERENCE FORMULA FOR THE T-DERIVATIVE
C        I      I     I  AT T(1)
C        I      I     I  UT = SUM( U(I) * ABT(I) )
C        I      I     I     I = 1(1)NAB
C        I      I     I  ARRAY : ABT(MP)
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I OUT I  DIFFERENCE FORMULAE FOR THE ERROR ESTIMATES
C        I      I     I  FOR ORDER J = 1, 2, ..., NOTMAX
C        I      I     I  DUT(J) = SUM( U(I) * FABT(I,J) )
C        I      I     I         I = 1, ..., J+2
C        I      I     I  ARRAY : FABT(MP,MOT)
C--------I------I-----I------------------------------------------------
C LV     I  L   I IN  I  IF LV = TRUE THE LAST T-STEP WAS NOT
C        I      I     I  ACCEPTABLE . COMPUTE ST OF STA WITH NEW T(1).
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I, I1, J, NEX1
      DOUBLE PRECISION               FAK, ONE, ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ONE = 1.0, ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  INITIALIZATION :
C
      DO 5 I=1,MP
         EX(I) = ZERO
         ABT(I) = ZERO
         DO 6 J = 1,MOT
            FABT(I,J) = ZERO
    6    CONTINUE
    5 CONTINUE
C
      IF(M.GT.MP.OR.NOT.GT.MIN(MOT,M-1).OR.NOT.LT.1) THEN
         IER = 7
         RETURN
      ENDIF
C
C***  INITIALIZE THE SCHEME OF THE DEVIDED DIFFERENCES
C
      IF(LV) GO TO 45
      IF(M.LT.3) GO TO 20
      DO 10 I=2,M-1
         DO 15 J=1,I
            STA(J+1,I) = ST(J,I)
   15    CONTINUE
   10 CONTINUE
   20 DO 30 I=1,M-1
         STA(1,I) = ZERO
   30 CONTINUE
      STA(2,1) = ONE
      DO 40 I=1,M
         DO 42 J=1,M
            ST(J,I) = ZERO
   42    CONTINUE
   40 CONTINUE
C
C***  COMPUTE THE SCHEME OF THE DEVIDED DIFFERENCES
C
   45 ST(1,1) = ONE
      DO 50 I=2,M
      I1 = I - 1
      DO 50 J=1,I
         ST(J,I) = (ST(J,I1) - STA(J,I1)) / (T(1) - T(I))
   50 CONTINUE
C
C***  FORMULA FOR THE EXTRAPOLATION
C
      NEX  = MIN(NOT+1,M-1)
      NEX1 = NEX + 1
      DO 60 I=1,NEX
         EX(I) = -ST(I+1,NEX1) / ST(1,NEX1)
   60 CONTINUE
C
C***  FORMULA FOR THE DERIVATIVE
C
      NAB = NOT + 1
      FAK = ONE
      DO 80 J=2,NAB
         DO 70 I=1,J
            ABT(I) = ABT(I) + FAK * ST(I,J)
   70    CONTINUE
         FAK = FAK * (T(1) - T(J))
   80 CONTINUE
C
C***  FORMULAE FOR THE ERROR-ESTIMATES
C
      FAK = ONE
      NOTMAX = MIN(MOT,M-2)
      IF(NOTMAX.LT.1) RETURN
      DO 100 J=1,NOTMAX
         FAK = FAK * (T(1) - T(J+1))
         DO 90 I=1,J+2
            FABT(I,J) = FAK * ST(I,J+2)
   90    CONTINUE
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS007----------------------------------------------------
      E    N    D
C:::60      ,,,,,FDS010.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS010 (AKNP,AKIP,AKFP,AIP,FAIP,GM,GP,ITR,NA,
     &                   NB,NFL,NOX,NXOLD,NXNEW,MNX,MOX,MLF,
     &                   XNEW,XOLD,XH,XS,ST,Z1,Z2,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 1 0    COMPUTES THE COEFFICIENTS OF THE FORMULAE   ***
C**      FOR THE INTERPOLATION OF A SOLUTION ( GIVEN ON NXOLD       ***
C**      OLD GRID POINTS AND WANTED ON NXNEW NEW GRID POINTS ) AND  ***
C**      THE COEFFICIENTS OF THE CORRESPONDING ERROR FORMULAE.      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NXNEW,IER,ITR(NXNEW),MOX,MNX,MLF,NA(NXNEW),NB(MOX),
     &         NFL(NXNEW),NOX,NXOLD
C**                                                                 ***
      DOUBLE PRECISION  
     &  AKNP(MOX,MOX),AKIP(MOX,MOX),AKFP(MOX,MOX),AIP(MNX,MLF),
     &      FAIP(MNX,MLF),GM(NXNEW),GP(NXNEW),ST(MOX,MOX),XOLD(NXOLD),
     &      XNEW(NXNEW),XH(MOX),XS(MOX),Z1(MOX),Z2(MOX)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C AKNP   I DP   I  -  I  AUXILIARY ARRAY : AKNP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKIP   I DP   I  -  I  AUXILIARY ARRAY : AKIP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKFP   I DP   I  -  I  AUXILIARY ARRAY : AKFP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AIP    I DP   I OUT I  INTERPOLATION FORMULAE
C        I      I     I  UNEW(I) = SUM(AIP(I,J) * UOLD(NA(I)+J))
C        I      I     I        J = 1(1)NFL(I)
C        I      I     I  ARRAY : AIP(MNX,MLF)
C--------I------I-----I------------------------------------------------
C FAIP   I DP   I OUT I  FORMULAE FOR THE ERROR OF THE INTERPOLATION
C        I      I     I  DUI(I) = SUM(FAIP(I,J) * UOLD(NA(I)+J))
C        I      I     I        J = 1(1)NFL(I)
C        I      I     I  ARRAY : FAIP(MNX,MLF)
C--------I------I-----I------------------------------------------------
C GM     I DP   I OUT I  WEIGHT FACTOR FOR FORMULA AT XOLD(IOLD)
C        I      I     I  ARRAY : GM(NXNEW)
C--------I------I-----I------------------------------------------------
C GP     I DP   I OUT I  WEIGHT FACTOR FOR FORMULA AT XOLD(IOLD+1)
C        I      I     I  ARRAY : GP(NXNEW)
C--------I------I-----I------------------------------------------------
C ITR    I  I   I OUT I  INDEX RELATION :
C        I      I     I  XOLD(IOLD) <= XNEW(INEW) < XOLD(IOLD+1)
C        I      I     I  -----> ITR(INEW) = IOLD
C        I      I     I  ARRAY : ITR(NXNEW)
C--------I------I-----I------------------------------------------------
C NA     I  I   I OUT I  THE FORMULAE I STARTS FOR THE SOLUTION
C        I      I     I  VEKTOR AT NA(I)+1
C        I      I     I  ARRAY : NA(NXNEW)
C--------I------I-----I------------------------------------------------
C NB     I  I   I  -  I  AUXILIARY ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I OUT I  NFL(I) = LENGTH OF THE FORMULAE I
C        I      I     I  ARRAY : NFL(NXNEW)
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE INTERPOLATION
C--------I------I-----I------------------------------------------------
C NXOLD  I  I   I IN  I  NUMBER OF OLD GRID POINTS
C--------I------I-----I------------------------------------------------
C NXNEW  I  I   I IN  I  NUMBER OF NEW GRID POINTS
C--------I------I-----I------------------------------------------------
C MNX    I  I   I IN  I  ARRAY BOUND ( MNX >= NXNEW )
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NOX+3 )
C--------I------I-----I------------------------------------------------
C MLF    I  I   I IN  I  ARRAY BOUND ( MLF = MOX )
C--------I------I-----I------------------------------------------------
C XNEW   I DP   I IN  I  NEW(NONEQUIDISTANT) GRID
C        I      I     I  XNEW(1) < XNEW(2) <...< XNEW(NXNEW)
C        I      I     I  ARRAY : XNEW(NXNEW)
C--------I------I-----I------------------------------------------------
C XOLD   I DP   I IN  I  OLD(NONEQUIDISTANT) GRID
C        I      I     I  XOLD(1) < XOLD(2) <...< XOLD(NXOLD)
C        I      I     I  ARRAY : XOLD(NXOLD)
C--------I------I-----I------------------------------------------------
C XH     I DP   I  -  I  AUXILIARY ARRAY : XH(MOX)
C--------I------I-----I------------------------------------------------
C XS     I DP   I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C ST     I DP   I  -  I  AUXILIARY ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C Z1     I DP   I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I DP   I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR, IF IER = 1
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IA,IOLD,INEW,J,JJ,K,KD,KK,IL,NPMAX,NH,NP,NPF,NPI
      DOUBLE PRECISION     FA,SUM,XJ,ZERO,ONE,H,XJH
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0,ONE=1.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C**** TEST FOR CORRECTNES OF INPUT
C
      IER = 0
      IF( MOD(NOX,2) .NE. 1  .OR.  NOX.LT.3  .OR.  NOX+3 .GT. MOX
     &                       .OR.  NOX+3 .GT. NXOLD )         IER = 1
      IF( IER.EQ.1 )  R E T U R N
C
C
C**** INITIALIZATIONS :
C
      NPMAX = NOX + 3
      NH = NPMAX / 2
      NP = NPMAX - 1
C
      DO 10 J=1,MLF
         DO 10 INEW=1,MNX
            AIP(INEW,J)  = ZERO
            FAIP(INEW,J) = ZERO
   10 CONTINUE
      DO 20 INEW=1,NXNEW
         GP(INEW) = ZERO
         GM(INEW) = ZERO
   20 CONTINUE
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      XNEW(1)=XOLD(1)
      XNEW(NXNEW)=XOLD(NXOLD)
      IL=0
C
      DO 100 IOLD=1,NXOLD
C
C***  CALCULATION OF THE COEFFICIENTS OF THE INTERPOLATION
C     POLYNOMIA AT GRID POINT XOLD(IOLD)
C
      CALL FDS028(AKNP,AKIP,AKFP,IOLD,IA,IL,MNX,MOX,NB,NH,NP,NPF,
     &     NPI,NXOLD,ST,XOLD,XH,XS,Z1,Z2,H)
C
      DO 80 INEW=1,NXNEW
         XJ=XNEW(INEW)
         IF(IOLD.EQ.1) GO TO 22
         IF(XJ.LE.XOLD(IOLD-1)) GO TO 80
         IF(IOLD.EQ.NXOLD) GO TO 24
   22    IF(XJ.GE.XOLD(IOLD+1)) GO TO 80
   24    IF(XJ.LT.XOLD(IOLD)) GO TO 26
C***     CASE:   XOLD(IOLD) <= XJ < XOLD(IOLD+1)
         NA(INEW)=IA
         NFL(INEW)=NPF
         KD=0
         IF(IOLD.LT.NXOLD) THEN
            FA = (XOLD(IOLD+1)-XJ) / (XOLD(IOLD+1)-XOLD(IOLD))
            ITR(INEW) = IOLD
            GM (INEW) = FA
         ELSE
            FA = ONE
            ITR(INEW) = NXOLD-1
            GP (INEW) = ONE
         ENDIF
         GO TO 32
C***     CASE:   XOLD(IOLD-1) < XJ < XOLD(IOLD)
   26    FA = (XJ-XOLD(IOLD-1)) / (XOLD(IOLD)-XOLD(IOLD-1))
         GP(INEW) = FA
         IF(IA.LT.NA(INEW)) GO TO 28
C***     CASE:   IA >= NA(INEW)
         KD=IA-NA(INEW)
         NFL(INEW)=MAX(NFL(INEW),NPF+KD)
         GO TO 32
C***     CASE:   IA < NA(INEW)
   28    KD=NA(INEW)-IA
         NA(INEW)=IA
         DO 30 K=1,NFL(INEW)
             KK=NFL(INEW)+1-K
             AIP(INEW,KK+KD)=AIP(INEW,KK)
             FAIP(INEW,KK+KD)=FAIP(INEW,KK)
   30    CONTINUE
         DO 31 K=1,KD
            AIP(INEW,K)=ZERO
            FAIP(INEW,K)=ZERO
   31    CONTINUE
         NFL(INEW)=MAX(NFL(INEW)+KD,NPF)
         KD=0
C
C***     FORMULAE FOR THE INTERPOLATION
C
   32    XJH=(XJ-XOLD(IOLD))*H
         DO 40 K=1,NPI
            SUM=AKIP(K,NPI)
            DO 35 J=1,NPI-1
               JJ=NPI-J
               SUM=SUM*XJH+AKIP(K,JJ)
   35       CONTINUE
            KK=NB(K)+KD
            AIP(INEW,KK)=AIP(INEW,KK)+FA*SUM
   40    CONTINUE
C
C***     FORMULAE FOR THE INTERPOLATION OF ORDER NOX+2
C
         DO 50 K=1,NPF
            SUM=AKFP(K,NPF)
            DO 45 J=1,NPF-1
               JJ=NPF-J
               SUM=SUM*XJH+AKFP(K,JJ)
   45       CONTINUE
            KK=NB(K)+KD
            FAIP(INEW,KK)=FAIP(INEW,KK)+FA*SUM
   50    CONTINUE
C
   80 CONTINUE
C
  100 CONTINUE
C
C***  FORMULAE FOR THE ERROR OF THE INTERPOLATION
C
      DO 110 J=1,MLF
      DO 110 INEW=1,NXNEW
         FAIP(INEW,J)=FAIP(INEW,J)-AIP(INEW,J)
  110 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS010----------------------------------------------------
      E    N    D
C:::61      ,,,,,FDS025.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS025 (N12,N3,NK,MNX,MLF,NA,NFA,NFL,
     &                   FDFORM,FDSOL,FDRES)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 2 5   APPLIES A SET OF DIFFERENCE FOMULAE ON A     ***
C**      GIVEN GRID WITH N3 POINTS IN THE X3-DIRECTION TO THE       ***
C**      SOLUTION-VECTOR FDSOL,WHICH IS GIVEN ON A THREEDIMENSIONAL ***
C**      GRID AND STORED IN THAT WAY, THAT THE VALUES OF ONE PLANE  ***
C**      X3 = X3(I3) = CONST. FOLLOW CLOSE BEHIND THE PLANE         ***
C**      X3 = X3(I3-1) = CONST.                                     ***
C**      EACH PLANE HAS N12 = N1 * N2 VALUES.                       ***
C**      IN ONE LOOP THE DERIVATIVES IN THE X3-DIRECTION OF ONE     ***
C**      PLANE ARE COMPUTED. THE VECTOR FDRES WILL BE STORED IN     ***
C**      THE SAME WAY AS FDSOL.                                     ***
C**      THE SUBROUTINE FDS025 CAN ALSO BE USED FOR TWODIMENSIONAL  ***
C**      PROBLEMS. HERE THE DERIVATIVES OF N12 GRIDPOINTS ON ONE    ***
C***     LINE X3 = CONST. ARE COMPUTED.                             ***
C***     THE SUBROUTINE FDS025 CAN ALSO BE USED FOR PERIODIC        ***
C***     PROBLEMS. HERE THE GRIDPOINTS 0, -1, -2 ARE IDENTIFIED     ***
C***     WITH N3, N3-1, N3-2 AND N3+1, N3+2 WITH 1, 2.              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N12, N3, NK, MNX, MLF, NA(N3), NFA(N3), NFL(N3)
C**                                                                 ***
      DOUBLE PRECISION     FDFORM(MNX,MLF), FDSOL(N12,N3,NK),
     &       FDRES(N12,N3,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N12    I  I   I IN  I  NUMBER OF GRID POINTS IN ONE PLANE X3 = CONST.
C--------I------I-----I------------------------------------------------
C N3     I  I   I IN  I  NUMBER OF GRID POINTS IN THE X3-DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MNX,MLFI  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C NA     I  I   I IN  I  THE DIFFERENCE FORMULA I STARTS FOR THE
C        I      I     I  SOLUTION VECTOR AT NA(I)+1
C        I      I     I  ARRAY: NA(N3)
C--------I------I-----I------------------------------------------------
C NFA    I  I   I IN  I  THE DIFFERENCE FORMULA I STARTS IN THE
C        I      I     I  ARRAY OF FORMULAE AT NFA(I)+1
C        I      I     I  ARRAY: NFA(N3)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I IN  I  NFL(I) = LENGTH OF THE DIFFERENCE FORMULA I
C        I      I     I  ARRAY: NFL(N3)
C--------I------I-----I------------------------------------------------
C FDFORM I  DP  I IN  I  ARRAY OF DIFFERENCE FORMULAE
C        I      I     I  ARRAY: FDFORM(MNX,MLF)
C--------I------I-----I------------------------------------------------
C FDSOL  I  DP  I IN  I  SOLUTION-VECTOR FOR ALL GRID POINTS
C        I      I     I  AND ALL COMPONENTS
C        I      I     I  ARRAY: FDSOL(N12,N3,NK)
C--------I------I-----I------------------------------------------------
C FDRES  I  DP  I OUT I  RESULT OF THE DIFFERENCE FORMULAE APPLIED
C        I      I     I  TO THE SOLUTION-VECTOR
C        I      I     I  ARRAY: FDRES(N12,N3,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I12,I3,IK,IF,IFA,IFL,ILA
C**                                                                 ***
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0)
C
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 50 IK=1,NK
      DO 40 I3=1,N3
C
      DO 10 I12=1,N12
         FDRES(I12,I3,IK)=ZERO
   10 CONTINUE
C
      IFL=NFL(I3)
C
      DO 30 IF=1,IFL
         IFA=NFA(I3)+IF
         ILA=NA(I3)+IF
         IF(ILA .LT. 1)  ILA = ILA + N3
         IF(ILA .GT. N3) ILA = ILA - N3
         DO 20 I12=1,N12
            FDRES(I12,I3,IK) = FDRES(I12,I3,IK)
     &                      +FDFORM(I3,IFA)*FDSOL(I12,ILA,IK)
   20    CONTINUE
   30 CONTINUE
C
   40 CONTINUE
   50 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS025----------------------------------------------------
      E    N    D
C:::62      ,,,,,FDS027.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS027(COEFF,IFILE1,IFILE2,MV,MVL,N,NC,NK,
     &                  RL,RN1,RN2,U1,U2,UR1,UR2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 2 7   EVALUATES A DIFFERENCE FORMULAE IN INITIAL-  ***
C**      VALUE-DIRECTION. THE CORRESPONDING PROFILES ARE READ FROM  ***
C**      FILE 1. IF IFILE2 > 0  THE RESULT IS WRITTEN ON FILE 2.    ***
C**      U2(I) = SUM( COEFF(J) * U (I) )      , I = 1(1)M           ***
C**            J=1(1)NC           J             M = N * NK          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IFILE1,IFILE2,MV,MVL,N,NC,NK,RL,RN1(1),RN2,UR1,UR2
      DOUBLE PRECISION   COEFF(1), U1(1), U2(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C COEFF  I  DP  I IN  I  COEFFICIENTS OF THE DIFFERENCE FORMULA
C        I      I     I  ARRAY : COEFF(NC)
C--------I------I-----I------------------------------------------------
CIFILE1,2I  I   I IN  I  UNIT-NUMBERS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF
C        I      I     I  THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NC     I  I   I IN  I  NUMBER OF COEFFICIENTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C RN1    I  I   I IN  I  RECORD NUMBERS FOR THE PROFILES ON FILE 1
C        I      I     I  ARRAY : RN1(NC)
C--------I------I-----I------------------------------------------------
C RN2    I  I   I IN  I  RECORD NUMBERS FOR THE RESULT ON FILE 2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY OF LENGTH M = N * NK
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  RESULT-VECTOR
C        I      I     I  ARRAY : U2(N,NK)
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I, IA, J, K, M, NV, RN, IERR
      DOUBLE PRECISION   ZERO
      EXTERNAL FDS317,FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
      M = N * NK
C
C****  INITIALIZATION
C      --------------
C
      K = 0
   10 IA = K
      NV = MIN(M-K,MVL)
      K = K + NV
      DO 20 I=1,NV
         U2(I+IA) = ZERO
   20 CONTINUE
      IF(K.LT.M) GO TO 10
C
C**** START OF CALCULATION :
C    ---------------------
C
      DO 100 J=1,NC
         RN = RN1(J)
         CALL FDS332(U1,N,NK,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
C
C***     SPLITTING UP THE LOOP 1(1)M INTO PARTS OF LENGTH MVL
C
         K = 0
   40    IA = K
         NV = MIN(M-K,MVL)
         K = K + NV
         DO 50 I=1,NV
            U2(I+IA) = U2(I+IA) + COEFF(J) * U1(I+IA)
   50    CONTINUE
         IF(K.LT.M) GO TO 40
  100 CONTINUE
C
      IF(IFILE2.EQ.0) GO TO 200
      CALL FDS332(U2,N,NK,MV,IFILE2,RN2,RL,UR2,FDS318,IERR)
C
C
C
C**** END OF CALCULATION
C     ------------------
C
  200 R E T U R N
C-----END OF FDS027----------------------------------------------------
      E    N    D
C:::63      ,,,,,FDS028.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS028 (AKNP,AKIP,AKFP,I,IA,IL,MNX,MOX,NB,NH,NP,
     &                   NPF,NPI,NX,ST,X,XH,XS,Z1,Z2,H)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 2 8    COMPUTES THE COEFFICIENTS OF THE NEWTON-    ***
C**                     INTERPOLATION-POLYNOMIA AND THE COEFF.      ***
C**                     FOR THE INTERPOLATION AND ERROR FORMULAE    ***
C**                     AT GRIDPOINT X(I).                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  I,IA,IL,MNX,MOX,NB(MOX),NH,NP,NPF,NPI,NX
      DOUBLE PRECISION   
     & AKNP(MOX,MOX),AKIP(MOX,MOX),AKFP(MOX,MOX),ST(MOX,MOX),
     &        X(MNX),XH(MOX),XS(MOX),Z1(MOX),Z2(MOX),H
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C AKNP   I  DP  I  -  I  AUXILIARY ARRAY : AKNP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKIP   I  DP  I OUT I  COEFFICIENTS FOR THE INTERPOLATION
C        I      I     I  ARRAY : AKIP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKFP   I  DP  I OUT I  COEFFICIENTS FOR THE INTERPOLATION OF
C        I      I     I  HIGHER ORDER NOX+2
C        I      I     I  ARRAY : AKFP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C I      I  I   I IN  I  NUMBER OF AKTUAL GRID POINT
C--------I------I-----I------------------------------------------------
C IA     I  I   I OUT I  IA+1 = FIRST POINT IN THE FORMULA
C--------I------I-----I------------------------------------------------
C IL     I  I   I IN  I  NUMBER OF AKTUAL GRID POINT WITHIN
C        I      I     I  THE FORMULA
C--------I------I-----I------------------------------------------------
C MNX    I  I   I IN  I  ARRAY BOUND ( MNX >= NX )
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NOX+3 )
C--------I------I-----I------------------------------------------------
C NB     I  I   I OUT I  NUMBER OF NEIGHBOURING GRID POINTS IN THE
C        I      I     I  DIFFERENCE FORMULA
C        I      I     I  ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C NH     I  I   I IN  I  (NOX+3) / 2
C--------I------I-----I------------------------------------------------
C NP     I  I   I IN  I  NUMBER OF POINTS IN A CENTRAL FORMULA
C--------I------I-----I------------------------------------------------
C NPF    I  I   I OUT I  NUMBER OF POINTS IN THE INTERPOLATION FORMULA
C--------I------I-----I------------------------------------------------
C NPI    I  I   I OUT I  NUMBER OF POINTS IN THE ERROR FORMULA
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRID POINTS
C--------I------I-----I------------------------------------------------
C ST     I  DP  I  -  I  AUXILIARY ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  (NONEQUIDISTANT) GRID
C        I      I     I  ARRAY : X(MNX)
C--------I------I-----I------------------------------------------------
C XH     I  DP  I  -  I  AUXILIARY ARRAY : XH(MOX)
C--------I------I-----I------------------------------------------------
C XS     I  DP  I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C Z1     I  DP  I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I  DP  I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C H      I  DP  I OUT I  NORM-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I1,I2,II,J,JJ,K,NOXPLU,NOXFPL
      DOUBLE PRECISION     ONE,ZERO,XJ
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0, ONE=1.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C**** FORMULAE FOR THE GRIDPOINT X(I) :
C
      IF( I .LE. NH  .OR.  I .GE. NX - NH + 2 )   IL = IL + 1
      IF( I .EQ. NX - NH + 2 )   IL = IL + 1
      NOXPLU = 0
      NOXFPL = 0
      IF( I .LE. NH - 1  .OR.  I .GE. NX - NH + 2 )  NOXFPL = 1
      IF( I .LE. NH - 2  .OR.  I .GE. NX - NH + 3 )  NOXPLU = 1
      NPF = NP + NOXFPL
      NPI = NP-2 + NOXPLU
      IA = I - IL
C
      IF(I.EQ.1) H=ONE/(X(2)-X(1))
      IF(I.GT.1) H=ONE/(X(I)-X(I-1))
      DO 100 K=1,NPF
         XH(K)=(X(IA+K)-X(I))*H
  100 CONTINUE
C
C**** MATRIX OF THE DIVIDED DIFFERENCES FOR THE UNIT VECTORS :
C
      CALL FDS002(IL,0,XH,XS,MOX,MOX,NPF,NPF,ST,Z1,Z2,NB)
C
C**** COEFFICIENTS OF THE NEWTON - POLYNOMIA
C
      DO 110 I2=1,MOX
      DO 110 I1=1,MOX
         AKNP(I1,I2)= ZERO
         AKIP(I1,I2)= ZERO
         AKFP(I1,I2)= ZERO
  110 CONTINUE
C
      AKNP(1,1)= ONE
C
      DO 130 I2=2,NPF
         J=NB(I2-1)
         XJ=XH(J)
         AKNP(I2,1)= -AKNP(I2-1,1)*XJ
         DO 120 I1=2,I2
            AKNP(I2,I1)= AKNP(I2-1,I1-1)-AKNP(I2-1,I1)*XJ
  120    CONTINUE
  130 CONTINUE
C
C**** COEFFICIENTS FOR THE INTERPOLATION POLYNOMIA
C
      DO 160 I2=1,NPI
      DO 150 I1=1,NPI
      II=NB(I1)
      DO 140 J=I1,NPI
         JJ=J
         AKIP(I1,I2)= AKIP(I1,I2)+ST(JJ,II)*AKNP(JJ,I2)
  140 CONTINUE
  150 CONTINUE
  160 CONTINUE
C
      DO 190 I2=1,NPF
      DO 180 I1=1,NPF
      II=NB(I1)
      DO 170 J=I1,NPF
         JJ=J
         AKFP(I1,I2)= AKFP(I1,I2)+ST(JJ,II)*AKNP(JJ,I2)
  170 CONTINUE
  180 CONTINUE
  190 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS028----------------------------------------------------
      E    N    D
C:::64      ,,,,,FDS031.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS031 (AKNP,AKIP,AKFP,AIP,FAIP,IEX,IA,NB,NPF,NOX,
     &                   NX,MOX,X,XH,XS,ST,Z1,Z2,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 3 1    COMPUTES THE COEFFICIENTS OF THE FORMULAE   ***
C**      FOR THE EXTRAPOLATION OF THE SOLUTION ON A BOUNDARY        ***
C**      POINT (THE SOLUTION IS GIVEN AT THE INNER POINTS) AND      ***
C**      THE COEFFICIENTS OF THE CORRESPONDING ERROR FORMULAE.      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IA,IER,IEX,MOX,NB(MOX),NOX,NPF,NX
      DOUBLE PRECISION  AKNP(MOX,MOX),AKIP(MOX,MOX),AKFP(MOX,MOX),
     &       AIP(MOX),FAIP(MOX),ST(MOX,MOX),X(NX),
     &       XH(MOX),XS(MOX),Z1(MOX),Z2(MOX)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C AKNP   I REAL I  -  I  AUXILIARY ARRAY : AKNP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKIP   I REAL I  -  I  AUXILIARY ARRAY : AKIP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AKFP   I REAL I  -  I  AUXILIARY ARRAY : AKFP(MOX,MOX)
C--------I------I-----I------------------------------------------------
C AIP    I REAL I OUT I  EXTRAPOLATION FORMULAE
C        I      I     I  UEX = SUM(AIP(J) * U(IA+J))
C        I      I     I       J=1(1)NPF
C        I      I     I  ARRAY : AIP(MOX)
C--------I------I-----I------------------------------------------------
C FAIP   I REAL I OUT I  FORMULAE FOR THE ERROR OF THE EXTRAPOLATION
C        I      I     I  DUEX = SUM(FAIP(J) * U(IA+J))
C        I      I     I        J=1(1)NPF
C        I      I     I  ARRAY : FAIP(MOX)
C--------I------I-----I------------------------------------------------
C IA     I  I   I OUT I  THE FORMULA STARTS FOR THE SOLUTION VECTOR
C        I      I     I  AT IA+1
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C IEX    I  I   I IN  I  DETERMINES AT WHICH BOUNDARY THE EXTRAPOLATION
C        I      I     I  FORMULA HAS TO BE COMPUTED (IEX=1 OR IEX=NX)
C--------I------I-----I------------------------------------------------
C NB     I  I   I  -  I  AUXILIARY ARRAY : NB(MOX)
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE COMPUTATION OF
C        I      I     I  THE CORRESPONDING FORMULAE FOR DERIVATIVES
C--------I------I-----I------------------------------------------------
C NPF    I  I   I OUT I  NUMBER OF POINTS WITHIN THE ERROR FORMULA
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NOX+3 )
C--------I------I-----I------------------------------------------------
C X      I REAL I IN  I  COORDINATES OF THE (NONEQUIDISTANT) GRIDPOINTS
C--------I------I-----I------------------------------------------------
C XH     I REAL I  -  I  AUXILIARY ARRAY : XH(MOX)
C--------I------I-----I------------------------------------------------
C XS     I REAL I  -  I  AUXILIARY ARRAY : XS(MOX)
C--------I------I-----I------------------------------------------------
C ST     I REAL I  -  I  AUXILIARY ARRAY : ST(MOX,MOX)
C--------I------I-----I------------------------------------------------
C Z1     I REAL I  -  I  AUXILIARY ARRAY : Z1(MOX)
C--------I------I-----I------------------------------------------------
C Z2     I REAL I  -  I  AUXILIARY ARRAY : Z2(MOX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IL,J,JJ,K,KK,NH,NP,NPI
      DOUBLE PRECISION  H,SUM,XJH,ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C**** TEST FOR CORRECTNES OF INPUT
C
      IER = 0
      IF( NOX.LT.0  .OR.  NOX+3 .GT. MOX
     &              .OR.  NOX+3 .GT. NX )        IER = 1
      IF(IEX.NE.1.AND.IEX.NE.NX)                 IER = 2
      IF( IER.NE.0 )  R E T U R N
C
C**** INITIALIZATIONS :
C
      NP = NOX + 2
      NH = 4
C
         DO 10 J=1,MOX
            AIP(J)  = ZERO
            FAIP(J) = ZERO
   10    CONTINUE
C
C**** START OF CALCULATION :
C     ---------------------
C
      IF (IEX .EQ. 1) THEN
C       EXTRAPOLATION AT POINT X(1)
        I = 2
        IL = 0
      ELSE
C       EXTRAPOLATION AT POINT X(NX)
        I = NX -1
        IL = NP
      ENDIF
C
C***  CALCULATION OF THE COEFFICIENTS OF THE EXTRAPOLATION
C     POLYNOMIA
C
      CALL FDS028(AKNP,AKIP,AKFP,I,IA,IL,NX,MOX,NB,NH,NP,NPF,
     &     NPI,NX,ST,X,XH,XS,Z1,Z2,H)
C
C***  FORMULAE FOR THE EXTRAPOLATION
C
      XJH = (X(IEX)-X(I))*H
      DO 40 K=1,NPI
         SUM = AKIP(K,NPI)
         DO 35 J=1,NPI-1
            JJ = NPI-J
            SUM = SUM*XJH+AKIP(K,JJ)
  35     CONTINUE
         KK = NB(K)
         AIP(KK) = AIP(KK)+SUM
  40  CONTINUE
C
C***  FORMULAE FOR THE EXTRAPOLATION OF ORDER NOX+2
C
      DO 50 K=1,NPF
         SUM=AKFP(K,NPF)
         DO 45 J=1,NPF-1
            JJ=NPF-J
            SUM=SUM*XJH+AKFP(K,JJ)
   45    CONTINUE
         KK=NB(K)
         FAIP(KK) = FAIP(KK)+SUM
   50 CONTINUE
C
C***  FORMULAE FOR THE ERROR OF THE EXTRAPOLATION
C
      DO 60 J=1,MOX
         FAIP(J)=FAIP(J)-AIP(J)
   60 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS031----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDS051.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      INTEGER FUNCTION FDS051(X,EPS)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 5 1   RETURNS THE SIGN OF THE FLOATING POINT       ***
C**      VALUE X :                                                  ***
C**      IF X < - EPS --> FDS051 := - 1                             ***
C**      IF X >   EPS --> FDS051 := + 1                             ***
C**      ELSE         --> FDS051 :=   0                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      DOUBLE PRECISION  X, EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  FLOATING POINT VALUE FOR THE SIGN COMPUTATION
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL CONSTANT, WHICH DEFINES THE "ZERO-
C        I      I     I  REGION" OF THE SIGN
C--------I------I-----I------------------------------------------------
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IF(ABS(X).LT.EPS) GO TO 20
      IF (X) 10,20,30
  10  FDS051= -1
      RETURN
  20  FDS051=  0
      RETURN
  30  FDS051= +1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS051----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDS061.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS061 ( TAU, C, N, IBCBEG, IBCEND )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 6 1   GENERATES A CUBIC SPLINE FOR GIVEN DATA      ***
C**      POINTS.                                                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C     ***********************  INPUT  ******************************
C
C     N = NUMBER OF DATA POINTS. ASSUMED TO BE .GE. 2.
C     (TAU(I), C(1,I), I=1,...,N) = ABSCISSAE AND ORDINATES OF THE
C        DATA POINTS. TAU IS ASSUMED TO BE STRICTLY INCREASING.
C     IBCBEG, IBCEND = BOUNDARY CONDITION INDICATORS, AND
C     C(2,1), C(2,N) = BOUNDARY CONDITION INFORMATION. SPECIFICALLY,
C        IBCBEG = 0 MEANS NO BOUDARY CONDITION AT TAU(1)  IS  GIVEN.
C           IN THIS CASE, THE NOT-A-KNOT CONDITION IS USED, I.E. THE
C           JUMP IN THE THIRD  DERIVATIVE ACROSS TAU(2) IS FORCED TO
C           ZERO, THUS THE FIRST AND THE SECOND CUBIC POLYNOMIAL
C           PIECES ARE MADE TO COINCIDE.)
C        IBCBEG = 1 MEANS THAT THE SLOPE AT TAU(1) IS MADE TO EQUAL
C           C(2,1), SUPPLIED BY INPUT.
C        IBCBEG = 2 MEANS THAT THE SECOND DERIVATIVE AT TAU(1) IS
C           MADE TO EQUAL C(2,1), SUPPLIED BY INPUT.
C        IBCEND = 0, 1, OR 2 HAS ANALOGOUS MEANING CONCERNING THE
C           BOUNDARY CONDITION AT TAU(N), WITH THE ADDITIONAL INFOR-
C           MATION TAKEN FROM C(2,N).
C
C     ************************ OUTPUT  *****************************
C
C     C(J,I), J=1,...,4; I=1,...,L (= N-1) = THE POLYNOMIAL COEFFI -
C        CIENTS OF THE CUBIC INTERPOLATING SPLINE WITH INTERIOR
C        KNOTS (OR JOINTS) TAU(2),...,TAU(N-1). PRECISELY, IN THE
C        INTERVAL (TAU(I), TAU(I+1)), THE SPLINE F IS GIVEN BY
C            F(X) = C(1,I)+H*(C(2,I)+H*(C(3,I)+H*C(4,I)/3.)/2.)
C        WHERE H = X - TAU(I). THE FUNCTION PROGRAM *PPVALU* MAY BE
C        USED TO EVALUATE F OR ITS DERIVATIVES FROM TAU,C, L = N-1,
C        AND K = 4.
      INTEGER IBCBEG,IBCEND,N,   I,J,L,M,JJ
      DOUBLE PRECISION C(4,1),TAU(1),        DIVDF1,DIVDF3,DTAU,G
C****** A TRIDIAGONAL LINEAR SYSTEM FOR UNKNOWN SLOPES S(I) OF
C  F AT TAU(I), I=1,...,N, IS GENERATED AND THEN SOLVED BY GAUSS
C  ELIMINATION, WITH S(I) ENDING UP IN C(2,I), ALL I.
C     C(3,.) AND C(4,.) ARE USED INITIALLY FOR TEMPORARY STORAGE.
      L = N-1
COMPUTE FIRST DIFFERENCES OF TAU SEQUENCE AND STORE IN C(3,.). ALSO,
COMPUTE FIRST DIVIDED DIFFERENCE OF DATA AND STORE IN C(4,.).
      DO 10 M=2,N
         C(3,M) = TAU(M) - TAU(M-1)
   10    C(4,M) = (C(1,M) - C(1,M-1))/C(3,M)
CONSTRUCT FIRST EQUATION FROM THE BOUNDARY CONDITION, OF THE FROM
C             C(4,1)*S(1) + C(3,1)*S(2) = C(2,1)
      IF (IBCBEG-1)                     11,15,16
   11 IF (N .GT. 2)                     GO TO 12
C     NO CONDITION AT LEFT END AND N = 2.
      C(4,1) = 1.
      C(3,1) = 1.
      C(2,1) = 2.*C(4,2)
      GO TO 25
C     NOT-A-KNOT CONDITION AT LEFT END AND N .GT. 2.
   12 C(4,1) = C(3,3)
      C(3,1) = C(3,2) + C(3,3)
      C(2,1)=((C(3,2)+2.*C(3,1))*C(4,2)*C(3,3)+C(3,2)**2*C(4,3))/C(3,1)
      GO TO 19
C     SLOPE PRESCRIBED AT LEFT END.
   15 C(4,1) = 1.
      C(3,1) = 0.
      GO TO 18
C     SECOND DERIVATIVE PRESCRIBED AT LEFT END.
   16 C(4,1) = 2.
      C(3,1) = 1.
      C(2,1) = 3.*C(4,2) - C(3,2)/2.*C(2,1)
   18 IF(N .EQ. 2)                         GO TO 25
C  IF THERE ARE INTERIOR KNOTS, GENERATE THE CORRESP. EQUATIONS AND
C  CARRY OUT THE FORWARD PASS OF GAUSS ELIMINATION, AFTER WHICH THE
C  M-TH EQUATION READS   C(4,M)*S(M) + C(3,M)*S(M+1) = C(2,M).
   19 DO 20 M=2,L
         G = -C(3,M+1)/C(4,M-1)
         C(2,M) = G*C(2,M-1) + 3.*(C(3,M)*C(4,M+1)+C(3,M+1)*C(4,M))
   20    C(4,M) = G*C(3,M-1) + 2.*(C(3,M) + C(3,M+1))
CONSTRUCT LAST EQUATION FROM THE SECOND BOUNDARY CONDITION, OF THE FORM
C         (-G*C(4,N-1))*S(N-1) + C(4,N)*S(N) = C(2,N)
C     IF SLOPE IS PRESCRIBED AT RIGHT END, ONE CAN GO DIRECTLY TO BACK-
C     SUBSTITUTION, SINCE C ARRAY HAPPENS TO BE SET UP JUST RIGHT FOR
C     IT AT THIS POINT.
      IF(IBCEND-1)                     21,30,24
   21 IF(N .EQ. 3 .AND. IBCBEG .EQ. 0) GO TO 22
C     NOT-A-KNOT AND N .GE. 3, AND EITHER N .GT. 3 OR ALSO NOT-A-KNOT
C     AT LEFT END POINT.
      G = C(3,N-1) + C(3,N)
      C(2,N) = ((C(3,N)+2.*G)*C(4,N)*C(3,N-1)
     *           + C(3,N)**2*(C(1,N-1)-C(1,N-2))/C(3,N-1))/G
      G = -G/C(4,N-1)
      C(4,N) = C(3,N-1)
      GO TO 29
C     EITHER(N=3 AND NOT-A-KNOT ALSO AT LEFT) OR (N=2 AND NOT NOT-A-
C     KNOT AT LEFT END POINT).
   22 C(2,N) = 2.*C(4,N)
      C(4,N) = 1.
      GO TO 28
C     SECOND DERIVATIVE PRESCRIBED AT RIGHT ENDPOINT.
   24 C(2,N) = 3.*C(4,N) + C(3,N)/2.*C(2,N)
      C(4,N) = 2.
      GO TO 28
   25 IF(IBCEND-1)                     26,30,24
   26 IF(IBCBEG .GT. 0)                GO TO 22
C     NOT-A-KNOT AT RIGHT ENDPOINT AND AT LEFT ENDPOINT AND N = 2.
      C(2,N) = C(4,N)
      GO TO 30
   28 G = -1./C(4,N-1)
COMPLETE FORWARD PASS OF GAUSS ELIMINATION.
   29 C(4,N) = G*C(3,N-1) + C(4,N)
      C(2,N) = (G*C(2,N-1) + C(2,N))/C(4,N)
CARRY OUT BACK SUBSTITUTION
   30 DO 40 JJ = 1,L
      J = L + 1 - JJ
   40    C(2,J) = (C(2,J) - C(3,J)*C(2,J+1))/C(4,J)
C**** GENERATE CUBIC COEFFICIENTS IN EACH INTERVAL, I.E., THE DERIV.S
C     AT ITS LEFT ENDPOINT, FROM VALUE AND SLOPE AT ITS ENDPOINTS.
      DO 50 I = 2,N
         DTAU = C(3,I)
         DIVDF1 = (C(1,I) - C(1,I-1))/DTAU
         DIVDF3 = C(2,I-1) + C(2,I) - 2.*DIVDF1
         C(3,I-1) = 2.*(DIVDF1 - C(2,I-1) - DIVDF3)/DTAU
   50    C(4,I-1) = (DIVDF3/DTAU)*(6./DTAU)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS061----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDS062.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS062(X,DX,NX,Y,F,IX,C)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 0 6 2   EVALUATES THE SPLINE FUNCTION OF THE         ***
C**      LOGARITHMIC STEP SIZES AT THE COORDINATE Y.                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      DOUBLE PRECISION  DX(1),F,X(1),Y,C(4,1)
      INTEGER  IX,NX
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  COORDINATES WHERE THE SPLINE-COEFFICIENTS ARE
C        I      I     I  GIVEN.                          ARRAY : X(NX)
C--------I------I-----I------------------------------------------------
C DX     I  DP  I IN  I  VALUES OF THE LOGARITHMIC STEP SIZES
C        I      I     I  ARRAY : DX(NX)
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C Y      I  DP  I IN  I  COORDINATE WHERE THE SPLINEFUNCTION HAS TO BE
C        I      I     I  EVALUATED
C--------I------I-----I------------------------------------------------
C F      I  DP  I OUT I  RESULTING STEP SIZE AT Y
C--------I------I-----I------------------------------------------------
C IX     I  I   I I/O I  INDEX FOR THE INTERVAL-NUMBER
C--------I------I-----I------------------------------------------------
C C      I  DP  I IN  I  SPLINE-COEFFICIENTS
C        I      I     I  ARRAY : C(4,NX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER IX1
      DOUBLE PRECISION D,S
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IF (Y.LT.X(NX)) GO TO 20
C
C***  Y GREATER/EQUAL LAST GRIDPOINT
C
      F=DX(NX)
      IX=NX
      RETURN
  20  IF (Y.GT.X(1)) GO TO 30
C
C***  Y EQUAL FIRST GRIDPOINT
C
      F=DX(1)
      IX=1
      RETURN
C
C***  LOOK FOR THE INTERVAL, STARTING WITH X(IX)
C
  30  IF (Y.GE.X(IX)) GO TO 40
      IX=IX-1
      GO TO 30
  40  IX1=IX+1
      IF (Y.LT.X(IX1)) GO TO 50
      IX=IX+1
      GO TO 40
C
C***  Y LIES IN THE INTERVAL (X(IX),X(IX1))
C
  50  D=Y-X(IX)
      S=C(1,IX)+D*(C(2,IX)+D*(C(3,IX)+D*C(4,IX)/3.)/2.)
      F=EXP(S)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS062----------------------------------------------------
      E    N    D
C:::65      ,,,,,FDS101.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS101 ( NN,V,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 0 1   COMPUTES THE ABSOLUTE MAXIMUM OF V           ***
C**                    OVER ALL COMPONENTS.                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            NN
      DOUBLE PRECISION   V(1),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NN     I  I   I IN  I  NUMBER OF VALID ELEMENTS IN V
C--------I------I-----I------------------------------------------------
C V      I  DP  I IN  I  PROFIL FOR WHICH THE ABSOLUTE MAXIMUM
C        I      I     I  HAS TO BE COMPUTED           ARRAY : V(NN)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL CONSTANT ( VMAX >= EPS )
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I1
      DOUBLE PRECISION  VMAX
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      VMAX=EPS
      DO 10 I1=1,NN
         VMAX=MAX(VMAX,ABS(V(I1)))
   10 CONTINUE
      FDS101=VMAX
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS101----------------------------------------------------
      E    N    D
C:::66      ,,,,,FDS102.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS102 ( N1,N2,M1,M2,V,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 0 2   COMPUTES THE ABSOLUTE MAXIMUM OF V           ***
C**                    OVER ALL VALID COMPONENTS.                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1,N2,M1,M2
      DOUBLE PRECISION   V(M1,M2),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1,N2  I  I   I IN  I  NUMBER OF VALID ELEMENTS IN V
C--------I------I-----I------------------------------------------------
C M1,M2  I  I   I IN  I  ARRAY BOUNDS FOR V
C--------I------I-----I------------------------------------------------
C V      I  DP  I IN  I  PROFIL FOR WHICH THE ABSOLUTE MAXIMUM
C        I      I     I  HAS TO BE COMPUTED      ARRAY : V(M1,M2)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL CONSTANT ( VMAX >= EPS )
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I1,I2
      DOUBLE PRECISION  VMAX
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      VMAX=EPS
      DO 10 I2=1,N2
      DO 10 I1=1,N1
         VMAX=MAX(VMAX,ABS(V(I1,I2)))
   10 CONTINUE
      FDS102=VMAX
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS102----------------------------------------------------
      E    N    D
C:::67      ,,,,,FDS103.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS103 ( N1,N2,N3,M1,M2,M3,V,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 0 3   COMPUTES THE ABSOLUTE MAXIMUM OF V           ***
C**                    OVER ALL VALID COMPONENTS.                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1,N2,N3,M1,M2,M3
      DOUBLE PRECISION   V(M1,M2,M3),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1,N2, I  I   I IN  I  NUMBER OF VALID ELEMENTS IN V
C N3     I      I     I
C--------I------I-----I------------------------------------------------
C M1,M2, I  I   I IN  I  ARRAY BOUNDS FOR V
C M3     I      I     I
C--------I------I-----I------------------------------------------------
C V      I  DP  I IN  I  PROFIL FOR WHICH THE ABSOLUTE MAXIMUM
C        I      I     I  HAS TO BE COMPUTED      ARRAY : V(M1,M2,M3)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL CONSTANT ( VMAX >= EPS )
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I1,I2,I3
      DOUBLE PRECISION  VMAX
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      VMAX=EPS
      DO 10 I3=1,N3
      DO 10 I2=1,N2
      DO 10 I1=1,N1
         VMAX=MAX(VMAX,ABS(V(I1,I2,I3)))
   10 CONTINUE
      FDS103=VMAX
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS103----------------------------------------------------
      E    N    D
C:::68      ,,,,,FDS111.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS111(N1,N2,M1,M2,U,UMAX,EPS)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 1 1   COMPUTES FOR EACH LAST INDEX (SOLUTION       ***
C**      COMPONENT) THE ABSOLUTE MAXIMUM OF U OVER ALL OTHER        ***
C**      INDIZES (OVER ALL GRID POINTS).                            ***
C**      VERSION FOR 1-DIMENSIONAL PROBLEMS.                        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1,N2,M1,M2
      DOUBLE PRECISION   U(M1,M2),UMAX(M2),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1,N2  I  I   I IN  I  NUMBER OF VALID ELEMENTS IN EACH DIRECTION
C--------I------I-----I------------------------------------------------
C M1,M2  I  I   I IN  I  ARRAY BOUNDS FOR U AND UMAX
C--------I------I-----I------------------------------------------------
C U      I  DP  I IN  I  SOLUTION FOR WHICH THE ABSOLUTE MAXIMUM OF
C        I      I     I  EACH COMPONENT HAS TO BE COMPUTED
C        I      I     I                                 ARRAY: U(M1,M2)
C--------I------I-----I------------------------------------------------
C UMAX   I  DP  I OUT I  ABSOLUTE MAXIMA OF U FOR EACH COMPONENT
C        I      I     I                                 ARRAY: UMAX(M2)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I2
      DOUBLE PRECISION     FDS101
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 20 I2=1,N2
         UMAX(I2)=FDS101(N1,U(1,I2),EPS)
   20 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS111----------------------------------------------------
      E    N    D
C:::69      ,,,,,FDS123.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS123 ( NX,NY,NK,MNX,MNY,U1,U2,U1RMAX,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 2 3   RELATIVATES ERROR U1 WITH SOLUTION U2 AND    ***
C**      COMPUTES THE RELATIVE-NORM FOR EACH COMPONENT.             ***
C**      ( VERSION WITH EXPLICIT DIMENSION FOR EACH DIRECTION)      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            NX,NY,NK,MNX,MNY
      DOUBLE PRECISION   U1(MNX,MNY,NK), U2(MNX,MNY,NK),
     &                   U1RMAX(1),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR U1 AND U2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  ERROR OF THE SOLUTION
C        I      I     I                    ARRAY :  U1(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  SOLUTION          ARRAY :  U2(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C U1RMAX I  DP  I OUT I  RELATIVE-NORM FOR EACH COMPONENT
C        I      I     I                            ARRAY : U1RMAX(N1)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           I1, I2, IK
      DOUBLE PRECISION  U2REL, ZERO, ONE, FDS102
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO = 0.0, ONE = 1.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 30 IK = 1,NK
      U2REL = ONE / FDS102(NX,NY,MNX,MNY,U2(1,1,IK),EPS)
      DO 20 I2=1,NY
      DO 20 I1=1,NX
         U1(I1,I2,IK) = ABS(U1(I1,I2,IK)) * U2REL
   20 CONTINUE
      U1RMAX(IK) = FDS102(NX,NY,MNX,MNY,U1(1,1,IK),ZERO)
   30 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS123----------------------------------------------------
      E    N    D
C:::70      ,,,,,FDS131.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS131 ( N1,N2,U1,U2,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 3 1   COMPUTES FOR EACH SOLUTION COMPONENT THE     ***
C**      MAXIMUM OF U1 RELATIVE TO U2 OVER ALL GRID POINTS. AT LAST ***
C**      THE MAXIMUM OVER ALL SOLUTION COMPONENTS IS COMPUTED.      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1, N2
      DOUBLE PRECISION   U1(N1,N2), U2(N1,N2), EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C N2     I  I   I IN  I  NUMBER OF GRID-POINTS
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  PROFIL FOR WHICH THE RELATIVE MAXIMUM
C        I      I     I  HAS TO BE COMPUTED.       ARRAY : U1(N1,N2)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  SOLUTION                  ARRAY : U2(N1,N2)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION  U1MAX, U2MAX, UMAXR, ZERO
      INTEGER           I1, I2
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      UMAXR = EPS
      DO 20 I1 = 1,N1
      U1MAX = ZERO
      U2MAX = EPS
      DO 10 I2 = 1,N2
         IF(ABS(U1(I1,I2)).GT.U1MAX)  U1MAX = ABS(U1(I1,I2))
         IF(ABS(U2(I1,I2)).GT.U2MAX)  U2MAX = ABS(U2(I1,I2))
   10 CONTINUE
      IF(U1MAX/U2MAX.GT.UMAXR)  UMAXR = U1MAX / U2MAX
   20 CONTINUE
      FDS131 = UMAXR
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS131----------------------------------------------------
      E    N    D
C:::71      ,,,,,FDS132.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS132 ( N1,N2,U1,U2,U1RMAX,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 3 2   RELATIVATES ERROR U1 WITH SOLUTION U2 AND    ***
C**      COMPUTES THE RELATIVE-NORM FOR EACH COMPONENT.             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1, N2
      DOUBLE PRECISION   U1(N1,N2), U2(N1,N2), U1RMAX(1),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1     I  I   I IN  I  NUMBER OF GRID-POINTS
C--------I------I-----I------------------------------------------------
C N2     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  ERROR OF THE SOLUTION     ARRAY : U1(N1,N2)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  SOLUTION                  ARRAY : U2(N1,N2)
C--------I------I-----I------------------------------------------------
C U1RMAX I  DP  I OUT I  RELATIVE-NORM FOR EACH COMPONENT
C        I      I     I                            ARRAY : U1RMAX(N1)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           I1 , I2
      DOUBLE PRECISION  U2MAX , ZERO, FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 30 I2 = 1,N2
      U2MAX = FDS101(N1,U2(1,I2),EPS)
      DO 20 I1=1,N1
         U1(I1,I2) = ABS(U1(I1,I2)) / U2MAX
   20 CONTINUE
      U1RMAX(I2) = FDS101(N1,U1(1,I2),ZERO)
   30 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS132----------------------------------------------------
      E    N    D
C:::72      ,,,,,FDS133.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS133 ( NX,NY,NZ,NK,MNX,MNY,MNZ,U1,U2,U1RMAX,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 3 3   RELATIVATES ERROR U1 WITH SOLUTION U2 AND    ***
C**      COMPUTES THE RELATIVE-NORM FOR EACH COMPONENT.             ***
C**      ( VERSION WITH EXPLICIT DIMENSION FOR EACH DIRECTION)      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            NX,NY,NZ,NK,MNX,MNY,MNZ
      DOUBLE PRECISION   U1(MNX,MNY,MNZ,NK), U2(MNX,MNY,MNZ,NK),
     &                   U1RMAX(1),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  ARRAY BOUNDS FOR U1 AND U2
C MNZ    I      I     I
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  ERROR OF THE SOLUTION
C        I      I     I                    ARRAY :  U1(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  SOLUTION          ARRAY :  U2(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C U1RMAX I  DP  I OUT I  RELATIVE-NORM FOR EACH COMPONENT
C        I      I     I                            ARRAY : U1RMAX(N1)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           I1, I2, I3, IK
      DOUBLE PRECISION  U2REL, ZERO, ONE, FDS103
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO = 0.0, ONE = 1.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 30 IK = 1,NK
      U2REL = ONE / FDS103(NX,NY,NZ,MNX,MNY,MNZ,U2(1,1,1,IK),EPS)
      DO 20 I3=1,NZ
      DO 20 I2=1,NY
      DO 20 I1=1,NX
         U1(I1,I2,I3,IK) = ABS(U1(I1,I2,I3,IK)) * U2REL
   20 CONTINUE
      U1RMAX(IK) = FDS103(NX,NY,NZ,MNX,MNY,MNZ,U1(1,1,1,IK),ZERO)
   30 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS133----------------------------------------------------
      E    N    D
C:::73      ,,,,,FDS151.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS151 ( N,V,EPS )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 1 5 1   COMPUTES THE L2-NORM OF V OVER N COMPONENTS. ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N
      DOUBLE PRECISION   V(1), EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF COMPONENTS OF V
C--------I------I-----I------------------------------------------------
C V      I  DP  I IN  I  PROFIL FOR WHICH THE L2-NORM HAS TO BE
C        I      I     I  COMPUTED                  ARRAY : V(N)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL CONSTANT ( FDS151 >= EPS )
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           I
      DOUBLE PRECISION  SUM, ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      SUM = ZERO
      DO 10 I=1,N
         SUM = SUM + V(I) * V(I)
   10 CONTINUE
      FDS151 = MAX( EPS , SQRT(SUM) )
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS151----------------------------------------------------
      E    N    D
C:::74      ,,,,,FDS200.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS200 (IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,
     &           IWORK,MIW,DWORK,MDW,U1,U2,DFX,EPS,TOL,LRST,
     &           MAXIT,LOUT,IND,IERR,FDSN01,FDSN02,FDSN03,
     &           FDSN04,FDSN05,FDSN06,FDSU01,FDSU02,FDSU03,FDSU04)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 0 0   NEWTON-ITERATION.                            ***
C**      CENTRAL SUBROUTINE, WHICH IS CALLED BY ALL FIDISOL-        ***
C**      PROGRAMS FOR ELLIPTIC AND PARABOLIC PDES FOR ALL           ***
C**      DIMENSIONS.                                                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),ILIN(1),IFILE(1),UR(1),IWORK(1),
     &         MIW,MDW,MAXIT,LOUT,IND,IERR
      DOUBLE PRECISION  DINFO(1),DWORK(1),U1(1),U2(1),DFX(1),EPS,TOL
      LOGICAL  LINFO(1), LLIN(1), LRST
      EXTERNAL  FDSU01,FDSU02,FDSU03,FDSU04
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR ( USED : 1-10 , TRANSFER )
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR ( TRANSFER )
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR ( USED : 1-8 , TRANSFER )
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION-VECTOR ( TRANSFER )
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY OF LENGTH  2 * M - 1
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS   ( USED : 3 )
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES  ( USED : 3 )
C--------I------I-----I------------------------------------------------
C IWORK  I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I
C--------I------I-----I------------------------------------------------
C DWORK  I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR THE COMPLETE SOLUTION
C        I      I     I  OF LENGTH M
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I IN  I  ONLY FOR PARABOLIC PROBLEMS : MAXIMUM OF THE
C        I      I     I  DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  TOLERANCE
C--------I------I-----I------------------------------------------------
C LRST   I  L   I IN  I  IF LRST = TRUE  THE NEWTON-ITERATION RESTARTS.
C        I      I     I  THE INFORMATION ABOUT THE LAST NEWTON-STEP
C        I      I     I  IS STORED IN DINFO AND IINFO.
C--------I------I-----I------------------------------------------------
C MAXIT  I  I   I IN  I  MAXIMUM OF NEWTON-ITERATION-STEPS
C        I      I     I  MAXIT = 0 : NO MAXIMUM GIVEN
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF OUTPUTFILE
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE / ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSN01 I  E   I IN  I  NAMES OF THE FIDISOL-SUBROUTINES FOR DEFECT,
C FDSN02 I      I     I  JACOBI-MATRICES, STOPPING CRITERION,
C FDSN03 I      I     I  QD-MATRIX, LINSOL, SOLUTION-BOUNDS
C FDSN04 I      I     I
C FDSN05 I      I     I
C FDSN06 I      I     I
C--------I------I-----I------------------------------------------------
C FDSU01 I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE
C FDSU02 I      I     I  COMPUTATION OF THE DEFECT AND THE JACOBI-
C FDSU03 I      I     I  MATRICES.
C FDSU04 I      I     I
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,N,M,MV,RL,IN,IM,ITER,RNUNEW,RNUOLD,RNDU,RNDEF,RN,
     &         IMM,IMVM,IDOKU,IDUM,IK
      DOUBLE PRECISION  C01,C04,HALF,ONE,P4,RK1,RK2,RK3,RK4,RK5,ZERO,
     &                  EPSDEF,EPSDU,EPSLIN,DEFOLD,DEFMAX,DUMAX,REL,
     &                  TOLEQ,UMAX,FDS101,FDS131,TIME
      LOGICAL  MODNEW,LBEG,LMOD,LMVM,LREL
      EXTERNAL  FDS317,FDS318,second
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (C01=0.1, C04=0.0001, HALF=0.5, ONE=1.0, P4=10000.0,
     &    RK1=0.1, RK2=0.01, RK3=0.05, RK4=1.75, RK5=0.8, ZERO=0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  INFORMATION :
C
      NK    = IINFO(1)
      N     = IINFO(9)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      IDOKU = IINFO(25)
      IM    = M / MV
      IF(M - IM * MV.GT.0)  IM = IM + 1
      LBEG  = LINFO(6)
      LMOD  = LINFO(7)
      LMVM  = LINFO(8)
      LREL  = LINFO(10)

c	write(6,*)"here SOLVER",LREL
C
C***  INITIALIZATION :
C
      EPSDU  = MAX(C01 * TOL , P4 * EPS)
      MODNEW = .FALSE.
      ITER = 0
      IMVM = ILIN(10)
      IND  = 0
      REL  = ONE
      IERR = 0
      RNUNEW = 3 * IN * NK + 1
      RNUOLD = RNUNEW + IM
      RNDU   = RNUOLD + IM
      RNDEF  = RNDU   + IM
      DEFOLD = ZERO
      DUMAX  = ONE
      TOLEQ  = TOL
      IF(LRST) THEN
         IMM    = IINFO(16) + 2 * NK
         DUMAX  = DINFO(IMM+1)
         EPSDEF = DINFO(IMM+2)
         REL    = DINFO(IMM+3)
         ITER   = IINFO(30) - 1
      ENDIF
C
C***  READ INITIAL SOLUTION IN N-NK-SORTING, SORT AND WRITE
C     INITIAL SOLUTION IN NK-N-SORTING
C
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      IF(IERR.NE.0) GO TO 400
      CALL FDS411(N,NK,U1,U2)
C
C***  CHECK GIVEN BOUNDS FOR THE SOLUTION
C
      CALL FDSN06(DINFO,IINFO,LINFO,IFILE,UR,RNUNEW,U2,DWORK,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(IDOKU.GE.1) THEN
         IF(LRST) THEN
            WRITE(LOUT,1005) EPSDU
         ELSE
            WRITE(LOUT,1000) EPSDU
         ENDIF
         UMAX = FDS101(M,U2,ZERO)
         WRITE(LOUT,1010) UMAX
      ENDIF
C
C***  START OF THE NEWTON-ITERATIONLOOP
C
  100 ITER = ITER + 1
C
C***  COMPUTE DEFECT
C
  150 CALL FDSN01(DEFMAX,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,IWORK,
     &            MIW,DWORK,MDW,FDSU01,FDSU02,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(IDOKU.GE.1) WRITE(LOUT,1015) DEFMAX
      IF(ITER.EQ.1.OR.(ITER.EQ.2.AND.LBEG).OR.LRST) GO TO 250
      IF(DEFMAX.LT.DEFOLD.OR.DEFMAX.EQ.0.0) GO TO 200
C
C***  IF POSSIBLE REDUCE RELAXATION-FACTOR AND COMPUTE
C     LAST SOLUTION AGAIN, THEN GO TO DEFECT
C
      REL = HALF * REL
      IF(REL.LT.RK2) THEN
C
C***     NEWTON-ITERATION DIVERGES
C
         IND = 3
         WRITE(LOUT,1016)
         GO TO 400
      ENDIF
      RN = RNUOLD
      CALL FDS331(U1,M,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      IF(IERR.NE.0) GO TO 400
      RN = RNDU
      CALL FDS331(DWORK,M,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      IF(IERR.NE.0) GO TO 400
      CALL FDS221(M,U1,DWORK,U2,REL)
      CALL FDSN06(DINFO,IINFO,LINFO,IFILE,UR,RNUNEW,U2,DWORK,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(IDOKU.GE.1) WRITE(LOUT,1017) REL
      GO TO 150
C
  200 MODNEW = .FALSE.
      IF(DEFMAX.LT.DEFOLD*C01.AND.LMOD) MODNEW = .TRUE.
C
C***  COMPUTE JACOBI-MATRICES
C
  250 IF(.NOT.MODNEW)
     &   CALL FDSN02(IINFO,DINFO,LINFO,IFILE,UR,DWORK,MDW,
     &               FDSU03,FDSU04,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(ITER.EQ.1.OR.LRST) GO TO 300
C
C***  COMPUTE STOPPING CRITERION FOR NEWTON-ITERATION
C
      CALL FDSN03(EPSDEF,DFX,TOLEQ,IINFO,DINFO,LINFO,IFILE,UR,
     &            U1,U2,IWORK,MIW,DWORK,MDW,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(IDOKU.GE.1) WRITE(LOUT,1024) EPSDEF
      IF(DEFMAX.LT.EPSDEF.AND.DUMAX.LT.RK3 .OR. IND.EQ.1
     &   .OR. DEFMAX.LT.RK1*EPSDEF)  THEN
C
C***  NEWTON-ITERATION COMPLETE, SOLUTION GOOD ENOUGH
C
         IND = 1
         IF(IDOKU.GE.1) WRITE(LOUT,1025)
         GO TO 400
      ENDIF
      IF(ITER.GT.MAXIT.AND.MAXIT.NE.0) THEN
C
C***     NEWTON-ITERATION DID NOT CONVERGE WITHIN MAXIT
C        NEWTON-STEPS
C
         IND = 2
         IMM = IINFO(16) + 2*NK
         DINFO(IMM+1) = DUMAX
         DINFO(IMM+2) = EPSDEF
         DINFO(IMM+3) = REL
         IINFO(30) = ITER
         WRITE(LOUT,1026)
         GO TO 400
      ENDIF
C
C***  COMPUTE QD-MATRIX
C
  300 IF(.NOT.MODNEW)
     &   CALL FDSN04(EPS,IINFO,DINFO,LINFO,IFILE,UR,U1,IWORK,MIW,
     &               DWORK,MDW,ILIN,LLIN,IERR)
      IF(IERR.NE.0) GO TO 400
C
C***  COMPUTE STOPPING CRITERION FOR LINEAR EQUATION SOLVER
C
      IF(ITER.EQ.1) THEN
         EPSLIN = C01
      ELSE
         IF(DEFMAX.LT.EPS) DEFMAX = EPS
         EPSLIN = MAX(C04 , C01 * DUMAX * DUMAX , RK5*EPSDEF / DEFMAX)
         IF(EPSLIN.GT.C01) EPSLIN = C01
      ENDIF
C
C***  COMPUTE NEWTON-CORRECTIONS WITH LINSOL
C
C     REL = MIN(ONE , REL * RK4)
      REL = ONE
      RN = RNDEF
      IF(IDOKU.GE.1) THEN
      IF(MODNEW) THEN
         WRITE(LOUT,1029) ITER,EPSLIN, REL
      ELSE
         WRITE(LOUT,1030) ITER,EPSLIN, REL
      ENDIF
      ENDIF
      CALL FDS331(U1,M,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      IF(IERR.NE.0) GO TO 400
      IF(MODNEW) THEN
         ILIN(11) = 1
      ELSE
         ILIN(11) = 0
      ENDIF
      CALL SECOND(TIME)
      IF(IDOKU.GE.1) WRITE(LOUT,888) TIME
 888  FORMAT(' TIME:',G15.6)
      CALL FDSN05(ILIN,LLIN,IWORK,MIW,DWORK,MDW,U1,U2,IFILE,UR,
     &            EPS,EPSLIN,IND,IERR)
      CALL SECOND(TIME)
      IF(IDOKU.GE.1) WRITE(LOUT,888) TIME
      IMVM = IMVM+ILIN(10)
C
C***  CHECK THE CONVERGENCE AND ERROR-INDICATORS OF LINSOL
C
      GO TO (310,320,330,340) , IND
  310 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
C***  LINSOL HAS COMPUTED THE CORRECTIONS
      IND = 0
      GO TO 350
C
  320 IF(LMVM) THEN
C***     LINSOL DID NOT CONVERGE WITH MVM MATRIX-VECTOR-
C        MULTIPLICATIONS
C***     TERMINATE NEWTON-ITERATION
         IND = 4
         WRITE(LOUT,1032)
         GO TO 400
      ELSE
C***     GO ON WITH NEWTON-ITERATION
         IF(IDOKU.GE.1) WRITE(LOUT,1032)
         IF(IDOKU.GE.1) WRITE(LOUT,1033)
         IND = 0
         GO TO 350
      ENDIF
C
  330 WRITE(LOUT,1034) ILIN(10)
C***  LINSOL DIVERGES
      IND = 4
      GO TO 400
C
  340 WRITE(LOUT,1035) IERR
C***  ERROR IN LINSOL
      IND = 5
      GO TO 400
C
C***  COMPUTE NEW SOLUTION : UNEW = UOLD + REL * DU
C
  350 RN = RNUNEW
      RNUNEW = RNUOLD
      RNUOLD = RN
      CALL FDS331(DWORK,M,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      IF(IERR.NE.0) GO TO 400
      CALL FDS221(M,DWORK,U2,U1,REL)
C
C***  CHECK GIVEN BOUNDS FOR THE SOLUTION AND COMPUTE
C     THE RELATIVE MAXIMUM OF THE CORRECTIONS
C
      CALL FDSN06(DINFO,IINFO,LINFO,IFILE,UR,RNUNEW,U1,DWORK,IERR)
      IF(IERR.NE.0) GO TO 400
      IF (LREL) THEN
          DUMAX=FDS101(M,U2,ZERO) / FDS101(M,U1,P4*EPS)
      ELSE
          DUMAX=FDS131(NK,N,U2,U1,P4*EPS)
      ENDIF
      IF(IDOKU.GE.1) WRITE(LOUT,1036) DUMAX
      RN = RNDU
      CALL FDS331(U2,M,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      IF(IERR.NE.0) GO TO 400
C
C***  CHECK, WHETHER THE CORRECTIONS ARE LESS ENOUGH
C
      IF(DUMAX.LT.EPSDU) THEN
         IND = 1
         IF(IDOKU.GE.1) WRITE(LOUT,1037)
      ENDIF
      IF(IDOKU.GE.1) THEN
         UMAX = FDS101(M,U1,ZERO)
         WRITE(LOUT,1010) UMAX
      ENDIF
      DEFOLD = DEFMAX
      TOLEQ = HALF * TOL * DEFMAX / DUMAX
      LRST  = .FALSE.
      GO TO 100
C
C***  END OF NEWTON-ITERATION
C
  400 IF(IDOKU.GE.1) THEN
         WRITE(LOUT,1040)
         RN = 1
         CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         CALL FDS111(N,NK,N,NK,U1,DWORK,ZERO)
         WRITE(LOUT,1045) (IK,DWORK(IK),IK=1,NK)
      ENDIF
      ILIN(10) = IMVM
      IF(LINFO(1)) THEN
         IMM = IINFO(16) + 2*NK
         DINFO(IMM+8) = TOLEQ
      ENDIF
      IF(IND.GT.1.AND.IND.LT.5) IERR=200
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' '/' START OF NEWTON ITERATION :',10X,'(EPSDU =',
     &           G10.2,')'/)
 1005 FORMAT(' '/' RESTART OF NEWTON ITERATION :',10X,'(EPSDU =',
     &           G10.2,')'/)
 1010 FORMAT(' NORM OF THE SOLUTION :',G16.4)
 1015 FORMAT(' MAXIMUM OF THE DEFECT :',G15.4)
 1016 FORMAT(' NEWTON ITERATION DIVERGES.')
 1017 FORMAT(' REDUCE RELAXATION FACTOR :',G20.2)
 1024 FORMAT(' EPSDEF =',G30.4)
 1025 FORMAT(' NEWTON ITERATION COMPLETE - STOPPING',
     &       ' CRITERION FULFILLED.')
 1026 FORMAT(' NEWTON ITERATION DID NOT CONVERGE',
     &       ' WITHIN MAXIT NEWTON STEPS.')
 1029 FORMAT(' ITERATION STEP :',I4,'  ( MODIFIED )'/
     &       ' EPSLIN =',G10.2,'  REL =',G10.2)
 1030 FORMAT(' ITERATION STEP :',I4,'  ( COMPLETE )'/
     &       ' EPSLIN =',G10.2,'  REL =',G10.2)
 1031 FORMAT(' CORRECTIONS COMPUTED WITH',I6,
     &       ' MATRIX-VECTOR MULTIPLICATIONS.')
 1032 FORMAT(' LINSOL DID NOT CONVERGE WITH MVM MATRIX-',
     &       'VECTOR MULTIPLICATIONS.')
 1033 FORMAT(' NEWTON ITERATION WILL CONTINUE.')
 1034 FORMAT(' DIVERGENCE OF LINSOL AFTER',I6,
     &       ' MATRIX-VECTOR MULTIPLICATIONS.')
 1035 FORMAT(' ERROR IN LINSOL, IERR =',I5)
 1036 FORMAT(' RELATIVE NORM OF CORRECTIONS :',G15.2)
 1037 FORMAT(' SOLUTION GOOD ENOUGH.')
 1040 FORMAT(' '/' END OF NEWTON ITERATION.'/)
 1045 FORMAT(' MAXIMA OF THE SOLUTION COMPONENTS :'/
     &       (' COMPONENT :',I4,G15.4))
C
      R E T U R N
C-----END OF FDS200----------------------------------------------------
      E    N    D
C:::75      ,,,,,FDS221.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS221(M,U1,U2,U3,REL)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 2 1   COMPUTES THE VECTOR-OPERATION                ***
C**                    U3 = U1 + REL*U2 .                           ***
C**      THE VECTORS U1, U2, U3 NEED NOT BE DIFFERENT.              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  M
      DOUBLE PRECISION  U1(M),U2(M),U3(M),REL
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  LENGTH OF THE VECTORS
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I IN  I  INPUT-VECTORS OF LENGTH M
C--------I------I-----I------------------------------------------------
C U3     I  DP  I OUT I  RESULT-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C REL    I  DP  I IN  I  SCALAR-FACTOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IA,K,MVL,NV
      PARAMETER (MVL=65535)
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      K=0
    5 IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 10 I = 1,NV
         U3(I+IA) = U1(I+IA) + REL * U2(I+IA)
   10 CONTINUE
      IF(K.LT.M) GO TO 5
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS221----------------------------------------------------
      E    N    D
C:::76      ,,,,,FDS222.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      DOUBLE PRECISION FUNCTION FDS222 ( U1,U2,M )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 2 2   COMPUTES THE SCALAR-PRODUCT (U1,U2).         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            M
      DOUBLE PRECISION   U1(M), U2(M)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  NUMBER OF COMPONENTS IN U1 AND U2
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I IN  I  PROFILES FOR WHICH THE SCALAR-PRODUCT HAS TO
C        I      I     I  BE COMPUTED            ARRAYS: U1(M), U2(M)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           I
      DOUBLE PRECISION  SUM, ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      SUM = ZERO
      DO 10 I=1,M
         SUM = SUM + U1(I) * U2(I)
   10 CONTINUE
      FDS222 = SUM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS222----------------------------------------------------
      E    N    D
C:::77      ,,,,,FDS230.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS230(LLIN,M,MN,IAB,IAX,ILD)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 3 0   COMPUTES THE START-ADDRESSES AND THE LENGTH  ***
C**      FOR EACH DIAGONAL OF A MATRIX A, WHICH IS STORED BY        ***
C**      DIAGONALS ON FILE. THE INFORMATION IS NEEDED FOR           ***
C**      MATRIX-VECTOR-MULTIPLICATION.                              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  M, MN, IAB(1), IAX(1), ILD(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  LLIN(I) = TRUE INDICATES A NONZERO DIAGONAL
C        I      I     I  ARRAY : LLIN(MN)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE M X M - MATRIX
C--------I------I-----I------------------------------------------------
C MN     I  I   I IN  I  = 2 * M - 1 (MAXIMUM NUMBER OF DIAGONALS)
C--------I------I-----I------------------------------------------------
C IAB    I  I   I OUT I  START-ADDRESS - 1 FOR VECTOR B FOR THE
C        I      I     I  MULTIPLICATION WITH MATRIX A.
C        I      I     I  GIVEN FOR EACH OF THE ND DIAGONALS
C        I      I     I  ARRAY : IAB(ND)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I OUT I  START-ADDRESS - 1 FOR RESULTVECTOR X FOR THE
C        I      I     I  MULTIPLICATION OF A * B.
C        I      I     I  GIVEN FOR EACH OF THE ND DIAGONALS
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I OUT I  LENGTH OF EACH NONZERO DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, ID
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      ID = 0
      DO 100 I=1,MN
         IF(LLIN(I)) THEN
            ID = ID + 1
            IAB(ID) = MAX(0,M-I)
            IAX(ID) = MAX(0,I-M)
            ILD(ID) = M - ABS(M-I)
         ENDIF
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS230----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::78      ,,,,,FDS231.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS231(B,DIAG,X,IAB,IAX,ILD,ILIN,M,ND,IFILE,UR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 3 1   COMPUTES ONE MATRIX-VECTOR-MULTIPLICATION :  ***
C**      X = A * B .                                                ***
C**      THE MATRIX IS STORED BY DIAGONALS                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
C**     COPYRIGHT UNIVERSITAET KARLSRUHE, 1991                      ***
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IAB(1),IAX(1),ILD(1),ILIN(1),M,ND,IFILE,UR
      DOUBLE PRECISION  B(1), DIAG(1), X(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C B      I  DP  I IN  I  VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I  -  I  WORKARRAY FOR ONE DIAGONAL OF MATRIX A WITH
C        I      I     I  MAXIMUM LENGTH M
C--------I------I-----I------------------------------------------------
C X      I  DP  I OUT I  RESULT-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C IAB    I  I   I IN  I  COLUMN-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAB(ND)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  LINE-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I  -  I  INFORMATION VECTOR
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF MATRIX A
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION BIG
      DOUBLE PRECISION      DQP
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2
      INTEGER   NPACK,IDQP,NIND
      COMMON /FDSIO / BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      COMMON /FDSDQP/  DQP(1)
      COMMON /FDSLEN/ NPACK(1)
      COMMON /FDSIND/ NIND,IDQP(1)
C
      INTEGER  I,IA1,IA2,ID,IOS,L,PFE1,PFE2,RN,PFE,SPACE,NP
      DOUBLE PRECISION     ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 10 I=1,M
         X(I) = ZERO
   10 CONTINUE
      PFE2 = 1
      PFE1 = IOINF2(IFILE)
      PFE = 0
      RN = -1
      L=1
      CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
      ND = ABS(ND)
C
      IF (IOINF1(IFILE).EQ.0) THEN
C
C***     OUT OF CORE
C
         DO 101 ID=1,ND
            L = ILD(ID)
            IF(ILIN(14).GE.1) THEN
C
C***           PACKED
C
               CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
C
            ELSE
C
C***           UNPACKED
C
               CALL FDS309(IFILE,IOS,RN,PFE2,DIAG,L,UR)
C
            ENDIF
            IA1 = IAX(ID)
            IA2 = IAB(ID)
            DO 51 I=1,L
               X(I+IA1) = X(I+IA1) + DIAG(I) * B(I+IA2)
   51       CONTINUE
  101    CONTINUE
      ELSE
C
C***     INCORE
C
         IF (ILIN(14).GE.1) THEN
C
C***        PACKED
C
            DO 100 ID=1,ND
               L = ILD(ID)
               NP=NPACK(RN)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               IF (NP.NE.0) THEN
                  L=NP
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
                  DO 20 I=1,L
                     X(IDQP(I+PFE)+IA1) = X(IDQP(I+PFE)+IA1)
     &                                +BIG(I+PFE1) * B(IDQP(I+PFE)+IA2)
   20             CONTINUE
               ELSE
                  DO 30 I=1,L
                     X(I+IA1) = X(I+IA1) + BIG(I+PFE1) * B(I+IA2)
   30             CONTINUE
               ENDIF
               PFE1=PFE1+L
               PFE =PFE +NP
               RN  =RN+1
  100       CONTINUE
C
         ELSE
C
C***        UNPACKED
C
            DO 200 ID=1,ND
               L = ILD(ID)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               DO 50 I=1,L
                  X(I+IA1) = X(I+IA1) + BIG(I+PFE1) * B(I+IA2)
   50          CONTINUE
               PFE1=PFE1+L
  200       CONTINUE
         ENDIF
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS231----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::79      ,,,,,FDS232.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS232(B1,B2,DIAG,X1,X2,IAB,IAX,ILD,
     &                  ILIN,M,ND,IFILE,UR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 3 2   COMPUTES TWO MATRIX-VECTOR-MULTIPLICATIONS:  ***
C**      X1 = A * B1, X2 = A(T) * B2.                               ***
C**      THE MATRIX IS STORED BY DIAGONALS.                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
C**     COPYRIGHT UNIVERSITAET KARLSRUHE, 1991                      ***
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IAB(1),IAX(1),ILD(1),ILIN(1),M,ND,IFILE,UR
      DOUBLE PRECISION     B1(1), B2(1), DIAG(1), X1(1), X2(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C B1,B2  I  DP  I IN  I  RIGHT-HAND-SIDE-VECTORS OF LENGTH M
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I  -  I  WORKARRAY FOR ONE DIAGONAL OF MATRIX A WITH
C        I      I     I  MAXIMUM LENGTH M
C--------I------I-----I------------------------------------------------
C X1,X2  I  DP  I OUT I  RESULT-VECTORS OF LENGTH M
C--------I------I-----I------------------------------------------------
C IAB    I  I   I IN  I  COLUMN-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAB(ND)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  LINE-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I  -  I  INFORMATION VECTOR
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF MATRIX A
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION BIG
      DOUBLE PRECISION      DQP
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2
      INTEGER   NPACK,IDQP,NIND
      COMMON /FDSIO / BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      COMMON /FDSDQP/  DQP(1)
      COMMON /FDSLEN/ NPACK(1)
      COMMON /FDSIND/ NIND,IDQP(1)
C
      INTEGER  I,IA1,IA2,ID,IOS,L,PFE1,PFE2,RN,PFE,SPACE,NP
      DOUBLE PRECISION     ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 10 I=1,M
         X1(I) = ZERO
         X2(I) = ZERO
   10 CONTINUE
      PFE2 = 1
      PFE1 = IOINF2(IFILE)
      PFE = 0
      RN = -1
      L=1
      CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
      ND = ABS(ND)
C
C
      IF (IOINF1(IFILE).EQ.0) THEN
C
C***     OUT OF CORE
C
         DO 101 ID=1,ND
            L = ILD(ID)
            IF(ILIN(14).GE.1) THEN
C
C***           PACKED
C
               CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
C
            ELSE
C
C***           UNPACKED
C
               CALL FDS309(IFILE,IOS,RN,PFE2,DIAG,L,UR)
C
            ENDIF
            IA1 = IAX(ID)
            IA2 = IAB(ID)
            DO 51 I=1,L
               X1(I+IA1) = X1(I+IA1) + DIAG(I) * B1(I+IA2)
               X2(I+IA2) = X2(I+IA2) + DIAG(I) * B2(I+IA1)
   51       CONTINUE
  101    CONTINUE
      ELSE
C
C***     INCORE
C
         IF (ILIN(14).GE.1) THEN
C
C***        PACKED
C
            DO 100 ID=1,ND
               L = ILD(ID)
               NP=NPACK(RN)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               IF (NP.NE.0) THEN
                  L=NP
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
                  DO 20 I=1,L
                     X1(IDQP(I+PFE)+IA1) = X1(IDQP(I+PFE)+IA1)
     &                                +BIG(I+PFE1) * B1(IDQP(I+PFE)+IA2)
                     X2(IDQP(I+PFE)+IA2) = X2(IDQP(I+PFE)+IA2)
     &                                +BIG(I+PFE1) * B2(IDQP(I+PFE)+IA1)
   20             CONTINUE
               ELSE
                  DO 30 I=1,L
                     X1(I+IA1) = X1(I+IA1) + BIG(I+PFE1) * B1(I+IA2)
                     X2(I+IA2) = X2(I+IA2) + BIG(I+PFE1) * B2(I+IA1)
   30             CONTINUE
               ENDIF
               PFE1=PFE1+L
               PFE =PFE +NP
               RN  =RN+1
  100       CONTINUE
C
         ELSE
C
C***        UNPACKED
C
            DO 200 ID=1,ND
               L = ILD(ID)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               DO 50 I=1,L
                  X1(I+IA1) = X1(I+IA1) + BIG(I+PFE1) * B1(I+IA2)
                  X2(I+IA2) = X2(I+IA2) + BIG(I+PFE1) * B2(I+IA1)
   50          CONTINUE
               PFE1=PFE1+L
  200       CONTINUE
         ENDIF
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS232----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::80      ,,,,,FDS234.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS234(B,DIAG,X,IAB,IAX,ILD,ILIN,M,ND,IFILE,UR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 2 3 4   COMPUTES ONE MATRIX-VECTOR-MULTIPLICATION :  ***
C**      X = A(TRANSPOSED) * B .                                    ***
C**      THE MATRIX IS STORED BY DIAGONALS                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
C**     COPYRIGHT UNIVERSITAET KARLSRUHE, 1991                      ***
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IAB(1),IAX(1),ILD(1),ILIN(1),M,ND,IFILE,UR
      DOUBLE PRECISION  B(1), DIAG(1), X(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C B      I  DP  I IN  I  VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I  -  I  WORKARRAY FOR ONE DIAGONAL OF MATRIX A WITH
C        I      I     I  MAXIMUM LENGTH M
C--------I------I-----I------------------------------------------------
C X      I  DP  I OUT I  RESULT-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C IAB    I  I   I IN  I  COLUMN-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAB(ND)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  LINE-NUMBER - 1 OF THE FIRST ELEMENT OF
C        I      I     I  EACH DIAGONAL
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I  -  I  INFORMATION VECTOR
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF MATRIX A
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION BIG
      DOUBLE PRECISION      DQP
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2
      INTEGER   NPACK,IDQP,NIND
      COMMON /FDSIO / BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      COMMON /FDSDQP/  DQP(1)
      COMMON /FDSLEN/ NPACK(1)
      COMMON /FDSIND/ NIND,IDQP(1)
C
      INTEGER  I,IA1,IA2,ID,IOS,L,PFE1,PFE2,RN,PFE,SPACE,NP
      DOUBLE PRECISION     ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 10 I=1,M
         X(I) = ZERO
   10 CONTINUE
      PFE2 = 1
      PFE1 = IOINF2(IFILE)
      PFE = 0
      RN = -1
      L=1
      CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
      ND = ABS(ND)
C
      IF (IOINF1(IFILE).EQ.0) THEN
C
C***     OUT OF CORE
C
         DO 101 ID=1,ND
            L = ILD(ID)
            IF(ILIN(14).GE.1) THEN
C
C***           PACKED
C
               CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
C
            ELSE
C
C***           UNPACKED
C
               CALL FDS309(IFILE,IOS,RN,PFE2,DIAG,L,UR)
C
            ENDIF
            IA1 = IAX(ID)
            IA2 = IAB(ID)
            DO 51 I=1,L
               X(I+IA2) = X(I+IA2) + DIAG(I) * B(I+IA1)
   51       CONTINUE
  101    CONTINUE
      ELSE
C
C***     INCORE
C
         IF (ILIN(14).GE.1) THEN
C
C***        PACKED
C
            DO 100 ID=1,ND
               L = ILD(ID)
               NP=NPACK(RN)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               IF (NP.NE.0) THEN
                  L=NP
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
                  DO 20 I=1,L
                     X(IDQP(I+PFE)+IA2) = X(IDQP(I+PFE)+IA2)
     &                                +BIG(I+PFE1) * B(IDQP(I+PFE)+IA1)
   20             CONTINUE
               ELSE
                  DO 30 I=1,L
                     X(I+IA2) = X(I+IA2) + BIG(I+PFE1) * B(I+IA1)
   30             CONTINUE
               ENDIF
               PFE1=PFE1+L
               PFE =PFE +NP
               RN  =RN+1
  100       CONTINUE
C
         ELSE
C
C***        UNPACKED
C
            DO 200 ID=1,ND
               L = ILD(ID)
               IA1 = IAX(ID)
               IA2 = IAB(ID)
               DO 50 I=1,L
                  X(I+IA2) = X(I+IA2) + BIG(I+PFE1) * B(I+IA1)
   50          CONTINUE
               PFE1=PFE1+L
  200       CONTINUE
         ENDIF
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS234----------------------------------------------------
      E    N    D
C:::81      ,,,,,FDS300.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS300 ( U, FIN, STA, ACC, RL, IOS, RN, UREADY )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 0    (FDS-OPEN) OPENS A FILE WITH UNIT-NUMBER    ***
C**                     U AND FILENAME FIN FOR SEQUENTIAL OR        ***
C**                     DIRECT ACCESS (ACC) FOR A FILE WITH         ***
C**                     STATUS STA. AFTER CORRECT OPENING IOS       ***
C**                     HAS THE VALUE ZERO.                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   U, RL, IOS, RN, UREADY
C**                                                                 ***
      CHARACTER*(*)    FIN, STA, ACC
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER OF THE FILE
C--------I------I-----I------------------------------------------------
C FIN    I CH   I IN  I  FILENAME
C--------I------I-----I------------------------------------------------
C STA    I CH   I IN  I  STATUS OF THE FILE
C--------I------I-----I------------------------------------------------
C ACC    I CH   I IN  I  ACCESS OF THE FILE (SEQUENTIAL/DIRECT)
C--------I------I-----I------------------------------------------------
C RL     I  I   I I/O I  RECORD LENGTH OF THE FILE
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS, RETURNS ZERO IF OPENING CORRECT
C--------I------I-----I------------------------------------------------
C RN     I  I   I OUT I  INITIAL RECORD NUMBER RN=1
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3,WRDLEN
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      UREADY=0
      RN=1
C
      IF(IOINF1(U).EQ.0) THEN
C
C***  FILE U STORED OUT-OF-CORE
C
      IF(ACC.EQ.'SEQUENTIAL') THEN
         OPEN( UNIT=U, IOSTAT=IOS, STATUS=STA,
     &         FORM='UNFORMATTED',
     &         ACCESS=ACC )
      ELSE
C***
         WRDLEN = 16
C***
         RL = WRDLEN * RL
         OPEN( UNIT=U, IOSTAT=IOS, STATUS=STA,
     &         FORM='UNFORMATTED',
     &         ACCESS=ACC, RECL=RL )
      ENDIF
      ELSE
C
C***  FILE U STORED IN-CORE
C
         WRDLEN = 8
C***
         IOINF2(U) = NTOTAL
         IOINF3(U) = RL
         RL = WRDLEN * RL
         NTOTAL = NTOTAL + IOINF1(U)
         IF(NTOTAL.GT.NBIG) THEN
            IOS = NTOTAL
            RETURN
         ENDIF
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS300----------------------------------------------------
      E    N    D
C:::82      ,,,,,FDS301.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS301 ( U, FIN, STA, IOS, UREADY )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 1    (FDS-CLOSE) CLOSES A FILE WITH UNIT-NUMBER  ***
C**                     U. IF IT IS A SCRATCH-FILE, STA MUST HAVE   ***
C**                     THE VALUE DELETE, OTHERWISE STA CAN HAVE    ***
C**                     THE VALUE KEEP.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   U, IOS, UREADY
C**                                                                 ***
      CHARACTER*(*)   FIN, STA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER OF THE FILE
C--------I------I-----I------------------------------------------------
C FIN    I  CH  I IN  I  FILENAME
C--------I------I-----I------------------------------------------------
C STA    I  CH  I IN  I  STATUS OF THE FILE
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS, RETURNS ZERO IF CLOSING CORRECT
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99)
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0)
     &   CLOSE( UNIT=U, STATUS=STA, IOSTAT=IOS )
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS301----------------------------------------------------
      E    N    D
C:::83      ,,,,,FDS303.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS303 ( U,IOS,NRC,IL,PFE,RN,IERR,UREADY )
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 3    (FDS-MOVE) CAUSES THE FILE CONNECTED WITH   ***
C**                     THE UNIT-NUMBER U TO BE POSITIONED NRC      ***
C**                     RECORDS AFTER THE ACTUAL RECORD, IF NRC>0.  ***
C**                     IF NRC<0, THE FILE WILL BE POSITIONED -NRC  ***
C**                     RECORDS BEFORE THE ACTUAL RECORD. FOR NRC=0 ***
C**                     NOTHING WILL BE DONE. IF NRC<0 AND THE      ***
C**                     RECORD NUMBER OF THE ACTUAL POSITION IS     ***
C**                     LESS OR EQUAL TO -NRC, THE FINAL POSITION   ***
C**                     IS THE INITIAL POINT. IF NRC>0 AND THE      ***
C**                     NUMBER OF RECORD FROM THE ACTUAL POSITION   ***
C**                     UNTIL THE LAST RECORD OF THE FILE IS LESS   ***
C**                     THAN NRC, THE FINAL POSITION IS BEHIND THE  ***
C**                     LAST RECORD, AND IERR IS SET TO +1, ELSE    ***
C**                     IERR IS ZERO.                               ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   U, IOS, NRC, IL(1), PFE, RN, IERR, UREADY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER OF THE FILE
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C NRC    I  I   I IN  I  NUMBER OF RECORDS
C--------I------I-----I------------------------------------------------
C IL     I  I   I IN  I  LENGTH OF THE RECORDS TO BE MOVED      IL(NRC)
C--------I------I-----I------------------------------------------------
C PFE    I  I   I I/O I  POSITION OF FIRST ELEMENT FOR NEXT I/O-CALL
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  SEE DESCRIPTION
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IREC
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99)
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IERR=0
      IF( NRC.GT.0 ) THEN
         DO 10 IREC=1,NRC
         IF(IOINF1(U).EQ.0) READ(U,ERR=30,END=40,IOSTAT=IOS)
         PFE=PFE+IL(IREC)
   10    CONTINUE
         RN=RN+NRC
      ELSE IF( NRC.LT.0 ) THEN
         DO 20 IREC=1,-NRC
         IF(IOINF1(U).EQ.0) BACKSPACE(U,IOSTAT=IOS,ERR=30)
         PFE=PFE-IL(IREC)
   20    CONTINUE
         RN=RN+NRC
      ENDIF
      RETURN
C
   30 IERR=2
      RETURN
C
   40 IERR=1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS303----------------------------------------------------
      E    N    D
C:::84      ,,,,,FDS305.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS305 (U, IOS, RN, UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 5    (FDS-REWIND) CAUSES THE FILE WITH           ***
C**                     UNIT-NUMBER U TO BE POSITIONED AT           ***
C**                     THE INITIAL POINT                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, UREADY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99)
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      RN=1
      IF(IOINF1(U).EQ.0) REWIND (U,IOSTAT=IOS)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS305----------------------------------------------------
      E    N    D
C:::85      ,,,,,FDS307.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS307 (U,IOS,RN,PFE,INTV,INTLEN,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 7    (FDS-READ-SEQ-INT) READS FROM THE ACTUAL    ***
C**                     POSITION (RECORD RN, ABSOLUTE ADDRESS ON    ***
C**                     FILE IN NUMBERS OF INTEGER-                 ***
C**                     VARIABLES IS PFE = POSITION                 ***
C**                     OF THE FIRST ELEMENT OF INTV ON U )         ***
C**                     INTLEN INTEGER-VARIABLES AND WRITES         ***
C**                     THEM INTO THE ARRAY INTV.                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, PFE, INTLEN, UREADY
      INTEGER  INTV(1:INTLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTV ON U
C--------I------I-----I------------------------------------------------
C INTV   I  I   I OUT I  INTEGER-VECTOR OF LENGTH INTLEN
C--------I------I-----I------------------------------------------------
C INTLEN I  I   I IN  I  LENGTH OF ARRAY INTV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IA,I
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
         READ(U,IOSTAT=IOS) INTV
         RN=RN+1
      ELSE
      IA=PFE-1
      IF(IA+INTLEN.GT.IOINF1(U)) THEN
         IOS=IA+INTLEN
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,INTLEN
         INTV(I)=BIG(IA+I)
  10  CONTINUE
      RN=RN+1
      PFE=PFE+INTLEN
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS307----------------------------------------------------
      E    N    D
C:::86      ,,,,,FDS308.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS308 (U,IOS,RN,PFE,INTV,INTLEN,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 8    (FDS-WRITE-SEQ-INT) READS FROM THE ARRAY    ***
C**                     INTV AND WRITES THEN TO THE ACTUAL          ***
C**                     POSITION (RECORD RN, ABSOLUTE ADDRESS ON    ***
C**                     FILE IN NUMBERS OF INTEGER-                 ***
C**                     VARIABLES IS PFE = POSITION                 ***
C**                     OF THE FIRST ELEMENT OF INTV ON U )         ***
C**                     INTLEN INTEGER-VARIABLES.                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, PFE, INTLEN, UREADY
      INTEGER  INTV(1:INTLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTV ON U
C--------I------I-----I------------------------------------------------
C INTV   I  I   I OUT I  INTEGER-VECTOR OF LENGTH INTLEN
C--------I------I-----I------------------------------------------------
C INTLEN I  I   I IN  I  LENGTH OF ARRAY INTV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IA,I,LOUT
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      COMMON /FDSOUT/ LOUT
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
         WRITE(U,IOSTAT=IOS) INTV
         IF (IOS.NE.0) CALL FDS398(U,LOUT,IOS)
         RN=RN+1
      ELSE
      IA=PFE-1
      IF(IA+INTLEN.GT.IOINF1(U)) THEN
         IOS=IA+INTLEN
         CALL FDS398(U,LOUT,IOS)
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,INTLEN
         BIG(IA+I)=INTV(I)
  10  CONTINUE
      RN=RN+1
      PFE=PFE+INTLEN
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS308----------------------------------------------------
      E    N    D
C:::87      ,,,,,FDS309.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS309 (U,IOS,RN,PFE,FLPV,FLPLEN,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 0 9    (FDS-READ-SEQ-FLP) READS FROM THE ACTUAL    ***
C**                     POSITION (RECORD RN, ABSOLUTE ADDRESS ON    ***
C**                     FILE IN NUMBERS OF FLOATING-POINT-          ***
C**                     VARIABLES IS PFE = POSITION                 ***
C**                     OF THE FIRST ELEMENT OF FLPV ON U )         ***
C**                     FLPLEN FLOATING-POINT-VARIABLES AND WRITES  ***
C**                     THEM INTO THE ARRAY FLPV.                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, PFE, FLPLEN, UREADY
      DOUBLE PRECISION     FLPV(1:FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF FLPV ON U
C--------I------I-----I------------------------------------------------
C FLPV   I  FP  I OUT I  FLOATING-POINT-VECTOR OF LENGTH FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IA,I
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
         READ(U,IOSTAT=IOS) FLPV
         RN=RN+1
      ELSE
      IA=PFE-1
      IF(IA+FLPLEN.GT.IOINF1(U)) THEN
         IOS=IA+FLPLEN
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,FLPLEN
         FLPV(I)=BIG(IA+I)
  10  CONTINUE
      RN=RN+1
      PFE=PFE+FLPLEN
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS309----------------------------------------------------
      E    N    D
C:::88      ,,,,,FDS310.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS310 (U,IOS,RN,PFE,FLPV,FLPLEN,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 0    (FDS-WRITE-SEQ-FLP) READS FROM THE ARRAY    ***
C**                     FLPV AND WRITES THEN TO THE ACTUAL          ***
C**                     POSITION (RECORD RN, ABSOLUTE ADDRESS ON    ***
C**                     FILE IN NUMBERS OF FLOATING-POINT-          ***
C**                     VARIABLES IS PFE = POSITION                 ***
C**                     OF THE FIRST ELEMENT OF FLPV ON U )         ***
C**                     FLPLEN FLOATING-POINT-VARIABLES.            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, PFE, FLPLEN, UREADY
      DOUBLE PRECISION     FLPV(1:FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF FLPV ON U
C--------I------I-----I------------------------------------------------
C FLPV   I  FP  I OUT I  FLOATING-POINT-VECTOR OF LENGTH FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IA,I,LOUT
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      COMMON /FDSOUT/ LOUT
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
         WRITE(U,IOSTAT=IOS) FLPV
         IF (IOS.NE.0) CALL FDS398(U,LOUT,IOS)
         RN=RN+1
      ELSE
      IA=PFE-1
      IF(IA+FLPLEN.GT.IOINF1(U)) THEN
         IOS=IA+FLPLEN
         CALL FDS398(U,LOUT,IOS)
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,FLPLEN
         BIG(IA+I)=FLPV(I)
  10  CONTINUE
      RN=RN+1
      PFE=PFE+FLPLEN
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS310----------------------------------------------------
      E    N    D
C:::89      ,,,,,FDS311.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS311(U,IOS,RN,PFE,PFE2,
     &                  FLPV,FLPLEN,UREADY,INDMAX,JJ2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 1    (FDS-WRITE-SEQ-FLP) PACKS THE ARRAY FLPV    ***
C**                     OF LENGTH FLPLEN                            ***
C**                     AND WRITES THEN TO THE ACTUAL               ***
C**                     POSITION (RECORD RN, ABSOLUTE ADDRESS ON    ***
C**                     FILE IN NUMBERS OF FLOATING-POINT-          ***
C**                     VARIABLES IS PFE = POSITION                 ***
C**                     OF THE FIRST ELEMENT OF FLPV ON U )         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   COPYRIGHT UNIVERSITAET KARLSRUHE 1988                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER U,IOS,RN,PFE,PFE2,FLPLEN,UREADY,JJ1,JJ2
      DOUBLE PRECISION FLPV(FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER (= DIAGONAL NUMBER)
C--------I------I-----I------------------------------------------------
C PFE2   I  I   I I/O I  POSITION OF FIRST ELEMENT OF FLPV ON U
C--------I------I-----I------------------------------------------------
C PFE    I  I   I I/O I  POSITION OF ACTUAL ELEMENT OF THE INDEXVECTOR
C        I      I     I  IDQP
C--------I------I-----I------------------------------------------------
C FLPV   I  FP  I OUT I  FLOATING-POINT-VECTOR OF LENGTH FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C INDMAX I  I   I I/O I  MAXIMUM SIZE OF INDEXVECTOR
C--------I------I-----I------------------------------------------------
C JJ2    I  I   I I/O I  SIZE OF PACKED ARRAY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   NPACK,NIND,IDQP,NDQP,INDMAX,IERR,I
      DOUBLE PRECISION      DQP
      COMMON/FDSDQP/DQP(1)
      COMMON/FDSLEN/NPACK(1)
      COMMON/FDSIND/NIND,IDQP(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IF (RN.LT.0) THEN
         PFE    = 0
         PFE2   = 1
         JJ2    = 0
         INDMAX = 0
         RN=1
         CALL FDS305(U,IOS,RN,UREADY)
      ELSE
C
C***     COMPRESS THE NORMALIZED DIAGONAL
C
         NDQP=0
         INDMAX=MAX(INDMAX,PFE+FLPLEN)
         IF(NIND.LT.INDMAX) THEN
            WRITE(6,1100) NIND
            IERR = 311
            IOS  = 311
            RETURN
         ENDIF
         DO 60 I=1,FLPLEN
            IF(ABS(FLPV(I)).GT.0.0) THEN
               NDQP = NDQP+1
               DQP(NDQP) = FLPV(I)
               IDQP(PFE+NDQP) = I
            ENDIF
   60    CONTINUE
         IF(1.5*NDQP.GT.FLPLEN) THEN
C
C***     STORE COMPLETE DIAGONAL
         NPACK(RN) = 0
         JJ2 = JJ2+FLPLEN
         CALL FDS310(U,IOS,RN,PFE2,FLPV,FLPLEN,UREADY)
         ELSE
C
C***     STORE PACKED DIAGONAL
         NPACK(RN) = NDQP
         PFE = PFE+NDQP
         JJ2 = JJ2+NDQP
         CALL FDS310(U,IOS,RN,PFE2,DQP,NDQP,UREADY)
         ENDIF
C
       ENDIF
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1010 FORMAT(4X,'STORAGE USED BY IDQP IN /FDSIND/:',I10)
 1100 FORMAT(' *** ERROR IN FDS311:'/
     &       '     THE DIMENSION OF THE ARRAY IN COMMON /FDSIND/ :',
     &       I12,'  IS TOO SMALL.'/)
C
C-----END OF FDS311----------------------------------------------------
      E    N    D
C:::90      ,,,,,FDS312.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS312(U,IOS,RN,PFE,PFE2,
     &                  DQ,FLPLEN,UREADY,SPACE)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 2    (FDS-READ-SEQ-FLP) READS FROM UNIT U       ***
C**                     THE PACKED ARRAY FLPV AND EXPANDS IT        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   COPYRIGHT UNIVERSITAET KARLSRUHE 1988                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER U,IOS,RN,PFE,PFE2,FLPLEN,UREADY,SPACE
      DOUBLE PRECISION DQ(FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I I/O I  POSITION OF ACTUAL ELEMENT OF INDEXVECTOR
C--------I------I-----I------------------------------------------------
C PFE2   I  I   I I/O I  POSITION OF FIRST ELEMENT OF FLPV ON U
C--------I------I-----I------------------------------------------------
C DQ     I  FP  I OUT I  FLOATING-POINT-VECTOR OF LENGTH FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C SPACE  I  I   I I/O I  =1 ONLY POSITIONING 1 RECORD FOREWARD
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99)
      INTEGER   I,NP,LEN
      DOUBLE PRECISION      ZERO
      INTEGER   NPACK,IDQP,NIND
      DOUBLE PRECISION      DQP
      COMMON /FDSDQP/  DQP(1)
      COMMON /FDSLEN/ NPACK(1)
      COMMON /FDSIND/ NIND,IDQP(1)
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C**
      IF (RN.LT.0) THEN
         PFE  = 0
         PFE2 = 1
         RN=1
         CALL FDS305(U,IOS,RN,UREADY)
      ELSE
C
         LEN=FLPLEN
         NP = NPACK(RN)
       IF(NP.GT.0) THEN
       LEN = NP
       END IF
 
       IF(SPACE.EQ.1) THEN
C
C**       ONLY POSITIONING ONE RECORD FOREWARD
C
           PFE  = PFE  + NP
           PFE2 = PFE2 + LEN
           RN   = RN   + 1
C
           IF(IOINF1(U).EQ.0) THEN
           IOS = 0
           READ(U,IOSTAT=IOS)
           END IF
C
           RETURN
       END IF
 
       IF(NP.GT.0) THEN
C
C**      READ PACKED DIAGONAL
C
         CALL FDS309(U,IOS,RN,PFE2,DQP,LEN,UREADY)
C
C**         EXPAND    DIAGONAL
C
             DO 20 I=1,FLPLEN
               DQ(I) = ZERO
   20        CONTINUE
C
             DO 30 I=1,NP
               DQ(IDQP(PFE+I)) = DQP(I)
   30        CONTINUE
C
             PFE = PFE + NP
       ELSE
C
C***       READ FULL DIAGONAL
C
           CALL FDS309(U,IOS,RN,PFE2,DQ,LEN,UREADY)
C
       END IF
C
      END IF
 
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
C-----END OF FDS312----------------------------------------------------
      E    N    D
C:::91      ,,,,,FDS313.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS313(U,IOS,RN,PFE,PFE2,
     &                  DQ,FLPLEN,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 3    (FDS-READ-SEQ-FLP) GATHERS PREPACKED       ***
C**                     DIAGONAL AND SAVES IT ON FILE               ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   COPYRIGHT UNIVERSITAET KARLSRUHE 1988                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER U,IOS,RN,PFE,PFE2,FLPLEN,UREADY
      DOUBLE PRECISION DQ(FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C PFE    I  I   I I/O I  POSITION OF ACTUAL ELEMENT OF INDEXVECTOR
C--------I------I-----I------------------------------------------------
C PFE2   I  I   I I/O I  POSITION OF FIRST ELEMENT OF FLPV ON U
C--------I------I-----I------------------------------------------------
C DQ     I  FP  I OUT I  FLOATING-POINT-VECTOR OF LENGTH FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,NP,LEN
      DOUBLE PRECISION      ZERO
      INTEGER   NPACK,IDQP,NIND
      DOUBLE PRECISION      DQP
      COMMON /FDSDQP/  DQP(1)
      COMMON /FDSLEN/ NPACK(1)
      COMMON /FDSIND/ NIND,IDQP(1)
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C**
      IF (RN.LT.0) THEN
         PFE  = 0
         PFE2 = 1
         RN=1
         CALL FDS305(U,IOS,RN,UREADY)
      ELSE
C
         LEN=FLPLEN
         NP = NPACK(RN)
       IF(NP.GT.0) THEN
C
C**   GATHER DQ TO DQP
C
       DO 20 I=1,NP
        DQP(I) = DQ(IDQP(PFE+I))
  20   CONTINUE
 
       PFE = PFE + NP
C
C**   STORE GATHERED DIAGONAL
C
         CALL FDS310(U,IOS,RN,PFE2,DQP,NP,UREADY)
 
       ELSE
C
C**   STORE COMPLETE DIAGONAL
C
         CALL FDS310(U,IOS,RN,PFE2,DQ,LEN,UREADY)
 
       END IF
      END IF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
C-----END OF FDS313----------------------------------------------------
      E    N    D
C:::92      ,,,,,FDS315.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS315 (U,IOS,RN,RL,PFE,INTV,INTLEN,IERR,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 5    (FDS-READ-DIR-INT) READS FROM THE RECORD    ***
C**                     RN INTLEN INTEGERWORDS FROM UNIT U INTO     ***
C**                     THE ARRAY INTV. RL IS THE RECORD LENGTH.    ***
C**                     PFE IS THE ABSOLUT ADDRESS ON UNIT U OF     ***
C**                     THE FIRST ELEMENT OF INTV IN WORDS.         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, RL, PFE, INTLEN, IERR, UREADY
      INTEGER INTV(1:INTLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTV ON U
C--------I------I-----I------------------------------------------------
C INTV   I  I   I OUT I  INTEGERARRAY OF LENGTH INTLEN, RESULT
C--------I------I-----I------------------------------------------------
C INTLEN I  I   I IN  I  LENGTH OF ARRAY INTV
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR INDICATOR
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3,WRDLEN,I,IA
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
C***
         WRDLEN=8
C***
      IERR=0
      IF(WRDLEN*INTLEN.GT.RL) THEN
        IERR=1
        RETURN
      ENDIF
      READ(U,REC=RN,IOSTAT=IOS) INTV
      RN=RN+1
      ELSE
      IERR=0
      IA=(RN-1)*IOINF3(U)
      IF(IA+INTLEN.GT.IOINF1(U)) THEN
         IOS=IA+INTLEN
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,INTLEN
         INTV(I)=BIG(IA+I)
  10  CONTINUE
      RN=RN+1
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS315----------------------------------------------------
      E    N    D
C:::93      ,,,,,FDS316.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS316 (U,IOS,RN,RL,PFE,INTV,INTLEN,IERR,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 6    (FDS-WRITE-DIR-INT) READS FROM THE ARRAY    ***
C**                     INTV AND WRITES THEN TO THE RECORD RN       ***
C**                     INTLEN INTEGERWORDS TO UNIT U.              ***
C**                     RL IS THE RECORD LENGTH.                    ***
C**                     PFE IS THE ABSOLUT ADDRESS ON UNIT U OF     ***
C**                     THE FIRST ELEMENT OF INTV IN WORDS.         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, RL, PFE, INTLEN, IERR, UREADY
      INTEGER INTV(1:INTLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTV ON U
C--------I------I-----I------------------------------------------------
C INTV   I  I   I OUT I  INTEGERARRAY OF LENGTH INTLEN, RESULT
C--------I------I-----I------------------------------------------------
C INTLEN I  I   I IN  I  LENGTH OF ARRAY INTV
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3,WRDLEN,I,IA,LOUT
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
      COMMON /FDSOUT/ LOUT
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
C***
         WRDLEN=8
C***
      IERR=0
      IF(WRDLEN*INTLEN.GT.RL) THEN
        IERR=1
        RETURN
      ENDIF
      WRITE(U,REC=RN,IOSTAT=IOS) INTV
      IF (IOS.NE.0) CALL FDS398(U,LOUT,IOS)
      RN=RN+1
      ELSE
      IERR=0
      IA=(RN-1)*IOINF3(U)
      IF(IA+INTLEN.GT.IOINF1(U)) THEN
         IOS=IA+INTLEN
         CALL FDS398(U,LOUT,IOS)
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,INTLEN
         BIG(IA+I)=INTV(I)
  10  CONTINUE
      RN=RN+1
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS316----------------------------------------------------
      E    N    D
C:::94      ,,,,,FDS317.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS317 (U,IOS,RN,RL,PFE,FLPV,FLPLEN,IERR,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 7    (FDS-READ-DIR-FLP) READS FLP FLOATING-      ***
C**                     POINT-VARIABLES FROM THE RECORD RN ON       ***
C**                     UNIT U INTO THE ARRAY FLPV. RL IS THE       ***
C**                     RECORD LENGTH.                              ***
C**                     PFE IS THE ABSOLUT ADDRESS ON UNIT U OF     ***
C**                     THE FIRST ELEMENT OF INTO IN WORDS.         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      ------------------                                         ***
C**                                                                 ***
      INTEGER  U, IOS, RN, RL, PFE, FLPLEN, IERR, UREADY
      DOUBLE PRECISION     FLPV(1:FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTO ON U
C--------I------I-----I------------------------------------------------
C FLPV   I  FP  I OUT I  FLOATING-POINT-VECTOR, LENGTH=FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3,WRDLEN,I,IA
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
C***
         WRDLEN=8
C***
      IERR=0
      IF(WRDLEN*FLPLEN.GT.RL) THEN
        IERR=1
        RETURN
      ENDIF
      READ(U,REC=RN,IOSTAT=IOS) FLPV
      RN=RN+1
      ELSE
      IERR=0
      IA=(RN-1)*IOINF3(U)
      IF(IA+FLPLEN.GT.IOINF1(U)) THEN
         IOS=IA+FLPLEN
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,FLPLEN
         FLPV(I)=BIG(IA+I)
  10  CONTINUE
      RN=RN+1
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS317----------------------------------------------------
      E    N    D
C:::95      ,,,,,FDS318.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS318 (U,IOS,RN,RL,PFE,FLPV,FLPLEN,IERR,UREADY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 1 8    (FDS-WRITE-DIR-FLP) READS FROM THE ARRAY    ***
C**                     FLPV  FLPLEN FLOATING-POINT-VARIABLES       ***
C**                     INTO THE RECORD RN ON UNIT U.               ***
C**                     RL IS THE RECORD LENGTH.                    ***
C**                     PFE IS THE ABSOLUT ADDRESS ON UNIT U OF     ***
C**                     THE FIRST ELEMENT OF INTO IN WORDS.         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  U, IOS, RN, RL, PFE, FLPLEN, IERR, UREADY
      DOUBLE PRECISION     FLPV(1:FLPLEN)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C U      I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PFE    I  I   I IN  I  POSITION OF FIRST ELEMENT OF INTO ON U
C--------I------I-----I------------------------------------------------
C FLPV   I  FP  I OUT I  FLOATING-POINT-VECTOR, LENGTH=FLPLEN
C--------I------I-----I------------------------------------------------
C FLPLEN I  I   I IN  I  LENGTH OF ARRAY FLPV
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C UREADY I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3,WRDLEN,I,IA,LOUT
      DOUBLE PRECISION BIG
      COMMON /FDSIO/ BIG(1)
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
      COMMON /FDSOUT/ LOUT
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IOS=0
      IF(IOINF1(U).EQ.0) THEN
C***
         WRDLEN=8
C***
      IERR=0
      IF(WRDLEN*FLPLEN.GT.RL) THEN
        IERR=1
        RETURN
      ENDIF
      WRITE(U,REC=RN,IOSTAT=IOS) FLPV
      IF (IOS.NE.0) CALL FDS398(U,LOUT,IOS)
      RN=RN+1
      ELSE
      IERR=0
      IA=(RN-1)*IOINF3(U)
      IF(IA+FLPLEN.GT.IOINF1(U)) THEN
         IOS=IA+FLPLEN
         CALL FDS398(U,LOUT,IOS)
         RETURN
      ENDIF
      IA=IOINF2(U)+IA
      DO 10 I=1,FLPLEN
         BIG(IA+I)=FLPV(I)
  10  CONTINUE
      RN=RN+1
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS318----------------------------------------------------
      E    N    D
C:::96      ,,,,,FDS331.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS331 (V,N,MV,IFILE,RN,RL,UR,FDSSUB,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 3 1    READS/WRITES THE N COMPONENTS OF THE        ***
C**      1-DIMENSIONAL VECTOR V IN PARTS OF MV VALUES FROM/ON       ***
C**      DIRECT-ACCESS-FILE IFILE BEGINNING AT POSITION RN.         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N, MV, IFILE, RN, RL, UR, IERR
      DOUBLE PRECISION     V(N)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C V      I  DP  I I/O I  VECTOR TO BE READ/WRITTEN ON FILE
C        I      I     I  ARRAY: V(N)
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF COMPONENTS OF VECTOR V
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C RN     I  I   I IN  I  NUMBER OF THE ACTUAL FILERECORD, FROM/IN WHICH
C        I      I     I  THE FIRST ELEMENTS HAVE TO BE READ/WRITTEN.
C        I      I OUT I  NUMBER OF THE NEXT AVAILABLE FILERECORD
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C FDSSUB I  EX  I IN  I  NAME OF THE I/O-SUBROUTINE FOR READ/WRITE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, J, K, IOS, PFE
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      I=MV
      J=MV
      K=1
  10  IF(J.GT.N)  I=I-(J-N)
C
C***  CALL THE I/O-SUBROUTINE TO READ OR WRITE I VALUES
C
      CALL FDSSUB(IFILE,IOS,RN,RL,PFE,V(K),I,IERR,UR)
      IF(IOS.NE.0) THEN
         IERR = 331 + IFILE * 10000
         RETURN
         ENDIF
      IF(J.GE.N)    R E T U R N
      J=J+MV
      K=K+MV
      GO TO 10
C
C
C**** END OF CALCULATION
C     ------------------
C
C-----END OF FDS331----------------------------------------------------
      E    N    D
C:::97      ,,,,,FDS332.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS332 (V,N1,N2,MV,IFILE,RN,RL,UR,FDSSUB,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 3 2    READS/WRITES THE 2-DIMENSIONAL VECTOR V     ***
C**      IN PARTS OF MV VALUES FROM/ON DIRECT-ACCESS-FILE IFILE     ***
C**      BEGINNING AT POSITION RN.                                  ***
C**      IF THE FIRST INDEX IS 1 A NEW RECORD IS USED.              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N1, N2, MV, IFILE, RN, RL, UR, IERR
      DOUBLE PRECISION     V(N1,N2)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C V      I  DP  I I/O I  VECTOR TO BE READ/WRITTEN ON FILE
C        I      I     I  ARRAY: V(N1,N2)
C--------I------I-----I------------------------------------------------
C N1,N2  I  I   I IN  I  NUMBER OF COMPONENTS OF VECTOR V IN THE FIRST/
C        I      I     I  SECOND DIMENSION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C RN     I  I   I IN  I  NUMBER OF THE ACTUAL FILERECORD, FROM/IN WHICH
C        I      I     I  THE FIRST ELEMENTS HAVE TO BE READ/WRITTEN.
C        I      I OUT I  NUMBER OF THE NEXT AVAILABLE FILERECORD
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C FDSSUB I  EX  I IN  I  NAME OF THE I/O-SUBROUTINE FOR READ/WRITE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I2, I, J, K, IOS, PFE
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 20 I2=1,N2
      I=MV
      J=MV
      K=1
  10  IF(J.GT.N1)  I=I-(J-N1)
C
C***  CALL THE I/O-SUBROUTINE TO READ OR WRITE I VALUES
C
      CALL FDSSUB(IFILE,IOS,RN,RL,PFE,V(K,I2),I,IERR,UR)
      IF(IOS.NE.0) THEN
         IERR = 332 + IFILE * 10000
         RETURN
      ENDIF
      IF(J.GE.N1)    GO TO 20
      J=J+MV
      K=K+MV
      GO TO 10
  20  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS332----------------------------------------------------
      E    N    D
C:::98      ,,,,,FDS333.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS333(DW,IFILE1,IFILE2,MV,NR,RL,RN1,RN2,
     &                  UR1,UR2,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 3 3   READS NR RECORDS FROM FILE 1 STARTING        ***
C**      AT RN1 AND WRITES THEM ON FILE 2 STARTING AT RN2.          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IFILE1,IFILE2,MV,NR,RL,RN1,RN2,UR1,UR2,IERR
      DOUBLE PRECISION      DW(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MV
C--------I------I-----I------------------------------------------------
CIFILE1,2I  I   I IN  I  UNIT-NUMBERS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF
C        I      I     I  THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C NR     I  I   I IN  I  NUMBER OF RECORDS TO TRANSFER
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C RN1,2  I  I   I I/O I  RECORD-NUMBERS            (OUT : RN1,2 + NR)
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I, IOS1, IOS2, PFE
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 10 I=1,NR
         CALL FDS317(IFILE1,IOS1,RN1,RL,PFE,DW,MV,IERR,UR1)
         CALL FDS318(IFILE2,IOS2,RN2,RL,PFE,DW,MV,IERR,UR2)
   10 CONTINUE
      IF(IOS1.NE.0) THEN
         IERR = 333 + IFILE1 * 10000
         RETURN
      ENDIF
      IF(IOS2.NE.0) THEN
         IERR = 333 + IFILE2 * 10000
         RETURN
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS333----------------------------------------------------
      E    N    D
C:::99      ,,,,,FDS398.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS398 ( IFILE, LOUT, IOS)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 9 8    STOPS PROGRAM BECAUSE OF WRITING ERROR      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1989                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IFILE, LOUT, IOS
C**                                                                 ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF THE FILE
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  OUTPUT UNIT
C--------I------I-----I------------------------------------------------
C IOS    I  I   I OUT I  I/O-STATUS
C--------I------I-----I------------------------------------------------
C
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      WRITE (LOUT,1000) IFILE,IOS
      STOP 398
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(///,1X,'ERROR WHILE WRITING ON FILE ',I3,/,
     &           1X,'I/O STATUS ',I12,/,
     &           1X,'IF THE FILE IS STORED INCORE',//,
     &           1X,'    ASSIGN FILE LARGER ',//,
     &           1X,'TO THE APPROPRIATE VALUE ACCORDING TO THE ',/,
     &           1X,'F I D I S O L / C A D S O L  USER''S GUIDE.',///,
     &           1X,'EXECUTION  S T O P P E D',/,
     &           1X,'SEVERE USER''S  E R R O R')
C-----END OF FDS398----------------------------------------------------
      E    N    D
C:::100     ,,,,,FDS399.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS399 ( IFILE, LOUT, IOS)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 3 9 9    CONTROLS IF THE FILE FOR THE MATRIX IS      ***
C**                     INCORE.                                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1989                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IFILE, LOUT, IOS
C**                                                                 ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF THE FILE
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  OUTPUT UNIT
C--------I------I-----I------------------------------------------------
C IOS    I  I   I  -  I
C--------I------I-----I------------------------------------------------
C
      INTEGER NBIG,NTOTAL,IOINF1,IOINF2,IOINF3
      COMMON /FDSINF/ NBIG,NTOTAL,IOINF1(99),IOINF2(99),IOINF3(99)
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C
      IF(IOINF1(IFILE).EQ.0) THEN
C
C***  FILE IFILE STORED OUT-OF-CORE ===> WARNING
C
         WRITE (LOUT,1000) IFILE,IFILE
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(///,1X,'FILE ',I3,' SHOULD BE STORED INCORE ',/,
     &           1X,'TO OBTAIN A BETTER PERFORMANCE.',/,
     &           1X,'PLEASE ASSIGN SUFFICIENT STORAGE FOR THE FILE.',/,
     &           1X,'I. E. CHANGE IOINF1(',I3,') FROM 0 TO THE ',
     &              'APPROPRIATE VALUE ACCORDING TO THE ',/,
     &           1X,'F I D I S O L / C A D S O L  USER''S GUIDE.',///)
C-----END OF FDS399----------------------------------------------------
      E    N    D
C:::101     ,,,,,FDS411.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS411(N1,N2,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 1 1   READS THE SOLUTION-VECTOR U1, WHICH IS       ***
C**      STORED IN N1-N2-SORTING, AND WRITES THESE VALUES INTO      ***
C**      THE VECTOR U2,  WHICH IS STORED IN N2-N1-SORTING.          ***
C**      (INTERCHANGING OF THE INDIZES).                            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1,N2
      DOUBLE PRECISION    U1(N1,N2) , U2(N2,N1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1,N2  I  I   I IN  I  ARRAY BOUNDS FOR U1, U2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  SOLUTION-VECTOR, IN N1-N2-SORTING
C        I      I     I  ARRAY : U1(N1,N2)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  SOLUTION-VECTOR, IN N2-N1-SORTING
C        I      I     I  ARRAY : U2(N2,N1)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1,I2,IA,K,MVL,NV
      PARAMETER  (MVL=65535)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C     IF-CLAUSE FOR ECONOMIC STORAGE-ACCESS:
C     ( SHORT OUTER LOOP - LONG INNER LOOP )
C
      IF(N1.LT.N2) THEN
      DO 20 I1=1,N1
      K=0
    5 IA=K
      NV=MIN(N2-K,MVL)
      K=K+NV
      DO 10 I2=1,NV
         U2(I2+IA,I1) = U1(I1,I2+IA)
   10 CONTINUE
      IF(K.LT.N2) GO TO 5
   20 CONTINUE
      ELSE
      DO 40 I2=1,N2
      K=0
   25 IA=K
      NV=MIN(N1-K,MVL)
      K=K+NV
      DO 30 I1=1,NV
         U2(I2,I1+IA) = U1(I1+IA,I2)
   30 CONTINUE
      IF(K.LT.N1) GO TO 25
   40 CONTINUE
      END IF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS411----------------------------------------------------
      E    N    D
C:::102     ,,,,,FDS420.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS420(N1,N2,N3,MV,FAK,PA,PE,X,U)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 0   COMPUTES AND ADDS THE INTERPOLATION OF N3    ***
C**      SOLUTION COMPONENTS AT N2 GRID POINTS IN THE X-DIRECTION   ***
C**      AND N1 GRID POINTS IN OTHER DIRECTION(-S) FROM THE GIVEN   ***
C**      VALUES AT THE BOUNDARIES X(1) AND X(N2). THE RESULT IS     ***
C**      MULTIPLIED WITH THE FACTOR FAK, BECAUCE IN FURTHER CALLS   ***
C**      OF FDS420 THE INTERPOLATION IN Y- (AND Z-) DIRECTION IS    ***
C**      ADDED. FOR 2-DIMENSIONAL INTERPOLATION THE FACTOR IS 1/2,  ***
C**      FOR 3-DIMENSIONAL INTERPOLATION THE FACTOR IS 1/3 FOR      ***
C**      EACH DIRECTION.                                            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            N1,N2,N3,MV
      DOUBLE PRECISION   FAK,PA(MV,N3),PE(MV,N3),X(N2),U(N1,N2,N3)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1,N2, I  I   I IN  I  ARRAY BOUNDS, AND NUMBERS OF VALUES IN
C N3,MV  I      I     I  EACH DIRECTION
C--------I------I-----I------------------------------------------------
C FAK    I  DP  I IN  I  FACTOR FOR THE INTERPOLATION
C--------I------I-----I------------------------------------------------
C PA,PE  I  DP  I IN  I  BOUNDARY-DEFECT AT X = X(1),X(N2)
C        I      I     I  ARRAYS : PA,E(MV,N3)
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  GRID POINTS               ARRAY : X(N2)
C--------I------I-----I------------------------------------------------
C U      I  DP  I OUT I  INTERPOLATED SOLUTION     ARRAY : U(N1,N2,N3)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER            I1,I2,I3
      DOUBLE PRECISION   Z
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 30 I3=1,N3
      DO 20 I2=1,N2
         Z = (X(I2)-X(1)) / (X(N2)-X(1))
         DO 10 I1=1,N1
            U(I1,I2,I3)=U(I1,I2,I3)-FAK*((1-Z)*PA(I1,I3)+Z*PE(I1,I3))
   10    CONTINUE
   20 CONTINUE
   30 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS420----------------------------------------------------
      E    N    D
C:::103     ,,,,,FDS421.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS421(N1,N2,NK,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 1   READS THE SOLUTION-VECTOR U1, IN WHICH       ***
C**      LINES  X2=CONST. ARE STORED CLOSE BEHIND EACH OTHER, AND   ***
C**      WRITES THESE VALUES INTO THE VECTOR U2, IN WHICH LINES     ***
C**      X1=CONST. ARE STORED.                                      ***
C**      THIS IS DONE FOR EACH COMPONENT OF THE SOLUTION.           ***
C**      THIS SUBROUTINE CAN ALSO BE USED FOR 3-D PROBLEMS.         ***
C**      THEN N2 INDICATES THE NUMBER OF GRIDPOINTS WITHIN ONE      ***
C**      PLANE X1 = CONST.                                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER            N1,N2,NK
      DOUBLE PRECISION   U1(N1,N2,NK) , U2(N2,N1,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N1     I  I   I IN  I  NUMBER OF GRID POINTS IN THE X1-DIRECTION
C--------I------I-----I------------------------------------------------
C N2     I  I   I IN  I  NUMBER OF GRID POINTS IN THE X2-DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  SOLUTION-VECTOR, IN WHICH LINES X2=CONST.
C        I      I     I  ARE STORED
C        I      I     I  ARRAY : U1(N1,N2,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  SOLUTION-VECTOR, IN WHICH LINES X1=CONST.
C        I      I     I  ARE STORED
C        I      I     I  ARRAY : U2(N2,N1,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1,I2,IK
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 40 IK=1,NK
      IF(N1.LT.N2) THEN
      DO 15 I1=1,N1
      DO 10 I2=1,N2
         U2(I2,I1,IK) = U1(I1,I2,IK)
   10 CONTINUE
   15 CONTINUE
      ELSE
      DO 25 I2=1,N2
      DO 20 I1=1,N1
         U2(I2,I1,IK) = U1(I1,I2,IK)
   20 CONTINUE
   25 CONTINUE
      ENDIF
   40 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS421----------------------------------------------------
      E    N    D
C:::104     ,,,,,FDS422.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS422(N,NX,NY,NK,MV,M222,U1,U2,U222,
     &                  IFILE3,IFILE4,UR3,UR4,RL,RL4,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 2   SORTING OF THE SOLUTION.                     ***
C**      FROM FILE 3 THE X-Y-SORTING IS READ. THE OTHER SORTING     ***
C**      IS  COMPUTED AND WRITTEN ON FILE 3. ON FILE 4 THE BOUNDARY ***
C**      VALUES ARE WRITTEN. IN ARRAY U222(1,NK) THE DUMMYVALUES AT ***
C**      GRIDPOINT (2,2)   ARE WRITTEN.                             ***
C**      FOR DESCRIPTION OF PARAMETERS SEE FDSE14                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N,NX,NY,NK,MV,M222,IFILE3,IFILE4,UR3,UR4,RL,RL4,IERR
      DOUBLE PRECISION  U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :  ( SEE FDSE14 )                   ***
C**   -------------------------------------------                   ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   II,IK,RN3,RN4,IOS,PFE
      EXTERNAL FDS317,FDS318
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  SOLUTION IN X-Y-SORTING
C
      RN3 = 1
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
      II = NX + 2
      DO 10 IK = 1,NK
   10 U222(1,IK) = U1(II,IK)
      RN4 = 2 * NK + 1
      DO 20 IK = 1,NK
   20 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX,IERR,UR4)
      II = (NY - 1) * NX + 1
      DO 30 IK = 1,NK
   30 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NX,IERR,UR4)
C
C***  SOLUTION IN Y-X-SORTING
C
      CALL FDS421(NX,NY,NK,U1,U2)
      CALL FDS332(U2,N,NK,MV,IFILE3,RN3,RL,UR3,FDS318,IERR)
      RN4 = 1
      DO 40 IK = 1,NK
   40 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY,IERR,UR4)
      II = (NX -1) * NY + 1
      DO 50 IK = 1,NK
   50 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(II,IK),NY,IERR,UR4)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS422----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::105     ,,,,,FDS423.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS423 (N,NK,NX,NY,MV,IN,IFILE1,UR1,IFILE2,UR2,
     &           IFILE3,UR3,RL,X,Y,PX,PY,PU,U222,M222,LX,LY,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 3    READS THE X-,Y-COORDINATES, THE SOLUTION    ***
C**      AND ALL DERIVATIVES IN PARTS OF MV VALUES. IF ONE GRID-    ***
C**      POINT IS A BOUNDARY-POINT ALL VALUES FOR THIS POINT ARE    ***
C**      TAKEN FROM THE POINT (2,2).  THIS IS DONE, THAT THE USER-  ***
C**      SUBROUTINES, WHICH DETERMINE THE DEFECT AND THE JACOBI-    ***
C**      MATRICES OF THE GIVEN PROBLEM SEPARATE FOR THE INNER GRID- ***
C**      POINTS AND THE BOUNDARY-POINTS, CAN COMPUTE A VECTOR OF MV ***
C**      VALUES FOR MV INNER GRIDPOINTS. FINALLY MV INNER VALUES OF ***
C**      X,Y,U(1),...,U(NK),UX(1),...,UX(NK),......,UYY(NK) ARE     ***
C**      WRITTEN IN 2+M222*NK RECORDS OF FILE3. THEN THE NEXT MV    ***
C**      VALUES OF THE SOLUTION AND THE DERIVATIVES WERE READ.      ***
C**      IF THE PROBLEM IS PARABOLIC, ALSO UT IS                    ***
C**      WRITTEN ON FILE3.                                          ***
C**      IN THE CASE OF A PERIODIC DIRECTION THE BOUNDARY-POINTS    ***
C**      ARE TREATED AS INNER GRIDPOINTS.                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N, NK, NX, NY, MV, IN, IFILE1, UR1, IFILE2, UR2,
     &         IFILE3, UR3, RL, M222, IERR
      DOUBLE PRECISION  X(NX), Y(NY), PX(MV), PY(MV), PU(N,NK),
     &         U222(M222,NK)
      LOGICAL  LX, LY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRID-POINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS.
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  =(NX*NY)/MV ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS OF FILE1,2,3
C -2,-3  I      I     I
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH IN INTEGER WORDS
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I IN  I  GRID-POINTS IN THE X-,Y-DIRECTION
C        I      I     I  ARRAYS: X(NX), Y(NY)
C--------I------I-----I------------------------------------------------
C PX,PY, I  DP  I  -  I  WORKAREAS FOR THE COORDINATES, THE SOLUTION
C PU     I      I     I  AND THE DERIVATIVES.
C        I      I     I  ARRAYS: PX(MV),PY(MV),PU(N,NK)
C--------I------I-----I------------------------------------------------
C U222   I  DP  I IN  I  VALUES FOR THE SOLUTION AND THE DERIVATIVES
C        I      I     I  AT GRIDPOINT (2,2)        ARRAY: U222(M222,NK)
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  ARRAYBOUND FOR U222 (ELL: M222=5, PAR: M222=6)
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, IA, IB, I1, I2, IK, J, PFE, IOS, NR, NV, RN, RN3
      DOUBLE PRECISION    U
      EXTERNAL FDS317
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      I=0
      J=0
C
C***  LOOP OVER ALL GRID-POINTS, SORTING OF THE COORDINATES
C
      DO 5 I2=1,NY
      DO 5 I1=1,NX
         I=I+1
C
C***     FOR BOUNDARY-POINTS THE COORDINATES (2,2) ARE TAKEN
C
         IF((I1.EQ.1.OR.I1.EQ.NX).AND..NOT.LX .OR.
     &      (I2.EQ.1.OR.I2.EQ.NY).AND..NOT.LY)    THEN
            PX(I)=X(2)
            PY(I)=Y(2)
         ELSE
            PX(I)=X(I1)
            PY(I)=Y(I2)
         ENDIF
         IF(I.EQ.MV) THEN
C
C***        WRITING OF THE COORDINATES OF MV INNER GRIDPOINTS
C
            NR=J*(2+M222*NK)+1
            CALL FDS318(IFILE3,IOS,NR,RL,PFE,PX,MV,IERR,UR3)
            CALL FDS318(IFILE3,IOS,NR,RL,PFE,PY,MV,IERR,UR3)
            I=0
            J=J+1
         ENDIF
   5  CONTINUE
C
C***  WRITING OF THE REMAINING COORDINATES
C
      IF(I.GT.0) THEN
         NR=J*(2+M222*NK)+1
         CALL FDS318(IFILE3,IOS,NR,RL,PFE,PX,I,IERR,UR3)
         CALL FDS318(IFILE3,IOS,NR,RL,PFE,PY,I,IERR,UR3)
      ENDIF
C
C***  PRESORTING OF THE SOLUTION AND THE DERIVATIVES
C
      DO 300 I2=1,M222
      IF(I2.EQ.1) THEN
         RN=1
         CALL FDS332(PU,N,NK,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
         RN=1
      ELSE
         CALL FDS332(PU,N,NK,MV,IFILE2,RN,RL,UR2,FDS317,IERR)
      ENDIF
      DO 260 IK=1,NK
      U=U222(I2,IK)
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 210 I=1,NY
            PU(IA,IK) = U
            PU(IB,IK) = U
            IA = IA + NX
            IB = IB + NX
 210     CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 240 I=1,NX
            PU(I,IK) = U
 240     CONTINUE
         IA = (NY-1) * NX
         DO 250 I=1,NX
            PU(I+IA,IK) = U
 250     CONTINUE
      ENDIF
 260  CONTINUE
      NV=MV
      DO 290 J=1,IN
         RN3=3+(I2-1)*NK+(J-1)*(2+M222*NK)
         IA=1+(J-1)*MV
         IF(J.EQ.IN) NV=N-(J-1)*MV
         DO 280 IK=1,NK
            CALL FDS318(IFILE3,IOS,RN3,RL,PFE,PU(IA,IK),NV,IERR,UR3)
 280     CONTINUE
 290  CONTINUE
      IF(IOS.NE.0) THEN
         IERR=IFILE3*10000+423
         RETURN
      ENDIF
 300  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS423----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::106     ,,,,,FDS424.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS424 (NK,NX,NY,N,MV,IN,IFILE1,IFILE2,UR1,UR2,
     &           RL,P,P1,P2,P3,P4,DEF,DEFMAX,LX,LY,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 4    READS THE VALUES OF THE INNER DEFECT FOR    ***
C**      ALL N = NX * NY   GRID-POINTS IN PARTS OF MV VALUES        ***
C**      FROM FILE 1. THESE VALUES ARE MERGED WITH THE BOUNDARY     ***
C**      VALUES, WHICH ARE STORED ON FILE 1 BEHIND THE INNER VALUES.***
C**      THE NEGATIVE MERGED VECTOR IS WRITTEN IN NK-NX-NY-         ***
C**      SORTING ON FILE 2. IN THE CASE OF A PERIODIC DIRECTION     ***
C**      NO BOUNDARY VALUES ARE READ AND MERGED.                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  NK,NX,NY,N,MV,IN,IFILE1,IFILE2,UR1,UR2,RL,IERR
      DOUBLE PRECISION  P(N,NK),P1(NY),P2(NY),P3(NX),P4(NX),
     &                  DEF(NK,NX,NY),DEFMAX
      LOGICAL  LX, LY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS.
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  =( N / MV ) ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS
C 2      I      I     I
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C P      I  DP  I  -  I  WORKARRAY FOR THE INNER VALUES
C        I      I     I  ARRAY : P(N,NK)
C--------I------I-----I------------------------------------------------
C P1,P2, I  DP  I  -  I  WORKARRAYS FOR BOUNDARIES X = XAN / XEN
C        I      I     I  ARRAYS : P1/2(NY)
C--------I------I-----I------------------------------------------------
C P3,P4, I  DP  I  -  I  WORKARRAYS FOR BOUNDARIES Y = YAN / YEN
C        I      I     I  ARRAYS : P3/4(NX)
C--------I------I-----I------------------------------------------------
C DEF    I  DP  I  -  I  WORKARRAY FOR THE COMPLETE DEFECT
C        I      I     I  ARRAY : DEF(NK,NX,NY)
C--------I------I-----I------------------------------------------------
C DEFMAX I  DP  I OUT I  MAXIMUM OF THE DEFECT
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  = TRUE INDICATES A PERIODIC DIRECTION
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  IA, IB, IK, IM, I, J, NV, RNB, RNI, IOS, PFE
      DOUBLE PRECISION  ZERO,FDS101
      EXTERNAL FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      DO 300 IK = 1,NK
         RNB = IN * NK + IK
C
C***     READ THE BOUNDARY DEFECT
C
         IF(LX) GO TO 110
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P1,NY,IERR,UR1)
         RNB = RNB - 1 + NK
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P2,NY,IERR,UR1)
         RNB = RNB - 1 + NK
C
 110     IF(LY) GO TO 130
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P3,NX,IERR,UR1)
         RNB = RNB - 1 + NK
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P4,NX,IERR,UR1)
         RNB = RNB - 1 + NK
C
C***     READ THE DEFECT AT MV INNER GRIDPOINTS
C
 130     RNI = IK
         NV = MV
         DO 150 J=1,IN
            IF(J.EQ.IN) NV=N-(IN-1)*MV
            IA = 1+(J-1)*MV
            CALL FDS317(IFILE1,IOS,RNI,RL,PFE,P(IA,IK),NV,IERR,UR1)
            RNI = RNI-1+NK
 150     CONTINUE
C
C***  MERGE THE INNER VALUES WITH BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 210 I=1,NY
            P(IA,IK) = P1(I)
            P(IB,IK) = P2(I)
            IA = IA+NX
            IB = IB+NX
 210     CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 220 I=1,NX
            P(I,IK) = P3(I)
 220     CONTINUE
         IA = (NY-1)*NX
         DO 230 I=1,NX
            P(I+IA,IK) = P4(I)
 230     CONTINUE
      ENDIF
      DO 250 I=1,N
         P(I,IK) = -P(I,IK)
 250  CONTINUE
 300  CONTINUE
      DEFMAX = FDS101(N*NK,P,ZERO)
      CALL FDS411(N,NK,P,DEF)
C
C***  WRITE MERGED DEFECT ON FILE 2
C
      IM = N*NK/MV
      IF(IM*MV.LT.N*NK) IM=IM+1
      RNI = 3*(IN*NK+IM)+1
      CALL FDS331(DEF,N*NK,MV,IFILE2,RNI,RL,UR2,FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS424----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::107     ,,,,,FDS425.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS425 (NX,NY,MV,IFILE1,UR1,NARC,INCR,IFILE2,UR2,
     &           NR1,NR2,NR3,NR4,RL,RL2,P,P1,P2,P3,P4,LX,LY)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 5    READS THE VALUES OF A JACOBIAN-ELEMENT FOR  ***
C**      ALL  NX*NY   GRID-POINTS IN PARTS OF MV VALUES FROM FILE1  ***
C**      BEGINNING AT POSITION NARC. THESE VALUES ARE MERGED WITH   ***
C**      THE BOUNDARY VALUES, WHICH ARE READ FROM FILE2 AT THE      ***
C**      RECORDNUMBERS NR1,...,NR4. THE MERGED VECTOR OF LENGTH     ***
C**      NX*NY IS WRITTEN ON THE SAME RECORD OF FILE1 AS THE INNER  ***
C**      VALUES WERE READ FROM.                                     ***
C**      IN THE CASE OF A PERIODIC DIRECTION NO BOUNDARY VALUES     ***
C**      ARE READ AND MERGED.                                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  NX, NY, MV, IFILE1, UR1, NARC, INCR, IFILE2, UR2,
     &         NR1, NR2, NR3, NR4, RL, RL2
      DOUBLE PRECISION  P(1), P1(1), P2(1), P3(1), P4(1)
      LOGICAL LX,LY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE1 I  I   I IN  I  UNIT-NUMBER OF FILE1
C--------I------I-----I------------------------------------------------
C UR1    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C NARC   I  I   I I/O I  NUMBER OF THE RECORD OF FILE1, FROM WHICH THE
C        I      I     I  FIRST MV VALUES WERE READ      (OUT: NARC+1)
C--------I------I-----I------------------------------------------------
C INCR   I  I   I IN  I  INCREMENT FOR THE NEXT RECORDNUMBER OF FILE1
C--------I------I-----I------------------------------------------------
C IFILE2 I  I   I IN  I  UNIT-NUMBER OF FILE2
C--------I------I-----I------------------------------------------------
C UR2    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C NR1    I  I   I IN  I  NUMBER OF THE RECORD OF FILE2, FROM WHICH THE
C        I      I     I  BOUNDARY VALUES FOR X=XAN WERE READ.
C        I      I OUT I  NR1+1
C--------I------I-----I------------------------------------------------
C NR2    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY X=XEN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR3    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Y=YAN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR4    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Y=YEN (OUT +1)
C--------I------I-----I------------------------------------------------
C RL,RL2 I  I   I IN  I  RECORD-LENGTH  (RL2 FOR FILE 2)
C--------I------I-----I------------------------------------------------
C P      I  DP  I  -  I  WORKAREA FOR THE INNER VALUES     ARRAY: P(N)
C--------I------I-----I------------------------------------------------
C P1,P2  I  DP  I  -  I  WORKAREAS FOR BOUNDARIES X=XAN/XEN
C        I      I     I  ARRAYS: P1/2(NY)
C--------I------I-----I------------------------------------------------
C P3,P4  I  DP  I  -  I  WORKAREAS FOR BOUNDARIES Y=YAN/YEN
C        I      I     I  ARRAYS: P3/4(NX)
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  I,IA,IB,IN,J,N,PFE,IOS,IERR,NRI,NV
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      N  = NX * NY
      IN = N / MV
      IF(N-IN*MV.GT.0) IN=IN+1
C
C***  READING OF THE BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         CALL FDS317(IFILE2,IOS,NR1,RL2,PFE,P1,NY,IERR,UR2)
         CALL FDS317(IFILE2,IOS,NR2,RL2,PFE,P2,NY,IERR,UR2)
      ENDIF
      IF(.NOT.LY) THEN
         CALL FDS317(IFILE2,IOS,NR3,RL2,PFE,P3,NX,IERR,UR2)
         CALL FDS317(IFILE2,IOS,NR4,RL2,PFE,P4,NX,IERR,UR2)
      ENDIF
C
C***  READING OF THE INNER VALUES
C
      NRI = NARC
      IA  = 1
      NV  = MV
      DO 10 J=1,IN
         IF(J.EQ.IN) NV=N-(IN-1)*MV
         CALL FDS317(IFILE1,IOS,NRI,RL,PFE,P(IA),NV,IERR,UR1)
         NRI = NRI + INCR - 1
         IA = IA + NV
   10 CONTINUE
C
C***  MERGING THE INNER VALUES WITH BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 15 I=1,NY
            P(IA) = P1(I)
            P(IB) = P2(I)
            IA = IA + NX
            IB = IB + NX
   15    CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 20 I=1,NX
            P(I) = P3(I)
   20    CONTINUE
         IA = (NY - 1) * NX
         DO 25 I=1,NX
            P(I+IA) = P4(I)
   25    CONTINUE
      ENDIF
C
C***  WRITING OF THE MERGED VECTOR
C
      NRI = NARC
      IA  = 1
      NV  = MV
      DO 30 J=1,IN
         IF(J.EQ.IN) NV=N-(IN-1)*MV
         CALL FDS318(IFILE1,IOS,NRI,RL,PFE,P(IA),NV,IERR,UR1)
         NRI = NRI + INCR - 1
         IA = IA + NV
   30 CONTINUE
      NARC = NARC + 1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS425----------------------------------------------------
      E    N    D
C:::108     ,,,,,FDS426.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS426 (ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &           NX,NY,MNX,MNY,MLF,MV,LXX,LYY,
     &           LZYKL1,LZYKL2,IFILE,RL,RN,UR,NH1,NH2,I4END,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 6    WRITES THE DIFFERENCE-FORMULAE FOR THE      ***
C**      FIRST AND SECOND DERIVATIVE IN THE X- AND Y- DIRECTION     ***
C**      IN THAT WAY ON FILE, IN WHICH THEY WILL BE USED BY THE     ***
C**      COMPUTATION OF THE MATRIX QD.                              ***
C**      IN ONE CALL OF FDS426 THE FORMULAE FOR I4END BLOCK-        ***
C**      DIAGONALS ARE WRITTEN ON FILE.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  NX,NY,MNX,MNY,MLF,MV,IFILE,RL,RN,UR,NH1(2),NH2,
     &         I4END,IERR
      DOUBLE PRECISION  ABX(MNX,MLF),ABXX(MNX,MLF),ABY(MNY,MLF),
     &                  ABYY(MNY,MLF),HX(MV),HXX(MV),HY(MV),HYY(MV)
      LOGICAL  LXX,LYY,LZYKL1,LZYKL2
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABX,XX I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE X-DIRECTION
C        I      I     I  ARRAYS : ABX(MNX,MLF) , ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABY,YY I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Y-DIRECTION
C        I      I     I  ARRAYS : ABY(MNY,MLF) , ABYY(MNY,MLF)
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKAREAS FOR THE SORTED
C HY,HYY I      I     I  FORMULAES (MV VALUES)
C        I      I     I  ARRAYS : H..(MV)
C--------I------I-----I------------------------------------------------
C LXX    I  L   I IN  I  X-FORMULA IS USED
C--------I------I-----I------------------------------------------------
C LYY    I  L   I IN  I  Y-FORMULA IS USED
C--------I------I-----I------------------------------------------------
C LZYKL1 I  L   I IN  I  PERIODIC ( UPPER CASE )
C--------I------I-----I------------------------------------------------
C LZYKL2 I  L   I IN  I  PERIODIC ( LOWER CASE )
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MLF    I      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C NH1    I  I   I IN  I  INFORMATION TO COMPUTE THE COLUMN IN THE
C        I      I     I  DIFFERENCE FORMULAE
C        I      I     I  ARRAY :  NH1(2)
C--------I------I-----I------------------------------------------------
C NH2    I  I   I IN  I  INFORMATION ABOUT THE PERIODIC PART OF THE
C        I      I     I  DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C I4END  I  I   I IN  I  NUMBER OF BLOCK-DIAGONALS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, I1, I2, I4, IX, IY, IOS, PFE
      DOUBLE PRECISION  ZERO
C***                                                                ***
C***       CONSTANTS :                                              ***
C***       ---------       :                                        ***
C***                                                                ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  LOOP OVER I4END BLOCK-DIAGONALS
C
      DO 100 I4 = 1,I4END
C
C***  COLUMN IN THE DIFFERENCE FORMULAE
C
      IX = NH1(1) - I4
      IY = NH1(2) - I4
      I = 0
C
C***  LOOP OVER ALL  NX * NY  GRID-POINTS
C
      DO 80 I2 = 1,NY
      DO 70 I1 = 1,NX
        I = I + 1
        IF(LXX) THEN
          IF(LZYKL1.AND.I1.GT.I4+NH2 .OR.
     &       LZYKL2.AND.I1.LE.I4+NH2) THEN
             HX(I)  = ZERO
             HXX(I) = ZERO
          ELSE
             HX(I)  = ABX(I1,IX)
             HXX(I) = ABXX(I1,IX)
          END IF
        END IF
        IF(LYY) THEN
          IF(LZYKL1.AND.I2.GT.I4+NH2 .OR.
     &       LZYKL2.AND.I2.LE.I4+NH2) THEN
             HY(I)  = ZERO
             HYY(I) = ZERO
          ELSE
             HY(I)  = ABY(I2,IY)
             HYY(I) = ABYY(I2,IY)
          END IF
        END IF
        IF(I.EQ.MV) THEN
C
C***  WRITE THE DIFFERENCE FORMULAE FOR MV GRID-POINTS
C
          IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HX ,MV,IERR,UR)
          IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HXX,MV,IERR,UR)
          IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HY ,MV,IERR,UR)
          IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HYY,MV,IERR,UR)
          IF(IOS.NE.0) THEN
             IERR = 426 + IFILE * 10000
             RETURN
          ENDIF
          I = 0
        END IF
   70 CONTINUE
   80 CONTINUE
      IF(I.GT.0) THEN
C
C***  WRITE THE DIFFERENCE FORMULAE FOR THE LAST I  GRID-POINTS
C
        IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HX ,I,IERR,UR)
        IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HXX,I,IERR,UR)
        IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HY ,I,IERR,UR)
        IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HYY,I,IERR,UR)
          IF(IOS.NE.0) THEN
             IERR = 426 + IFILE * 10000
             RETURN
          ENDIF
      END IF
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS426----------------------------------------------------
      E    N    D
C:::109     ,,,,,FDS427.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS427(MNX,MNY,NX,NY,NK,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 7   PACKS THE INPUT-VECTOR U1 FROM MNX-MNY-NK-   ***
C**      SORTING, RESULTING IN OUTPUT-VECTOR U2 IN NX-NY-NK-SORTING.***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER   MNX,MNY,NX,NY,NK
      DOUBLE PRECISION  U1(MNX,MNY,NK), U2(NX,NY,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  ARRAY BOUNDS FOR U1
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  ARRAY BOUNDS FOR U2
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR
C        I      I     I  ARRAY : U2(NX,NY,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 40 I4=1,NK
      DO 20 I2=1,NY
      DO 10 I1=1,NX
         U2(I1,I2,I4) = U1(I1,I2,I4)
   10 CONTINUE
   20 CONTINUE
   40 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS427----------------------------------------------------
      E    N    D
C:::110     ,,,,,FDS428.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS428(NX,NY,NK,MNX,MNY,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 8   ADDS THE RIGHT ENDS IN PERIODIC DIRECTIONS.  ***
C**      THE VALUES ARE TAKEN FROM THE LEFT END. INPUT-VECTOR U1    ***
C**      (NX-NY-NK-SORTING) IS ASSIGNED TO OUTPUT-VECTOR U2         ***
C**      (MNX-MNY-NK-SORTING).                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER   NX,NY,NK,MNX,MNY
      DOUBLE PRECISION  U1(NX,NY,NK), U2(MNX,MNY,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  ARRAY BOUNDS FOR U1
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  ARRAY BOUNDS FOR U2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR WITHOUT RIGHT ENDS IN PERIODIC
C        I      I     I  DIRECTIONS.
C        I      I     I  ARRAY : U1(NX,NY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR WITH RIGHT ENDS.
C        I      I     I  ARRAY : U2(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 I4=1,NK
      DO  20 I2=1,NY
      DO  10 I1=1,NX
         U2(I1,I2,I4) = U1(I1,I2,I4)
   10 CONTINUE
   20 CONTINUE
      IF(MNX.GT.NX) THEN
         DO 40 I2=1,NY
            U2(MNX,I2,I4) = U2(1,I2,I4)
   40    CONTINUE
      ENDIF
      IF(MNY.GT.NY) THEN
         DO 60 I1=1,MNX
            U2(I1,MNY,I4) = U2(I1,1,I4)
   60    CONTINUE
   70    CONTINUE
      ENDIF
  100 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS428----------------------------------------------------
      E    N    D
C:::111     ,,,,,FDS429.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS429(NX,NY,NK,MNX,MNY,NXMAX,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 2 9   ADDS THE RIGHT ENDS IN PERIODIC DIRECTIONS.  ***
C**      THE VALUES ARE TAKEN FROM THE LEFT END. INPUT-VECTOR U1    ***
C**      (NX-NY-NK-SORTING) IS ASSIGNED TO OUTPUT-VECTOR U2         ***
C**      (NXMAX-NXMAX-NK-SORTING).                                  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   NX,NY,NK,MNX,MNY,NXMAX
      DOUBLE PRECISION      U1(NX,NY,NK), U2(NXMAX,NXMAX,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  ARRAY BOUNDS FOR U1
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  NUMBER OF GRIDPOINTS INCLUDING THE RIGHT ENDS
C        I      I     I  IN PERIODIC DIRECTIONS.
C--------I------I-----I------------------------------------------------
C NXMAX  I  I   I IN  I  ARRAY BOUND FOR U2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR WITHOUT RIGHT ENDS IN PERIODIC
C        I      I     I  DIRECTIONS.
C        I      I     I  ARRAY : U1(NX,NY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR WITH RIGHT ENDS.
C        I      I     I  ARRAY : U2(NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 I4=1,NK
      DO  20 I2=1,NY
      DO  10 I1=1,NX
         U2(I1,I2,I4) = U1(I1,I2,I4)
   10 CONTINUE
   20 CONTINUE
      IF(MNX.GT.NX) THEN
         DO 40 I2=1,NY
            U2(MNX,I2,I4) = U2(1,I2,I4)
   40    CONTINUE
      ENDIF
      IF(MNY.GT.NY) THEN
         DO 60 I1=1,MNX
            U2(I1,MNY,I4) = U2(I1,1,I4)
   60    CONTINUE
      ENDIF
  100 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS429----------------------------------------------------
      E    N    D
C:::112     ,,,,,FDS432.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS432(N,NX,NY,NZ,NK,MV,M222,U1,U2,U222,
     &                  IFILE3,IFILE4,UR3,UR4,RL,RL4,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 2   SORTING OF THE SOLUTION.                     ***
C**      FROM FILE 3 THE X-Y-Z-SORTING IN READ. THE OTHER SORTINGS  ***
C**      ARE COMPUTED AND WRITTEN ON FILE 3. ON FILE 4 THE BOUNDARY ***
C**      VALUES ARE WRITTEN. IN ARRAY U222(1,NK) THE DUMMYVALUES AT ***
C**      GRIDPOINT (2,2,2) ARE WRITTEN.                             ***
C**      FOR DESCRIPTION OF PARAMETERS SEE FDSC14                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1982                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NX,NY,NZ,NK,MV,M222,IFILE3,IFILE4,UR3,UR4,RL,RL4,IERR
      DOUBLE PRECISION  U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :  ( SEE FDSC14 )                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   II,IK,RN3,RN4,IOS,PFE
      EXTERNAL FDS317,FDS318
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  SOLUTION IN X-Y-Z-SORTING
C
      RN3 = 1
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
      II = NX * NY + NX + 2
      DO 10 IK = 1,NK
   10 U222(1,IK) = U1(II,IK)
      RN4 = 4 * NK + 1
      DO 20 IK = 1,NK
   20 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX*NY,IERR,UR4)
      II = (NZ - 1) * NX * NY + 1
      DO 30 IK = 1,NK
   30 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NX*NY,IERR,UR4)
C
C***  SOLUTION IN Y-Z-X-SORTING
C
      CALL FDS421(NX,NY*NZ,NK,U1,U2)
      CALL FDS332(U2,N,NK,MV,IFILE3,RN3,RL,UR3,FDS318,IERR)
      RN4 = 1
      DO 40 IK = 1,NK
   40 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY*NZ,IERR,UR4)
      II = (NX -1) * NY * NZ + 1
      DO 50 IK = 1,NK
   50 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(II,IK),NY*NZ,IERR,UR4)
C
C***  SOLUTION IN Z-X-Y-SORTING
C
      CALL FDS421(NY,NZ*NX,NK,U2,U1)
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS318,IERR)
      DO 60 IK = 1,NK
   60 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NZ*NX,IERR,UR4)
      II = (NY -1) * NZ * NX + 1
      DO 70 IK = 1,NK
   70 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NZ*NX,IERR,UR4)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS432----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::113     ,,,,,FDS433.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS433 (N,NK,NX,NY,NZ,MV,IN,IFILE1,UR1,IFILE2,UR2,
     &           IFILE3,UR3,RL,X,Y,Z,PX,PY,PZ,PU,
     &           U222,M222,LX,LY,LZ,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 3    READS THE X-,Y-,Z-COORDINATES, THE SOLUTION ***
C**      AND ALL DERIVATIVES IN PARTS OF MV VALUES. IF ONE GRID-    ***
C**      POINT IS A BOUNDARY-POINT ALL VALUES FOR THIS POINT ARE    ***
C**      TAKEN FROM THE POINT (2,2,2). THIS IS DONE, THAT THE USER- ***
C**      SUBROUTINES, WHICH DETERMINE THE DEFECT AND THE JACOBI-    ***
C**      MATRICES OF THE GIVEN PROBLEM SEPARATE FOR THE INNER GRID- ***
C**      POINTS AND THE BOUNDARY-POINTS, CAN COMPUTE A VECTOR OF MV ***
C**      VALUES FOR MV INNER GRIDPOINTS. FINALLY MV INNER VALUES OF ***
C**      X,Y,Z,U(1),...,U(NK),UX(1),...,UX(NK),......,UZZ(NK) ARE   ***
C**      WRITTEN IN 3+M222*NK RECORDS OF FILE3. THEN THE NEXT MV    ***
C**      VALUES OF THE SOLUTION AND THE DERIVATIVES WERE READ.      ***
C**      IF THE PROBLEM IS PARABOLIC, ALSO UT IS                    ***
C**      WRITTEN ON FILE3.                                          ***
C**      IN THE CASE OF A PERIODIC DIRECTION THE BOUNDARY-POINTS    ***
C**      ARE TREATED AS INNER GRIDPOINTS.                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N, NK, NX, NY, NZ, MV, IN, IFILE1, UR1, IFILE2, UR2,
     &         IFILE3, UR3, RL, M222, IERR
      DOUBLE PRECISION  X(NX), Y(NY), Z(NZ), PX(MV), PY(MV), PZ(MV),
     &         PU(N,NK), U222(M222,NK)
      LOGICAL  LX, LY, LZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRID-POINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS.
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  =(NX*NY*NZ)/MV ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS OF FILE1,2,3
C -2,-3  I      I     I
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH IN INTEGER WORDS
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I IN  I  GRID-POINTS IN THE X-,Y-,Z-DIRECTION
C        I      I     I  ARRAYS: X(NX), Y(NY), Z(NZ)
C--------I------I-----I------------------------------------------------
C PX,PY, I  DP  I  -  I  WORKAREAS FOR THE COORDINATES, THE SOLUTION
C PZ,PU  I      I     I  AND THE DERIVATIVES.
C        I      I     I  ARRAYS: PX(MV),PY(MV),PZ(MV),PU(N,NK)
C--------I------I-----I------------------------------------------------
C U222   I  DP  I IN  I  VALUES FOR THE SOLUTION AND THE DERIVATIVES
C        I      I     I  AT GRIDPOINT (2,2,2)      ARRAY: U222(M222,NK)
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  ARRAYBOUND FOR U222 (ELL: M222=7, PAR: M222=8)
C--------I------I-----I------------------------------------------------
C LX,LY, I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C LZ     I      I     I
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, IA, IB, IZ, I1, I2, I3, IK, J, PFE, IOS, NR, NV, RN,
     &        RN3, NXNY, NYNZ
      DOUBLE PRECISION    U
      EXTERNAL FDS317
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NXNY=NX*NY
      NYNZ=NY*NZ
      I=0
      J=0
C
C***  LOOP OVER ALL GRID-POINTS, SORTING OF THE COORDINATES
C
      DO 5 I3=1,NZ
      DO 5 I2=1,NY
      DO 5 I1=1,NX
         I=I+1
C
C***     FOR BOUNDARY-POINTS THE COORDINATES (2,2,2) ARE TAKEN
C
         IF((I1.EQ.1.OR.I1.EQ.NX).AND..NOT.LX .OR.
     &      (I2.EQ.1.OR.I2.EQ.NY).AND..NOT.LY .OR.
     &      (I3.EQ.1.OR.I3.EQ.NZ).AND..NOT.LZ)    THEN
            PX(I)=X(2)
            PY(I)=Y(2)
            PZ(I)=Z(2)
         ELSE
            PX(I)=X(I1)
            PY(I)=Y(I2)
            PZ(I)=Z(I3)
         ENDIF
         IF(I.EQ.MV) THEN
C
C***        WRITING OF THE COORDINATES OF MV INNER GRIDPOINTS
C
            NR=J*(3+M222*NK)+1
            CALL FDS318(IFILE3,IOS,NR,RL,PFE,PX,MV,IERR,UR3)
            CALL FDS318(IFILE3,IOS,NR,RL,PFE,PY,MV,IERR,UR3)
            CALL FDS318(IFILE3,IOS,NR,RL,PFE,PZ,MV,IERR,UR3)
            I=0
            J=J+1
         ENDIF
   5  CONTINUE
C
C***  WRITING OF THE REMAINING COORDINATES
C
      IF(I.GT.0) THEN
         NR=J*(3+M222*NK)+1
         CALL FDS318(IFILE3,IOS,NR,RL,PFE,PX,I,IERR,UR3)
         CALL FDS318(IFILE3,IOS,NR,RL,PFE,PY,I,IERR,UR3)
         CALL FDS318(IFILE3,IOS,NR,RL,PFE,PZ,I,IERR,UR3)
      ENDIF
C
C***  PRESORTING OF THE SOLUTION AND THE DERIVATIVES
C
      DO 300 I2=1,M222
      IF(I2.EQ.1) THEN
         RN=1
         CALL FDS332(PU,N,NK,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
         RN=1
      ELSE
         CALL FDS332(PU,N,NK,MV,IFILE2,RN,RL,UR2,FDS317,IERR)
      ENDIF
      DO 260 IK=1,NK
      U=U222(I2,IK)
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 210 I=1,NYNZ
            PU(IA,IK) = U
            PU(IB,IK) = U
            IA = IA + NX
            IB = IB + NX
 210     CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 230 IZ=1,NZ
            IA = (IZ - 1) * NXNY
            IB = (IZ - 1) * NX
            DO 215 I=1,NX
               PU(I+IA,IK) = U
 215        CONTINUE
            IA = (IZ - 1) * NXNY + (NY - 1) * NX
            DO 225 I=1,NX
               PU(I+IA,IK) = U
 225        CONTINUE
 230    CONTINUE
      ENDIF
      IF(.NOT.LZ) THEN
         DO 240 I=1,NXNY
            PU(I,IK) = U
 240     CONTINUE
         IA = (NZ - 1) * NXNY
         DO 250 I=1,NXNY
            PU(I+IA,IK) = U
 250     CONTINUE
      ENDIF
 260  CONTINUE
      NV=MV
      DO 290 J=1,IN
         RN3=4+(I2-1)*NK+(J-1)*(3+M222*NK)
         IA=1+(J-1)*MV
         IF(J.EQ.IN) NV=N-(J-1)*MV
         DO 280 IK=1,NK
            CALL FDS318(IFILE3,IOS,RN3,RL,PFE,PU(IA,IK),NV,IERR,UR3)
 280     CONTINUE
 290  CONTINUE
      IF(IOS.NE.0) THEN
         IERR=IFILE3*10000+433
         RETURN
      ENDIF
 300  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS433----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::114     ,,,,,FDS434.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS434 (NK,NX,NY,NZ,N,MV,IN,IFILE1,IFILE2,UR1,UR2,
     &           RL,P,P1,P2,P3,P4,P5,P6,DEF,DEFMAX,LX,LY,LZ,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 4    READS THE VALUES OF THE INNER DEFECT FOR    ***
C**      ALL N = NX * NY * NZ  GRID-POINTS IN PARTS OF MV VALUES    ***
C**      FROM FILE 1. THESE VALUES ARE MERGED WITH THE BOUNDARY     ***
C**      VALUES, WHICH ARE STORED ON FILE 1 BEHIND THE INNER VALUES.***
C**      THE NEGATIVE MERGED VECTOR IS WRITTEN IN NK-NX-NY-NZ-      ***
C**      SORTING ON FILE 2. IN THE CASE OF A PERIODIC DIRECTION     ***
C**      NO BOUNDARY VALUES ARE READ AND MERGED.                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NK,NX,NY,NZ,N,MV,IN,IFILE1,IFILE2,UR1,UR2,RL,IERR
      DOUBLE PRECISION  P(N,NK),P1(1),P2(1),P3(1),P4(1),P5(1),P6(1),
     &                  DEF(NK,NX,NY,NZ),DEFMAX
      LOGICAL  LX, LY, LZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS.
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY * NZ
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  =( N / MV ) ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS
C 2      I      I     I
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C P      I  DP  I  -  I  WORKARRAY FOR THE INNER VALUES
C        I      I     I  ARRAY : P(N,NK)
C--------I------I-----I------------------------------------------------
C P1,P2, I  DP  I  -  I  WORKARRAYS FOR BOUNDARIES X = XAN / XEN
C        I      I     I  ARRAYS : P1/2(NY,NZ)
C--------I------I-----I------------------------------------------------
C P3,P4, I  DP  I  -  I  WORKARRAYS FOR BOUNDARIES Y = YAN / YEN
C        I      I     I  ARRAYS : P3/4(NX,NZ)
C--------I------I-----I------------------------------------------------
C P5,P6, I  DP  I  -  I  WORKARRAYS FOR BOUNDARIES Z = ZAN / ZEN
C        I      I     I  ARRAYS : P5/6(NX,NY)
C--------I------I-----I------------------------------------------------
C DEF    I  DP  I  -  I  WORKARRAY FOR THE COMPLETE DEFECT
C        I      I     I  ARRAY : DEF(NK,NX,NY,NZ)
C--------I------I-----I------------------------------------------------
C DEFMAX I  DP  I OUT I  MAXIMUM OF THE DEFECT
C--------I------I-----I------------------------------------------------
C LX,LY, I  L   I IN  I  = TRUE INDICATES A PERIODIC DIRECTION
C LZ     I      I     I
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  IA,IB,IK,IM,IZ,I,J,NV,RNB,RNI,IOS,PFE,NXNY,NYNZ
      DOUBLE PRECISION  ZERO,FDS101
      EXTERNAL FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NXNY = NX*NY
      NYNZ = NY*NZ
      DO 300 IK = 1,NK
         RNB = IN * NK + IK
C
C***     READ THE BOUNDARY DEFECT
C
         IF(LX) GO TO 110
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P1,NYNZ,IERR,UR1)
         RNB = RNB - 1 + NK
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P2,NYNZ,IERR,UR1)
         RNB = RNB - 1 + NK
C
 110     IF(LY) GO TO 120
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,DEF,NZ*NX,IERR,UR1)
         CALL FDS411(NZ,NX,DEF,P3)
         RNB = RNB - 1 + NK
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,DEF,NZ*NX,IERR,UR1)
         CALL FDS411(NZ,NX,DEF,P4)
         RNB = RNB - 1 + NK
C
 120     IF(LZ) GO TO 130
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P5,NXNY,IERR,UR1)
         RNB = RNB - 1 + NK
         CALL FDS317(IFILE1,IOS,RNB,RL,PFE,P6,NXNY,IERR,UR1)
C
C***     READ THE DEFECT AT MV INNER GRIDPOINTS
C
 130     RNI = IK
         NV = MV
         DO 150 J=1,IN
            IF(J.EQ.IN) NV=N-(IN-1)*MV
            IA = 1+(J-1)*MV
            CALL FDS317(IFILE1,IOS,RNI,RL,PFE,P(IA,IK),NV,IERR,UR1)
            RNI = RNI-1+NK
 150     CONTINUE
C
C***  MERGE THE INNER VALUES WITH BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 210 I=1,NYNZ
            P(IA,IK) = P1(I)
            P(IB,IK) = P2(I)
            IA = IA + NX
            IB = IB + NX
 210     CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 230 IZ=1,NZ
            IA = (IZ - 1) * NXNY
            IB = (IZ - 1) * NX
            DO 215 I=1,NX
               P(I+IA,IK) = P3(I+IB)
 215        CONTINUE
            IA = (IZ - 1) * NXNY + (NY - 1) * NX
            DO 225 I=1,NX
               P(I+IA,IK) = P4(I+IB)
 225        CONTINUE
 230    CONTINUE
      ENDIF
      IF(.NOT.LZ) THEN
         DO 240 I=1,NXNY
            P(I,IK) = P5(I)
 240     CONTINUE
         IA = (NZ - 1) * NXNY
         DO 250 I=1,NXNY
            P(I+IA,IK) = P6(I)
 250     CONTINUE
      ENDIF
      DO 260 I=1,N
         P(I,IK) = -P(I,IK)
 260  CONTINUE
 300  CONTINUE
      DEFMAX = FDS101(N*NK,P,ZERO)
      CALL FDS411(N,NK,P,DEF)
C
C***  WRITE MERGED DEFECT ON FILE 2
C
      IM = N*NK/MV
      IF(IM*MV.LT.N*NK) IM=IM+1
      RNI = 3*(IN*NK+IM)+1
      CALL FDS331(DEF,N*NK,MV,IFILE2,RNI,RL,UR2,FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS434----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::115     ,,,,,FDS435.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS435 (NX,NY,NZ,MV,IFILE1,UR1,NARC,INCR,IFILE2,UR2,
     &           NR1,NR2,NR3,NR4,NR5,NR6,RL,RL2,P,P1,P2,P3,P4,P5,P6,
     &           LX,LY,LZ)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 5    READS THE VALUES OF A JACOBIAN-ELEMENT FOR  ***
C**      ALL NX*NY*NZ GRID-POINTS IN PARTS OF MV VALUES FROM FILE1  ***
C**      BEGINNING AT POSITION NARC. THESE VALUES ARE MERGED WITH   ***
C**      THE BOUNDARY VALUES, WHICH ARE READ FROM FILE2 AT THE      ***
C**      RECORDNUMBERS NR1,...,NR6. THE MERGED VECTOR OF LENGTH MV  ***
C**      IS WRITTEN ON THE SAME RECORD OF FILE1 AS THE INNER        ***
C**      VALUES WERE READ FROM.                                     ***
C**      IN THE CASE OF A PERIODIC DIRECTION NO BOUNDARY VALUES     ***
C**      ARE READ AND MERGED.                                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                       ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NX, NY, NZ, MV, IFILE1, UR1, NARC, INCR, IFILE2, UR2,
     &         NR1, NR2, NR3, NR4, NR5, NR6, RL, RL2
      DOUBLE PRECISION  P(1),P1(1),P2(1),P3(1),P4(1),P5(1),P6(1)
      LOGICAL  LX,LY,LZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE1 I  I   I IN  I  UNIT-NUMBER OF FILE1
C--------I------I-----I------------------------------------------------
C UR1    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C NARC   I  I   I I/O I  NUMBER OF THE RECORD OF FILE1, FROM WHICH THE
C        I      I     I  FIRST MV VALUES WERE READ      (OUT: NARC+1)
C--------I------I-----I------------------------------------------------
C INCR   I  I   I IN  I  INCREMENT FOR THE NEXT RECORDNUMBER OF FILE1
C--------I------I-----I------------------------------------------------
C IFILE2 I  I   I IN  I  UNIT-NUMBER OF FILE2
C--------I------I-----I------------------------------------------------
C UR2    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C NR1    I  I   I IN  I  NUMBER OF THE RECORD OF FILE2, FROM WHICH THE
C        I      I     I  BOUNDARY VALUES FOR X=XAN WERE READ.
C        I      I OUT I  NR1+1
C--------I------I-----I------------------------------------------------
C NR2    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY X=XEN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR3    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Y=YAN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR4    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Y=YEN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR5    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Z=ZAN (OUT +1)
C--------I------I-----I------------------------------------------------
C NR6    I  I   I I/O I  RECORDNUMBER FOR BOUNDARY Z=ZEN (OUT +1)
C--------I------I-----I------------------------------------------------
C RL,RL2 I  I   I IN  I  RECORD-LENGTH ( RL2 FOR FILE 2 )
C--------I------I-----I------------------------------------------------
C P      I  DP  I  -  I  WORKAREA FOR THE INNER VALUES     ARRAY: P(N)
C--------I------I-----I------------------------------------------------
C P1,P2  I  DP  I  -  I  WORKAREAS FOR BOUNDARIES X=XAN/XEN
C        I      I     I  ARRAYS: P1/2(NY,NZ)
C--------I------I-----I------------------------------------------------
C P3,P4  I  DP  I  -  I  WORKAREAS FOR BOUNDARIES Y=YAN/YEN
C        I      I     I  ARRAYS: P3/4(NX,NZ)
C--------I------I-----I------------------------------------------------
C P5,P6  I  DP  I  -  I  WORKAREAS FOR BOUNDARIES Z=ZAN/ZEN
C        I      I     I  ARRAYS: P5/6(NX,NY)
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C LZ     I      I     I
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  I,IA,IB,IN,IZ,J,N,PFE,IOS,IERR,NRI,NV,NXNY,NYNZ
C
C
C**** START OF CALCULATION :
C     ---------------------
      NXNY = NX * NY
      NYNZ = NY * NZ
      N  = NX * NY * NZ
      IN = N / MV
      IF(N-IN*MV.GT.0) IN=IN+1
C
C***  READING OF THE BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         CALL FDS317(IFILE2,IOS,NR1,RL2,PFE,P1,NYNZ,IERR,UR2)
         CALL FDS317(IFILE2,IOS,NR2,RL2,PFE,P2,NYNZ,IERR,UR2)
      ENDIF
      IF(.NOT.LY) THEN
         CALL FDS317(IFILE2,IOS,NR3,RL2,PFE,P,NZ*NX,IERR,UR2)
         CALL FDS411(NZ,NX,P,P3)
         CALL FDS317(IFILE2,IOS,NR4,RL2,PFE,P,NZ*NX,IERR,UR2)
         CALL FDS411(NZ,NX,P,P4)
      ENDIF
      IF(.NOT.LZ) THEN
         CALL FDS317(IFILE2,IOS,NR5,RL2,PFE,P5,NXNY,IERR,UR2)
         CALL FDS317(IFILE2,IOS,NR6,RL2,PFE,P6,NXNY,IERR,UR2)
      ENDIF
C
C***  READING OF THE INNER VALUES
C
      NRI = NARC
      IA  = 1
      NV  = MV
      DO 10 J=1,IN
         IF(J.EQ.IN) NV=N-(IN-1)*MV
         CALL FDS317(IFILE1,IOS,NRI,RL,PFE,P(IA),NV,IERR,UR1)
         NRI = NRI + INCR - 1
         IA = IA + NV
   10 CONTINUE
C
C***  MERGING THE INNER VALUES WITH BOUNDARY VALUES
C
      IF(.NOT.LX) THEN
         IA = 1
         IB = NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 5 I=1,NYNZ
            P(IA) = P1(I)
            P(IB) = P2(I)
            IA = IA + NX
            IB = IB + NX
    5    CONTINUE
      ENDIF
      IF(.NOT.LY) THEN
         DO 20 IZ=1,NZ
            IA = (IZ - 1) * NXNY
            IB = (IZ - 1) * NX
            DO 15 I=1,NX
               P(I+IA) = P3(I+IB)
   15       CONTINUE
   20    CONTINUE
         DO 30 IZ=1,NZ
            IA = (IZ - 1) * NXNY + (NY - 1) * NX
            IB = (IZ - 1) * NX
            DO 25 I=1,NX
               P(I+IA) = P4(I+IB)
   25       CONTINUE
   30   CONTINUE
      ENDIF
      IF(.NOT.LZ) THEN
         DO 34 I=1,NXNY
            P(I) = P5(I)
   34    CONTINUE
         IA = (NZ - 1) * NXNY
         DO 36 I=1,NXNY
            P(I+IA) = P6(I)
   36    CONTINUE
      ENDIF
C
C***  WRITING OF THE MERGED VECTOR
C
      NRI = NARC
      IA  = 1
      NV  = MV
      DO 40 J=1,IN
         IF(J.EQ.IN) NV=N-(IN-1)*MV
         CALL FDS318(IFILE1,IOS,NRI,RL,PFE,P(IA),NV,IERR,UR1)
         NRI = NRI + INCR - 1
         IA = IA + NV
   40 CONTINUE
      NARC = NARC + 1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS435----------------------------------------------------
      E    N    D
C:::116     ,,,,,FDS436.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS436 (ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &           HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,LXX,LYY,LZZ,
     &           LZYKL1,LZYKL2,IFILE,RL,RN,UR,NH1,NH2,I4END,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 6    WRITES THE DIFFERENCE-FORMULAE FOR THE      ***
C**      FIRST AND SECOND DERIVATIVE IN THE X-,Y- AND Z- DIRECTION  ***
C**      IN THAT WAY ON FILE, IN WHICH THEY WILL BE USED BY THE     ***
C**      COMPUTATION OF THE MATRIX QD.                              ***
C**      IN ONE CALL OF FDS436 THE FORMULAE FOR I4END BLOCK-        ***
C**      DIAGONALS ARE WRITTEN ON FILE.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,IFILE,RL,RN,UR,
     &         NH1(3),NH2,I4END,IERR
      DOUBLE PRECISION  ABX(MNX,MLF),ABXX(MNX,MLF),ABY(MNY,MLF),
     &                  ABYY(MNY,MLF),ABZ(MNZ,MLF),ABZZ(MNZ,MLF),
     &                  HX(MV),HXX(MV),HY(MV),HYY(MV),HZ(MV),HZZ(MV)
      LOGICAL  LXX,LYY,LZZ,LZYKL1,LZYKL2
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABX,XX I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE X-DIRECTION
C        I      I     I  ARRAYS : ABX(MNX,MLF) , ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABY,YY I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Y-DIRECTION
C        I      I     I  ARRAYS : ABY(MNY,MLF) , ABYY(MNY,MLF)
C--------I------I-----I------------------------------------------------
C ABZ,ZZ I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Z-DIRECTION
C        I      I     I  ARRAYS : ABZ(MNZ,MLF) , ABZZ(MNZ,MLF)
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKAREAS FOR THE SORTED
C HY,HYY I      I     I  FORMULAES (MV VALUES)
C HZ,HZZ I      I     I  ARRAYS : H..(MV)
C--------I------I-----I------------------------------------------------
C LXX    I  L   I IN  I  X-FORMULA IS USED
C--------I------I-----I------------------------------------------------
C LYY    I  L   I IN  I  Y-FORMULA IS USED
C--------I------I-----I------------------------------------------------
C LZZ    I  L   I IN  I  Z-FORMULA IS USED
C--------I------I-----I------------------------------------------------
C LZYKL1 I  L   I IN  I  PERIODIC ( UPPER CASE )
C--------I------I-----I------------------------------------------------
C LZYKL2 I  L   I IN  I  PERIODIC ( LOWER CASE )
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MNZ,MLFI      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C NH1    I  I   I IN  I  INFORMATION TO COMPUTE THE COLUMN IN THE
C        I      I     I  DIFFERENCE FORMULAE
C        I      I     I  ARRAY :  NH1(3)
C--------I------I-----I------------------------------------------------
C NH2    I  I   I IN  I  INFORMATION ABOUT THE PERIODIC PART OF THE
C        I      I     I  DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C I4END  I  I   I IN  I  NUMBER OF BLOCK-DIAGONALS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, I1, I2, I3, I4, IX, IY, IZ, IOS, PFE
      DOUBLE PRECISION  ZERO
C***                                                                ***
C***       CONSTANTS :                                              ***
C***       ---------       :                                        ***
C***                                                                ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  LOOP OVER I4END BLOCK-DIAGONALS
C
      DO 100 I4 = 1,I4END
C
C***  COLUMN IN THE DIFFERENCE FORMULAE
C
      IX = NH1(1) - I4
      IY = NH1(2) - I4
      IZ = NH1(3) - I4
      I = 0
C
C***  LOOP OVER ALL  NX * NY * NZ  GRID-POINTS
C
      DO 90 I3 = 1,NZ
      DO 80 I2 = 1,NY
      DO 70 I1 = 1,NX
        I = I + 1
        IF(LXX) THEN
          IF(LZYKL1.AND.I1.GT.I4+NH2 .OR.
     &       LZYKL2.AND.I1.LE.I4+NH2) THEN
             HX(I)  = ZERO
             HXX(I) = ZERO
          ELSE
             HX(I)  = ABX(I1,IX)
             HXX(I) = ABXX(I1,IX)
          END IF
        END IF
        IF(LYY) THEN
          IF(LZYKL1.AND.I2.GT.I4+NH2 .OR.
     &       LZYKL2.AND.I2.LE.I4+NH2) THEN
             HY(I)  = ZERO
             HYY(I) = ZERO
          ELSE
             HY(I)  = ABY(I2,IY)
             HYY(I) = ABYY(I2,IY)
          END IF
        END IF
        IF(LZZ) THEN
          IF(LZYKL1.AND.I3.GT.I4+NH2 .OR.
     &       LZYKL2.AND.I3.LE.I4+NH2) THEN
             HZ(I)  = ZERO
             HZZ(I) = ZERO
          ELSE
             HZ(I)  = ABZ(I3,IZ)
             HZZ(I) = ABZZ(I3,IZ)
          END IF
        END IF
        IF(I.EQ.MV) THEN
C
C***  WRITE THE DIFFERENCE FORMULAE FOR MV GRID-POINTS
C
          IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HX ,MV,IERR,UR)
          IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HXX,MV,IERR,UR)
          IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HY ,MV,IERR,UR)
          IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HYY,MV,IERR,UR)
          IF(LZZ) CALL FDS318(IFILE,IOS,RN,RL,PFE,HZ ,MV,IERR,UR)
          IF(LZZ) CALL FDS318(IFILE,IOS,RN,RL,PFE,HZZ,MV,IERR,UR)
          I = 0
          IF(IOS.NE.0) THEN
             IERR = 436 + IFILE * 10000
             RETURN
          END IF
        END IF
   70 CONTINUE
   80 CONTINUE
   90 CONTINUE
      IF(I.GT.0) THEN
C
C***  WRITE THE DIFFERENCE FORMULAE FOR THE LAST I  GRID-POINTS
C
        IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HX ,I,IERR,UR)
        IF(LXX) CALL FDS318(IFILE,IOS,RN,RL,PFE,HXX,I,IERR,UR)
        IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HY ,I,IERR,UR)
        IF(LYY) CALL FDS318(IFILE,IOS,RN,RL,PFE,HYY,I,IERR,UR)
        IF(LZZ) CALL FDS318(IFILE,IOS,RN,RL,PFE,HZ ,I,IERR,UR)
        IF(LZZ) CALL FDS318(IFILE,IOS,RN,RL,PFE,HZZ,I,IERR,UR)
          IF(IOS.NE.0) THEN
             IERR = 436 + IFILE * 10000
             RETURN
          END IF
      END IF
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS436----------------------------------------------------
      E    N    D
C:::117     ,,,,,FDS437.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS437(MNX,MNY,MNZ,NX,NY,NZ,NK,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 7   PACKS THE INPUT-VECTOR U1 FROM MNX-MNY-MNZ-  ***
C**      NK-SORTING, RESULTING IN OUTPUT-VECTOR U2 IN NX-NY-NZ-NK-  ***
C**      SORTING.                                                   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   MNX,MNY,MNZ,NX,NY,NZ,NK
      DOUBLE PRECISION  U1(MNX,MNY,MNZ,NK), U2(NX,NY,NZ,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  ARRAY BOUNDS FOR U1
CMNZ     I      I     I
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  ARRAY BOUNDS FOR U2
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR
C        I      I     I  ARRAY : U2(NX,NY,NZ,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I3, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 40 I4=1,NK
      DO 30 I3=1,NZ
      DO 20 I2=1,NY
      DO 10 I1=1,NX
         U2(I1,I2,I3,I4) = U1(I1,I2,I3,I4)
   10 CONTINUE
   20 CONTINUE
   30 CONTINUE
   40 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS437----------------------------------------------------
      E    N    D
C:::118     ,,,,,FDS438.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 8   ADDS THE RIGHT ENDS IN PERIODIC DIRECTIONS.  ***
C**      THE VALUES ARE TAKEN FROM THE LEFT END. INPUT-VECTOR U1    ***
C**      (NX-NY-NZ-NK-SORTING) IS ASSIGNED TO OUTPUT-VECTOR U2      ***
C**      (MNX-MNY-MNZ-NK-SORTING).                                  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   NX,NY,NZ,NK,MNX,MNY,MNZ
      DOUBLE PRECISION  U1(NX,NY,NZ,NK), U2(MNX,MNY,MNZ,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  ARRAY BOUNDS FOR U1
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  ARRAY BOUNDS FOR U2
CMNZ     I      I     I
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR WITHOUT RIGHT ENDS IN PERIODIC
C        I      I     I  DIRECTIONS.
C        I      I     I  ARRAY : U1(NX,NY,NZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR WITH RIGHT ENDS.
C        I      I     I  ARRAY : U2(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I3, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 I4=1,NK
      DO  30 I3=1,NZ
      DO  20 I2=1,NY
      DO  10 I1=1,NX
         U2(I1,I2,I3,I4) = U1(I1,I2,I3,I4)
   10 CONTINUE
   20 CONTINUE
   30 CONTINUE
      IF(MNX.GT.NX) THEN
         DO 50 I3=1,NZ
         DO 40 I2=1,NY
            U2(MNX,I2,I3,I4) = U2(1,I2,I3,I4)
   40    CONTINUE
   50    CONTINUE
      ENDIF
      IF(MNY.GT.NY) THEN
         DO 70 I3=1,NZ
         DO 60 I1=1,MNX
            U2(I1,MNY,I3,I4) = U2(I1,1,I3,I4)
   60    CONTINUE
   70    CONTINUE
      ENDIF
      IF(MNZ.GT.NZ) THEN
         DO 90 I2=1,MNY
         DO 80 I1=1,MNX
            U2(I1,I2,MNZ,I4) = U1(I1,I2,1,I4)
   80    CONTINUE
   90    CONTINUE
      ENDIF
  100 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS438----------------------------------------------------
      E    N    D
C:::119     ,,,,,FDS439.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS439(NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX,U1,U2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 3 9   ADDS THE RIGHT ENDS IN PERIODIC DIRECTIONS.  ***
C**      THE VALUES ARE TAKEN FROM THE LEFT END. INPUT-VECTOR U1    ***
C**      (NX-NY-NZ-NK-SORTING) IS ASSIGNED TO OUTPUT-VECTOR U2      ***
C**      (NXMAX-NXMAX-NXMAX-NK-SORTING).                            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX
      DOUBLE PRECISION   U1(NX,NY,NZ,NK), U2(NXMAX,NXMAX,NXMAX,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  ARRAY BOUNDS FOR U1
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
CMNX,MNY,I  I   I IN  I  NUMBER OF GRIDPOINTS INCLUDING THE RIGHT ENDS
CMNZ     I      I     I  IN PERIODIC DIRECTIONS.
C--------I------I-----I------------------------------------------------
C NXMAX  I  I   I IN  I  ARRAY BOUND FOR U2
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  INPUT-VECTOR WITHOUT RIGHT ENDS IN PERIODIC
C        I      I     I  DIRECTIONS.
C        I      I     I  ARRAY : U1(NX,NY,NZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  OUTPUT-VECTOR WITH RIGHT ENDS.
C        I      I     I  ARRAY : U2(NXMAX,NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I1 ,I2, I3, I4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 I4=1,NK
      DO  30 I3=1,NZ
      DO  20 I2=1,NY
      DO  10 I1=1,NX
         U2(I1,I2,I3,I4) = U1(I1,I2,I3,I4)
   10 CONTINUE
   20 CONTINUE
   30 CONTINUE
      IF(MNX.GT.NX) THEN
         DO 50 I3=1,NZ
         DO 40 I2=1,NY
            U2(MNX,I2,I3,I4) = U2(1,I2,I3,I4)
   40    CONTINUE
   50    CONTINUE
      ENDIF
      IF(MNY.GT.NY) THEN
         DO 70 I3=1,NZ
         DO 60 I1=1,MNX
            U2(I1,MNY,I3,I4) = U2(I1,1,I3,I4)
   60    CONTINUE
   70    CONTINUE
      ENDIF
      IF(MNZ.GT.NZ) THEN
         DO 90 I2=1,MNY
         DO 80 I1=1,MNX
            U2(I1,I2,MNZ,I4) = U1(I1,I2,1,I4)
   80    CONTINUE
   90    CONTINUE
      ENDIF
  100 CONTINUE
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS439----------------------------------------------------
      E    N    D
C:::120     ,,,,,FDS441.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS441 (M,N,NK,NDT,ND,MD,IDIAG,LDIAG,IFILE1,MV,
     &           RL,UR1,IFILE2,UR2,D,DT,ILIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 4 1    READS THE DIAGONALPARTS, WHICH ARE COMPUTED ***
C**      OF ONE ELEMENT OF A JACOBI-MATRIX, FROM DIRECT-ACCESS-     ***
C**      FILE1, MERGES THEM TO COMPLETE DIAGONALS OF THE MATRIX OF  ***
C**      THE LINEAR EQUATIONS SYSTEM AND WRITES THE DIAGONALS ON    ***
C**      SEQUENTIAL FILE2.                                          ***
C**      THIS SUBPROGRAM COMPUTES ALL INFORMATION FOR THE LINEAR    ***
C**      EQUATION-SOLVER.                                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  M,N,NK,NDT,ND,MD,IDIAG(3,NDT),IFILE1,MV,RL,
     &         UR1,IFILE2,UR2,IERR,ILIN(1)
      LOGICAL  LDIAG(MD)
      DOUBLE PRECISION  D(M) , DT(N)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  ARRAY BOUND ( M = N * NK )
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NDT    I  I   I IN  I  NUMBER OF DIAGONALPARTS
C--------I------I-----I------------------------------------------------
C ND     I  I   I OUT I  NUMBER OF DIAGONALS
C--------I------I-----I------------------------------------------------
C MD     I  I   I IN  I  ARRAY BOUND ( MD = 2 * M - 1 )
C--------I------I-----I------------------------------------------------
C IDIAG  I  I   I IN  I  INFORMATION ABOUT THE DIAGONALPARTS
C        I      I     I  1 : DIAGONALNUMBER
C        I      I     I  2 : START OF THE DIAGONALPART
C        I      I     I  3 : RECORD NUMBER ON FILE 1
C        I      I     I  ARRAY :  IDIAG(3 , NDT)
C--------I------I-----I------------------------------------------------
C LDIAG  I  L   I OUT I  INFORMATION ABOUT THE DIAGONALS
C        I      I     I  LDIAG(I)=.TRUE. MEANS DIAGONAL I IS OCCUPIED
C        I      I     I  ARRAY :  LDIAG(MD)
C--------I------I-----I------------------------------------------------
C IFILE1 I  I   I IN  I  UNIT NUMBER OF FILE 1
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD
C        I      I     I  OF THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C UR1    I  I   I I/O I  SYNCHRONISATION-VARIABLE
C--------I------I-----I------------------------------------------------
C IFILE2 I  I   I IN  I  UNIT NUMBER OF FILE 2
C--------I------I-----I------------------------------------------------
C UR2    I  I   I I/O I  SYNCHRONISATION-VARIABLE
C--------I------I-----I------------------------------------------------
C D      I  DP  I  -  I  WORKARRAY FOR 1 DIAGONAL
C        I      I     I  ARRAY :  D ( M )
C--------I------I-----I------------------------------------------------
C DT     I  DP  I  -  I  WORKARRAY FOR 1 DIAGONALPART
C        I      I     I  ARRAY :  DT ( N )
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION VECTOR
C        I      I     I  ILIN(14) =0/1-> DON'T PACK DIAGONALS
C        I      I     I  ILIN(14) = 2 -> PACK DIAGONALS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER   ID,IDNR,IDNRNE,IAN,IEN,IDS,RN,RN2,IA,I,IK,K,
     &          NKQ,NKQM,IOS,PFE,NA,NL,IAV,MVL,NV,LOUT,IDOKU,PACK,
     &          JP1,JP2,PFE2,INDMAX
      EXTERNAL  FDS317
      DOUBLE PRECISION  ZERO
      PARAMETER  ( ZERO=0.0 , MVL=65535 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INITIALIZATIONS :
C
      LOUT  = ILIN(12)
      IDOKU = ILIN(13)
      PACK=ILIN(14)
      NKQ  = NK * NK
      NKQM = NKQ - 1
      IDNR = 0
      ID   = 0
      JP1  = 0
      IF(PACK.EQ.2) THEN
         RN2=-1
         NA = 1
         NL = 1
         CALL FDS311(IFILE2,IOS,RN2,PFE,PFE2,D(NA),NL,UR2,INDMAX,JP2)
      ELSE
         CALL FDS305(IFILE2,IOS,RN2,UR2)
         PFE2 = 1
      ENDIF
      K=0
    5 IAV=K
      NV=MIN(MD-K,MVL)
      K=K+NV
      DO 10 I = 1,NV
         LDIAG(I+IAV) = .FALSE.
   10 CONTINUE
      IF(K.LT.MD) GO TO 5
C
C***  LOOK FOR THE NEXT APPEARING DIAGONAL NUMBER
C
   50 IDNRNE = MD + 1
      IAN = MAX(ID - NKQM + NK,1)
      IEN = MIN(NDT , ID + NKQ)
      DO  90 IDS = IAN,IEN
         IF(IDIAG(1,IDS).GT.IDNR .AND. IDIAG(1,IDS).LT.IDNRNE) THEN
            ID = IDS
            IDNRNE = IDIAG(1,ID)
         END IF
   90 CONTINUE
C
C***  IF IDNRNE = MD + 1  NO MORE DIAGONAL NUMBER WAS FOUND
C
      IF(IDNRNE .EQ. MD + 1) GOTO 200
C
C***  INFORMATION ABOUT DIAGONAL NUMBER IDNR
C
      IDNR = IDNRNE
      LDIAG(IDNR) = .TRUE.
      RN = IDIAG(3,ID)
      IA = IDIAG(2,ID)-NK
      NA = 1
      NL = IDNR
      IF(IDNR .GT. M) THEN
         NA = IDNR - M + 1
         NL = 2 * M - IDNR
      END IF
C
C***  READ DIAGONALPART
C
      CALL FDS331(DT,N,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
      IF(NK .EQ. 1) GO TO 170
C
C***  WRITE DIAGONALPART INTO THE DIAGONALVECTOR
C
      K=0
  100 IAV=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 105 I = 1,NV
         D(I+IAV) = ZERO
  105 CONTINUE
      IF(K.LT.M) GO TO 100
      K=0
  108 IAV=K
      NV=MIN(N-K,MVL)
      K=K+NV
      DO 110 I = IAV+1,K
         D(IA + I * NK) = DT(I)
  110 CONTINUE
      IF(K.LT.N) GO TO 108
C
C***  LOOK FOR MORE DIAGONALPARTS WITH THE SAME DIAGONAL NUMBER
C
      DO 150 IK = 2,NK
      IAN = ID + 1
      IEN = MIN(NDT , ID + NKQM)
      DO 120 IDS = IAN,IEN
         IF(IDIAG(1,IDS) .EQ. IDNR) THEN
            ID = IDS
            GO TO 130
         END IF
  120 CONTINUE
C
C***  IF LEAVING LOOP 120 NO MORE DIAGONALPARTS WERE FOUND
C
      GO TO 160
  130 RN = IDIAG(3,ID)
      IA = IDIAG(2,ID)-NK
C
C***  READ DIAGONALPART
C
      CALL FDS331(DT,N,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
C
C***  WRITE DIAGONALPART INTO THE DIAGONAL VECTOR
C
      K=0
  135 IAV=K
      NV=MIN(N-K,MVL)
      K=K+NV
      DO 140 I = IAV+1,K
         D(IA + I * NK) = DT(I)
  140 CONTINUE
      IF(K.LT.N) GO TO 135
  150 CONTINUE
C
C***  ALL DIAGONALPARTS WITH DIAGONAL NUMBER IDNR ARE WRITTEN
C     IN THE DIAGONAL VECTOR
C***  WRITE DIAGONAL VECTOR ON SEQUENTIAL FILE 2 STARTING WITH
C     INDEX NA AND LENGTH NL
C
  160 CONTINUE
      IF(PACK.EQ.2) THEN
         CALL FDS311(IFILE2,IOS,RN2,PFE,PFE2,D(NA),NL,UR2,INDMAX,JP2)
         JP1 = JP1 + NL
      ELSE
         CALL FDS310(IFILE2,IOS,RN2,PFE2,D(NA),NL,UR2)
      ENDIF
      IF(IOS.NE.0) THEN
         IERR = 441 + IFILE2 * 10000
         RETURN
      ENDIF
      GO TO 50
C
C***  SPECIAL TREATMENT FOR NK = 1
C
  170 CONTINUE
      IF(PACK.EQ.2) THEN
         CALL FDS311(IFILE2,IOS,RN2,PFE,PFE2,DT(NA),NL,UR2,INDMAX,JP2)
         JP1 = JP1 + NL
      ELSE
         CALL FDS310(IFILE2,IOS,RN2,PFE2,DT(NA),NL,UR2)
      ENDIF
      IF(IOS.NE.0) THEN
         IERR = 441 + IFILE2 * 10000
         RETURN
      ENDIF
      GO TO 50
C
C***  ALL DIAGONALS HAVE BEEN WRITTEN ON FILE 2
C     COMPUTE THE NUMBER OF DIAGONALS
C
  200 ND = 0
      DO 210 I = 1,MD
         IF(LDIAG(I))  ND = ND + 1
  210 CONTINUE
      IF (IDOKU.GE.2.AND.ILIN(14).EQ.2) THEN
         WRITE(LOUT,70) JP1
         WRITE(LOUT,80) JP2
         WRITE(LOUT,85) INDMAX
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 70      FORMAT(4X,'SIZE OF MATRIX:       ',I10)
 80      FORMAT(4X,'SIZE OF PACKED MATRIX:',I10)
 85      FORMAT(4X,'STORAGE USED BY IDQP IN /FDSIND/:',I10)
C-----END OF FDS441----------------------------------------------------
      E    N    D
C:::121     ,,,,,FDS460.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS460(DINFO,IINFO,LINFO,IFILE,UR,RN1,U1,U2,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 6 0   LOOKS WHETHER THE SOLUTION LIES BETWEEN      ***
C**      PRESCRIBED BOUNDS FOR EACH COMPONENT. FINALLY THE          ***
C**      SOLUTION IS SORTED FOR THE DEFECT-COMPUTATION AND          ***
C**      WRITTEN ON FILE.                                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER            IINFO(1),IFILE(1),UR(1),RN1,IERR
      DOUBLE PRECISION   DINFO(1),U1(1),U2(1)
      LOGICAL            LINFO(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(IMM + 2 * NK)
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : IINFO(16)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : LINFO(10 + NK)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBER
C        I      I     I  ARRAY : IFILE(3)
C--------I------I-----I------------------------------------------------
C UR     I  I   I IN  I  SYNCHRONISATION VARIABLES
C        I      I     I  ARRAY : UR(3)
C--------I------I-----I------------------------------------------------
C RN1    I  I   I IN  I  RECORD NUMBER FOR INPUT-FILE
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I I/- I  WORKARRAYS FOR THE SOLUTION
C        I      I     I  INPUT : U1 IN (NK,N)-SORTING
C        I      I     I  OUTPUT ON FILE : U2 IN (N,NK)-SORTING
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   NK,N,M,MV,RL,IMM,RN,IK,I,II
      EXTERNAL  FDS318
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK  = IINFO(1)
      N   = IINFO(9)
      M   = IINFO(10)
      MV  = IINFO(11)
      RL  = IINFO(12)
      IMM = IINFO(16)
C
C***  ARE THERE PRESCRIBED BOUNDS FOR THE SOLUTION ?
C
      DO 10 IK = 1,NK
         IF(LINFO(10+IK))  GOTO 20
   10 CONTINUE
      GO TO 40
   20 II = 0
      DO 30 I  = 1,N
      DO 30 IK = 1,NK
         II = II + 1
         IF(LINFO(10+IK).AND.U1(II).LT.DINFO(IMM+IK))
     &                      U1(II) = DINFO(IMM+IK)
         IF(LINFO(10+IK).AND.U1(II).GT.DINFO(IMM+NK+IK))
     &                      U1(II) = DINFO(IMM+NK+IK)
   30 CONTINUE
C
C***  WRITE SOLUTION ON INPUT-FILE
C
   40 RN = RN1
      CALL FDS331(U1,M,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
C
C***  SORTING OF THE SOLUTION
C
      CALL FDS411(NK,N,U1,U2)
C
C***  WRITE SOLUTION ON FILE 3
C
      RN = 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS460----------------------------------------------------
      E    N    D
C:::122     ,,,,,FDS472.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS472(AIPX,AIPY,GMX,GMY,GPX,GPY,ITRX,ITRY,
     *                  NAX,NAY,NFLX,NFLY,NK,NX,NY,NXN,NYN,U,UN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 7 2   EVALUATES 2-D INTERPOLATION FORMULAE.        ***
C**      THE COEFFICIENTS FOR THE 2 DIRECTIONS HAVE BEEN            ***
C**      COMPUTED IN FDS010.                                        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ITRX(1),ITRY(1),NAX(1),NAY(1),
     *         NFLX(1),NFLY(1),NK,NX,NY,NXN,NYN
      DOUBLE PRECISION     AIPX(NXN,1),AIPY(NYN,1),GMX(1),GMY(1),
     *         GPX(1),GPY(1),U(NX,NY,NK),UN(NXN,NYN,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C AIPX,  I  DP  I IN  I  INTERPOLATION FORMULAE
C   -Y   I      I     I  ARRAY : AIPX(NXN,MLF),AIPY(NYN.MLF)
C--------I------I-----I------------------------------------------------
C GMX,GPXI  DP  I IN  I  WEIGHT FACTORS FOR THE INTERPOLATION FORMULAE
C -Y     I      I     I  ARRAY : GMX,GPX(NXN),
C        I      I     I          GMY,GPY(NYN)
C--------I------I-----I------------------------------------------------
C ITRX,  I  I   I IN  I  INDEX FUNCTIONS FOR THE RELATION BETWEEN
C   -Y   I      I     I  OLD AND NEW GRID
C        I      I     I  ARRAYS : ITRX(NXN),ITRY(NYN)
C--------I------I-----I------------------------------------------------
C NAX,   I  I   I IN  I  INFORMATION ABOUT THE START ADDRESSES FOR THE
C  -Y    I      I     I  FORMULAE IN THE SOLUTION VECTOR
C        I      I     I  ARRAYS : NAX(NXN), NAY(NYN)
C--------I------I-----I------------------------------------------------
C NFLX   I  I   I IN  I  INFORMATION ABOUT THE LENGTH OF THE FORMULAE
C   -Y   I      I     I  ARRAYS : NFLX(NXN), NFLY(NYN)
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C NXN,NYNI  I   I IN  I  NUMBER OF GRID POINTS IN THE NEW GRID
C--------I------I-----I------------------------------------------------
C U      I  DP  I IN  I  SOLUTION VECTOR ON THE OLD GRID
C        I      I     I  ARRAY : U(NX,NY,NK)
C--------I------I-----I------------------------------------------------
C UN     I  DP  I OUT I  SOLUTION VECTOR ON THE NEW GRID (INTERPOLATED)
C        I      I     I  ARRAY : UN(NXN,NYN,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IA1,IA2,IF1,IF2,IK,I1,I2
      DOUBLE PRECISION     SUMX,SUMY
C**                                                                 ***
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 IK=1,NK
      DO 100 I2=1,NYN
      DO 100 I1=1,NXN
C
      IA1 = NAX (I1)
      IA2 = NAY (I2)
C
         SUMY = 0
         DO 20 IF2=1,NFLY(I2)
            SUMX = 0
            DO 10 IF1=1,NFLX(I1)
               SUMX = SUMX + AIPX(I1,IF1)
     &                     * U(IA1+IF1,IA2+IF2,IK)
   10       CONTINUE
            SUMY = SUMY + SUMX*AIPY(I2,IF2)
   20    CONTINUE
C
      UN(I1,I2,IK) =   SUMY
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS472----------------------------------------------------
      E    N    D
C:::123     ,,,,,FDS473.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDS473(AIPX,AIPY,AIPZ,GMX,GMY,GMZ,GPX,GPY,GPZ,
     *                  ITRX,ITRY,ITRZ,NAX,NAY,NAZ,NFLX,NFLY,NFLZ,
     *                  NK,NX,NY,NZ,NXN,NYN,NZN,U,UN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 4 7 3   EVALUATES 3-D INTERPOLATION FORMULAE.        ***
C**      THE COEFFICIENTS FOR THE 3 DIRECTIONS HAVE BEEN            ***
C**      COMPUTED IN FDS010.                                        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ITRX(1),ITRY(1),ITRZ(1),NAX(1),NAY(1),NAZ(1),
     *         NFLX(1),NFLY(1),NFLZ(1),NK,NX,NY,NZ,NXN,NYN,NZN
      DOUBLE PRECISION    
     *  AIPX(NXN,1),AIPY(NYN,1),AIPZ(NZN,1),GMX(1),GMY(1),
     *         GMZ(1),GPX(1),GPY(1),GPZ(1),U(NX,NY,NZ,NK),
     *         UN(NXN,NYN,NZN,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C AIPX,  I  DP  I IN  I  INTERPOLATION FORMULAE
C -Y,-Z  I      I     I  ARRAY : AIPX(NXN,MLF),AIPY(NYN.MLF),
C        I      I     I          AIPZ(NZN,MLF)
C--------I------I-----I------------------------------------------------
C GMX,GPXI  DP  I IN  I  WEIGHT FACTORS FOR THE INTERPOLATION FORMULAE
C -Y,-Z  I      I     I  ARRAY : GMX,GPX(NXN),
C        I      I     I          GMY,GPY(NYN),
C        I      I     I          GMZ,GPZ(NZN),
C--------I------I-----I------------------------------------------------
C ITRX,  I  I   I IN  I  INDEX FUNCTIONS FOR THE RELATION BETWEEN
C -Y,-Z  I      I     I  OLD AND NEW GRID
C        I      I     I  ARRAYS : ITRX(NXN),ITRY(NYN),ITRZ(NZN)
C--------I------I-----I------------------------------------------------
C NAX,   I  I   I IN  I  INFORMATION ABOUT THE START ADDRESSES FOR THE
C -Y,-Z  I      I     I  FORMULAE IN THE SOLUTION VECTOR
C        I      I     I  ARRAYS : NAX(NXN), NAY(NYN), NAZ(NZN)
C--------I------I-----I------------------------------------------------
C NFLX   I  I   I IN  I  INFORMATION ABOUT THE LENGTH OF THE FORMULAE
C -Y,-Z  I      I     I  ARRAYS : NFLX(NXN), NFLY(NYN), NFLZ(NZN)
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID POINTS IN THE OLD GRID
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
CNXN,NYN,I  I   I IN  I  NUMBER OF GRID POINTS IN THE NEW GRID
CNZN     I      I     I
C--------I------I-----I------------------------------------------------
C U      I  DP  I IN  I  SOLUTION VECTOR ON THE OLD GRID
C        I      I     I  ARRAY : U(NX,NY,NZ,NK)
C--------I------I-----I------------------------------------------------
C UN     I  DP  I OUT I  SOLUTION VECTOR ON THE NEW GRID (INTERPOLATED)
C        I      I     I  ARRAY : UN(NXN,NYN,NZN,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IA1,IA2,IA3,IF1,IF2,IF3,IK,I1,I2,I3
      DOUBLE PRECISION     SUMX,SUMY,SUMZ
C**                                                                 ***
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 100 IK=1,NK
      DO 100 I3=1,NZN
      DO 100 I2=1,NYN
      DO 100 I1=1,NXN
C
      IA1 = NAX (I1)
      IA2 = NAY (I2)
      IA3 = NAZ (I3)
C
      SUMZ = 0
      DO 30 IF3=1,NFLZ(I3)
         SUMY = 0
         DO 20 IF2=1,NFLY(I2)
            SUMX = 0
            DO 10 IF1=1,NFLX(I1)
               SUMX = SUMX + AIPX(I1,IF1)
     &                     * U(IA1+IF1,IA2+IF2,IA3+IF3,IK)
   10       CONTINUE
            SUMY = SUMY + SUMX*AIPY(I2,IF2)
   20    CONTINUE
         SUMZ = SUMZ + SUMY*AIPZ(I3,IF3)
   30 CONTINUE
C
      UN(I1,I2,I3,IK) =   SUMZ
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS473----------------------------------------------------
      E    N    D
C:::124     ,,,,,FDS500.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS500(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,ICONV,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 0 0   LINSOL-MAIN-PROGRAM                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(16),IW(*),MIW,MDW,IFILE(*),UR(*),ICONV,IERR
      DOUBLE PRECISION  DW(*),B(*),X(*),EPS,EPSLIN
      LOGICAL  LLIN(*)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR
C        I      I     I  (1)  : METHOD SELECTION
C        I      I     I         = 0 : POLY-ALGORITHM (PRES20/BICO/BIORTH)
C        I      I     I         = 1 : PRES20-METHOD
C        I      I     I         = 2 : BICO-METHOD
C        I      I     I         = 3 : BIORTH-METHOD
C        I      I     I         = 4 : AT-PRESS-METHOD
C        I      I     I         =10 : POLY-ALGORITHM (PRES20/BICO/AT-PRESS)
C        I      I     I         =11 : CLASSICAL CG-METHOD               SS)
C        I      I     I         =12 : CGS-METHOD                        SS)
C        I      I     I         =13 : CGSTAB-METHOD                     SS)
C        I      I     I  (2)  : MAXIMUM NUMBER OF MATRIX-VECTOR-
C        I      I     I         MULTIPLICATIONS
C        I      I     I  (3)  : NUMBER OF UNKNOWNS M
C        I      I     I  (4)  : MN = 2 * M - 1
C        I      I     I  (5)  : NUMBER OF DIAGONALS ND
C        I      I     I  (6)  : (NOT USED)
C        I      I     I  (7)  : FILE 1     (INPUT : MATRIXDIAGONALS)
C        I      I     I  (8)  : FILE 2     (NORMALIZED MATRIX)
C        I      I     I  (9)  : FILE 3     (NORMALIZATION COEFFICIENTS)
C        I      I     I  (10) : NUMBER OF MATRIX-VECTOR-MULTIPLICATIONS
C        I      I     I  (11) : = 1 : MATRIX IS THE SAME AS IN THE CALL
C        I      I     I               BEFORE
C        I      I     I  (12) : OUTPUT-FILE
C        I      I     I  (13) : OUTPUT-CONTROL
C        I      I     I  (14) : = 1 : NORMALIZED MATRIX WILL BE STORED
C        I      I     I               IN PACKED FORM
C        I      I     I  (15) : = 0 : LINE-PRECONDITIONING
C        I      I     I         = 1 : MAINDIAGONAL-PRECONDITIONING
C        I      I     I         = 2 : NO PRECONDITIONING
C        I      I     I  (16) : = 0 : START ITERATION FROM 0 SOLUTION
C        I      I     I         = 1 : START ITERATION FROM 1 SOLUTION
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  LLIN(I) = .TRUE. INDICATES THAT DIAGONAL I
C        I      I     I             IS OCCUPIED
C        I      I     I  ARRAY : LLIN(MN)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW, MIW >= 3 * ND
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW, MDW >= 9 * M
C        I      I     I  ( PRES20 : MDW >= 13 * M )
C--------I------I-----I------------------------------------------------
C B      I  DP  I IN  I  RIGHT HAND SIDE OF THE LINEAR SYSTEM
C        I      I     I  ARRAY : B(M)
C--------I------I-----I------------------------------------------------
C X      I  DP  I OUT I  SOLUTION OF THE LINEAR SYSTEM
C        I      I     I  ARRAY : X(M)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE CONSTANT
C--------I------I-----I------------------------------------------------
C EPSLIN I  DP  I IN  I  DESIRED ACCURACY FOR THE SOLUTION OF THE
C        I      I     I  LINEAR SYSTEM (DEFECT RELATIVE TO B)
C--------I------I-----I------------------------------------------------
C ICONV  I  I   I OUT I  CONVERGENCE-INDICATOR
C        I      I     I  ICONV = 1 : CONVERGENCE
C        I      I     I  ICONV = 2 : ITERATION REACHED MAXIMUM NUMBER
C        I      I     I              OF MATRIX-VECTOR-MULTIPLICATIONS
C        I      I     I  ICONV = 3 : DIVERGENCE
C        I      I     I  ICONV = 4 : ERROR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER INFOL(10),LOUT,MS,ILIN1
      DOUBLE PRECISION DLIN(10),FDS101,EPSREL
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      LOUT = ILIN(12)
C
C***  NO NORMALIZATION : 0  NORMALIZATION : > 0
      INFOL(1) = 0
C
C***  FIRST STEP --> 0 ELSE 1
      IF (ILIN(16).EQ.1) THEN
         INFOL(2) =-1
      ELSE
         INFOL(2) = 0
      ENDIF
C***  NUMBER OF MVM
      INFOL(3) = 0
C
      ILIN1=0
C
C***   METHODS
C***     0 = POLYALGORITHM (PRES20/BICO/BIORTH)
C***     1 = PRES20
C***     2 = BICO
C***     3 = BIORTH
C***     4 = AT-PRES
C***    10 = POLYALGORITHM (PRES20/BICO/AT-PRESS)
C***    11 = CLASSICAL CG-METHOD
C***    12 = CGS-METHOD
C***    13 = CGSTAB-METHOD
C
C***  METHOD SELECTION
      INFOL(4) = ILIN(1)
      IF (ILIN(1).EQ. 0) INFOL(4)=1
      IF (ILIN(1).EQ.10) THEN
         INFOL(4)=1
         ILIN1   =ILIN(1)
         ILIN(1) =0
      ENDIF
      IF(INFOL(4).LT.1.OR.INFOL(4).GT.13) GO TO 1000
C
C***  BMAX
      DLIN(1) = FDS101(ILIN(3),B,EPS)
C
  999 CONTINUE
      IF(INFOL(4).EQ.3.AND.ILIN1.EQ.10) INFOL(4)=4
      MS = INFOL(4)
      GO TO(10,20,30,40,50,60,70,80,90,100,110,120,130) , MS
   10 CALL FDS511(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
   20 CALL FDS512(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
   30 CALL FDS513(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
   40 CALL FDS514(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
   50 STOP 'METHOD DOES NOT EXIST'
   60 STOP 'METHOD DOES NOT EXIST'
   70 STOP 'METHOD DOES NOT EXIST'
   80 STOP 'METHOD DOES NOT EXIST'
   90 STOP 'METHOD DOES NOT EXIST'
  100 STOP 'SOMETHING WRONG IN METHOD SELECTION'
  110 CALL FDS501(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
  120 CALL FDS520(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
  130 CALL FDS502(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,EPS,
     &            EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
      GO TO 998
C
  998 INFOL(2)=1
      IF (ICONV.GE.1) THEN
         IF (ILIN1.EQ.10) THEN
            ILIN(1) =ILIN1
         ENDIF
         RETURN
      ENDIF
      GO TO 999
C
 1000 WRITE(LOUT,1010) INFOL(4)
 1010 FORMAT(' *** ERROR IN FDS500:'/
     &       '     WRONG METHOD SELECTION   MS=',I6/)
      IERR=500
      ICONV=4
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS500----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::125     ,,,,,FDS501.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS501(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 0 1   CLASSICAL CG  FOR THE SOLUTION OF THE LINEAR ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE. THE METHODS WORKS ALSO IF PHI=0, I.E. NO BREAKDOWN   ***
C**      OCCURS.                                                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1990                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :    (SEE FDS500)                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,I,NIW,NDW,IDOPT,
     &         IMVM1,
     &         IDRX,IDXX,KK,KK1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1
      INTEGER ISIGMA,NREST
      PARAMETER (ISIGMA=2)
      INTEGER ITR,KNEW,KOLD,IDX(ISIGMA),IDR(ISIGMA)
      DOUBLE PRECISION     ONE,ZERO,LNORM,ANORM,LNORMA,FDS151,FDS222,
     &         AK(ISIGMA),SUM ,AN(ISIGMA),AA1,BMAX,FI(ISIGMA),EPSILO,
     &         EPSDUM
      LOGICAL LBREAK,LBRE(ISIGMA)
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, ONE = 1.0, MVL = 65535)
      PARAMETER  (EPSILO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = INFOL(3)
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      NREST  = ITMAX+1
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = DLIN(1)
      IDOKU1 = IDOKU
C
      NIW = 3  * ND
      NDW = (2*ISIGMA+3) * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 511
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      IDOPT = ID1   + M
      IDR(1)= IDOPT + M
      DO 5 ITR=2,ISIGMA
         IDR(ITR)=IDR(ITR-1)+M
    5 CONTINUE
      IDX(1)= IDR(ISIGMA) + M
      DO 6 ITR=2,ISIGMA
         IDX(ITR)=IDX(ITR-1)+M
    6 CONTINUE
C
      DO 11 ITR=2,ISIGMA
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 10 I=1,M
            DW(IDX(ITR)+I-1) = ZERO
            DW(IDR(ITR)+I-1) = ZERO
   10    CONTINUE
   11 CONTINUE
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(IDR(1)),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 52         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 52
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=511
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &        ILIN(1),IFILE(IF1),IFILE(IF2),ND,
     &        UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
         INFOL(1)= 1
      ENDIF
      IF (INFOL(2).EQ.0) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 118 I = 1,M
            X(I) = ZERO
            DW(IDR(1)+I-1) = ZERO
            DW(I) = B(I)*DW(ID1+I-1)
118      CONTINUE
         DLIN(2) = FDS151(M,DW(1),ZERO)
         EPSREL  = EPSLIN * DLIN(2)
      ELSE
         CALL FDS231(X(1),DW(1),DW(IDR(1)),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM + 1
         IMVM1 = IMVM1 + 1
         IF (INFOL(2).EQ.-1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
            DO 151 I = 1,M
               DW(I) = DW(IDR(1)+I-1)-B(I)*DW(ID1+I-1)
  151       CONTINUE
            INFOL(2)=0
            DLIN(2) = FDS151(M,DW(1),ZERO)
            EPSREL  = EPSLIN * DLIN(2)
         ENDIF
      ENDIF
C
C***  START WITH R = AX - B
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 221 I = 1,M
         DW(IDOPT+I-1) = B(I) * DW(ID1+I-1)
         DW(IDR(1)+I-1) = DW(IDR(1)+I-1) - DW(IDOPT+I-1)
         DW(IDOPT+I-1) = DW(IDR(1)+I-1)
         DW(IDX(1) +I-1) = X(I)
221   CONTINUE
      LNORM = FDS151(M,DW(IDR(1)),ZERO)
      LNORMA= LNORM
      ANORM = DLIN(2)
      IF(IDOKU.GE.2 .AND. INFOL(2).EQ.0) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  INITIAL VALUES
C
*VOCL LOOP,SCALAR
      DO 121 I = 1,ISIGMA
         AK(I) = ZERO
         FI(I) = ZERO
         LBRE(I) = .FALSE.
121   CONTINUE
      IDRX = IDR(1)
      KK   = 0
      KK1  = 0
      GO TO 200
C
C***  RESTART AFTER NREST ITERATION STEPS
C
  120 CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 116 I = 1,M
         DW(IDR(1)+I-1) = DW(IDOPT+I-1)
         DW(IDX(1)+I-1) = X(I)
116   CONTINUE
*VOCL LOOP,SCALAR
      DO 122 I = 1,ISIGMA
         AK(I) = ZERO
         FI(I) = ZERO
         LBRE(I) = .FALSE.
122   CONTINUE
      IDRX = IDR(1)
      KK   = 0
      KK1  = 0
C
C***  START OF THE ITERATION-LOOP
C
200   IF(MOD(IMVM,2).EQ.0) ND=-ND
      CALL FDS231(DW(IDRX),DW(1),DW(ID1),IW(1),IW(II2),
     &     IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      KK   = KK  + 1
      KK1  = KK1 + 1
      IMVM = IMVM + 1
      IMVM1= IMVM1+ 1
      IF (KK.EQ.ISIGMA+1) KK = 1
C
      AN(KK) = FDS222(DW(IDR(KK)),DW(IDR(KK)),M)
      DO 130 ITR=1,MIN(KK1,ISIGMA)
         AK(ITR) = -FDS222(DW(IDR(ITR)),DW(ID1),M)/AN(ITR)
         IF (LBRE(ITR)) THEN
            FI(ITR) = 0.0
         ELSE
            FI(ITR) = AK(ITR)
         ENDIF
  130 CONTINUE
      SUM = 0.0
*VOCL LOOP,SCALAR
      DO 110 I = 1,ISIGMA
         SUM = SUM + FI(I)
  110 CONTINUE
C
      IF (KK.EQ.ISIGMA) THEN
         KNEW = 1
      ELSE
         KNEW = KK+1
      ENDIF
C
      IF (ABS(SUM).LE.EPSILO) THEN
         LBREAK=.TRUE.
         LBRE(KNEW)=.TRUE.
         SUM=1.0
      ELSE
         LBREAK=.FALSE.
         LBRE(KNEW)=.FALSE.
         SUM = ONE/SUM
      ENDIF
      IDXX = IDX(KNEW)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 85 I=1,M
         DW(IDXX+I-1) =  DW(IDRX+I-1) + AK(KNEW)*DW(IDXX+I-1)
  85  CONTINUE
      DO 86 ITR=1,ISIGMA
         IF (ITR.EQ.KNEW) GOTO 86
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 87 I=1,M
            DW(IDXX+I-1) = DW(IDXX+I-1)+AK(ITR)*DW(IDX(ITR)+I-1)
  87     CONTINUE
  86  CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 88 I=1,M
         DW(IDXX+I-1) =  DW(IDXX+I-1)*SUM
  88  CONTINUE
C
      IDRX = IDR(KNEW)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 185 I=1,M
         DW(IDRX+I-1) =  DW(ID1+I-1) + AK(KNEW)*DW(IDRX+I-1)
 185  CONTINUE
      DO 186 ITR=1,ISIGMA
         IF (ITR.EQ.KNEW) GOTO 186
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 187 I=1,M
            DW(IDRX+I-1) = DW(IDRX+I-1)+AK(ITR)*DW(IDR(ITR)+I-1)
 187     CONTINUE
 186  CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 188 I=1,M
         DW(IDRX+I-1) =  DW(IDRX+I-1)*SUM
 188  CONTINUE
C     CALL SMOOTHING ALGORITHM
      IF (.NOT.LBREAK) THEN
         CALL FDS541(DW(IDOPT),DW(IDRX),X(1),DW(IDXX),DW(1),M)
C
C***  CHECK STOPPING CRITERION
C
         LNORM = FDS151(M,DW(IDOPT),ZERO)
         IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
         IF (IDOKU1.GE.10) THEN
            IF (IMVM.GE.IDOKU1) THEN
               WRITE(LOUT,1300) IMVM,LNORM
               IDOKU1 = IMVM + IDOKU
            ENDIF
         ENDIF
C
         IF (LNORM.GT.ANORM) GO TO 430
         IF (LNORM.LT.EPSREL) THEN
            CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &           IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
            IF(LNORM.LT.EPSREL) GO TO 410
         ENDIF
      ELSE
         IF(IDOKU.GE.2.AND.IDOKU.LE.9)WRITE(LOUT,1309) IMVM,LNORM,EPSILO
         IF (IDOKU1.GE.10) THEN
            IF (IMVM.GE.IDOKU1) THEN
               WRITE(LOUT,1309) IMVM,LNORM,EPSILO
               IDOKU1 = IMVM + IDOKU
            ENDIF
         ENDIF
      ENDIF
C
C***  RESTART AFTER NREST STEPS
C
      IF (KK1.EQ.NREST)  GO TO 120
C
      IF(IMVM.GT.ITMAX) GO TO 420
      IF(IMVM1.GT.20.AND.ILIN(1).EQ.0) THEN
C
C***  CONTINUE WITH (ANOTHER) METHOD
C
         AA1 = LNORM/LNORMA
         IF (AA1.GE.0.5) THEN
            INFOL(3) = IMVM
            INFOL(4) = INFOL(4) + 1
            GOTO 500
         ENDIF
         IMVM1 = 0
         LNORMA=LNORM
      ENDIF
      GO TO 200
C
C***  END OF THE ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      INFOL(5)=1
      GO TO 500
  420 ICONV = 2
      IF (IDOKU.GE.2) THEN
         WRITE(LOUT,1420) IMVM
         EPSDUM=1.0E+10
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSDUM,EPSREL,
     &           IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
      ENDIF
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS501:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &   '    STOPPING CRITERION:',G14.4,'  C L A S S I C A L   C G')
 1250 FORMAT('    FLOATING DIVIDE , CG METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1309 FORMAT('    STEP:',I7,'  DEFECT:',G12.4,' |1/PHI| <= ',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS501----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::126     ,,,,,FDS502.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS502(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 0 2   CGSTAB -METHOD FOR THE SOLUTION OF THE LINEAR***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1991                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,IDR,IDP,IDV,IDR0,IDS,NIW,NDW,
     &         IDX,IDOPT,IMVM1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1,I
      DOUBLE PRECISION     
     & ZERO,ALPHA,BETA,AP,AP1,ONE,RHO,RHO1,W,LNORM,ANORM,
     &         FDS151,FDS222,BMAX,FDS101
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, MVL = 65535, ONE = 1.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = 0
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = FDS101(M,B,EPS)
      IDOKU1 = IDOKU
C
      NIW = 3 * ND
      NDW = 9 * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 520
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      IDS   = ID1   + M
      IDR   = IDS   + M
      IDV   = IDR   + M
      IDP   = IDV   + M
      IDR0  = IDP   + M
      IDOPT = IDR0  + M
      IDX   = IDOPT + M
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(IDR),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 51         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 51
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=520
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &   ILIN(1),IFILE(IF1),IFILE(IF2),ND,UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
      ENDIF
      IF (ILIN(16).NE.1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 118 I = 1,M
            X(I) = ZERO
            DW(IDR+I-1) = ZERO
            DW(I) = B(I)*DW(ID1+I-1)
118      CONTINUE
         EPSREL  = EPSLIN * FDS151(M,DW(1),ZERO)
      ELSE
         CALL FDS231(X(1),DW(1),DW(IDR),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM + 1
         IMVM1 = IMVM1 + 1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 151 I = 1,M
            DW(I) = DW(IDR+I-1)-B(I)*DW(ID1+I-1)
  151    CONTINUE
         EPSREL  = EPSLIN * FDS151(M,DW(1),ZERO)
      ENDIF
C
C***  START WITH R = A * X - B
C
      K  = 0
 62   IA = K
      NV = MIN(M-K,MVL)
      K  = K + NV
      NV = NV-1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 65 I=0,NV
         DW(IDR  +IA+I) = DW(IDR+IA+I) -B(1+IA+I) * DW(ID1+IA+I)
         DW(IDR0 +IA+I) = DW(IDR+IA+I)
         DW(IDOPT+IA+I) = DW(IDR+IA+I)
         DW(IDP  +IA+I) = ZERO
         DW(IDV  +IA+I) = ZERO
         DW(IDX  +IA+I) = X(1+IA+I)
  65  CONTINUE
      IF (K.LT.M) GO TO 62
      ANORM = FDS151(M,DW(IDR),ZERO)
      IF(IDOKU.GE.2) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  START OF THE CGS-ITERATION-LOOP
 
      ALPHA=1.0
      W=1.0
      RHO1=1.0
      RHO=FDS222(DW(IDR0),DW(IDR),M)
  200 CONTINUE
      BETA=RHO/RHO1 * ALPHA/W
      CALL FDS221(M,DW(IDP),DW(IDV),DW(IDS),-W)
      CALL FDS221(M,DW(IDR),DW(IDS),DW(IDP),BETA)
      CALL FDS231(DW(IDP),DW(1),DW(IDV),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM  + 1
      IMVM1 = IMVM1 + 1
      AP= FDS222(DW(IDR0),DW(IDV),M)
      IF (AP.EQ.ZERO.OR.RHO.EQ.ZERO) THEN
         IERR = 520
         WRITE(LOUT,1250)
         GOTO 440
      ENDIF
      ALPHA=RHO/AP
      CALL FDS221(M,DW(IDR),DW(IDV),DW(IDS),-ALPHA)
      CALL FDS231(DW(IDS),DW(1),DW(ID1),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM + 1
      IMVM1 = IMVM1 + 1
      AP= FDS222(DW(ID1),DW(IDS),M)
      AP1= FDS222(DW(ID1),DW(ID1),M)
      W  = AP/AP1
      CALL FDS221(M,DW(IDS),DW(ID1),DW(IDR),-W)
      CALL FDS221(M,DW(IDX),DW(IDS),DW(IDX),-W)
      CALL FDS221(M,DW(IDX),DW(IDP),DW(IDX),-ALPHA)
      RHO1=RHO
      RHO=FDS222(DW(IDR0),DW(IDR),M)
C     CALL SMOOTHING ALGORITHM
      CALL FDS541(DW(IDOPT),DW(IDR),X(1),DW(IDX),DW(1),M)
C
      LNORM=FDS151(M,DW(IDOPT),ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU1.GE.10) THEN
         IF (IMVM.GE.IDOKU1) THEN
            WRITE(LOUT,1300) IMVM,LNORM
            IDOKU1=IMVM+IDOKU
         ENDIF
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM) GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
      GO TO 200
C
C***  END OF THE CGS-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      GO TO 500
  420 ICONV = 2
      IF(IDOKU.GE.2) WRITE(LOUT,1420) IMVM
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS502:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &       '    STOPPING CRITERION:',G14.4,
     &       '  C G S T A B   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE, CGSTAB METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS502----------------------------------------------------
      E  N  D
C:::127     ,,,,,FDS510.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS510(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,ICONV,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 1 0   MJOR-METHOD FOR THE SOLUTION OF THE LINEAR   ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :    (SEE FDS500)                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,IA,K,
     &         II2,II3,ID2,I,IFAIL,IOM,J,NIW,NDW,MVL,NV,
     &         IDOKUV,IOS,PFE,RN
      DOUBLE PRECISION  C(3),OM0(3),DOM0(3),OMEGA,DOM,GF,ZERO,P4,
     &                  LNORM,ANORM,EPSREL,GNORM,FDS151,FDS101,BMAX
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, MVL=65535, P4=10000.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IMVM  = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      IDOKUV = IDOKU
C
      NIW=3*ND
      NDW=2*M
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 510
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1 + ND
      II3 = II2 + ND
C
      ID2 = 1 + M
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF(MODNEW.EQ.0) THEN
CWSS  CALL FDS531(DW(1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,IERR,
CWSS &            LOUT)
      CALL FDS531(DW(1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,ILIN,
     &            IERR,LOUT)
      IF(IERR.NE.0)  GO TO 440
      CALL FDS522(DW(1),DW(ID2),IW(II2),IW(II3),ILIN,
     &            IFILE(IF1),IFILE(IF2),ND,UR(IF1),UR(IF2),IERR)
      IF(IERR.NE.0) GO TO 440
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS310(IFILE(IF3),IOS,RN,PFE,DW(1),M,UR(IF3))
      IF(IOS.NE.0) THEN
         IERR = 510
         WRITE(LOUT,1100)
         GO TO 440
      ENDIF
      ELSE
C
C***  READ NORMALIZATION FACTORS
C
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS309(IFILE(IF3),IOS,RN,PFE,DW(1),M,UR(IF3))
      ENDIF
C
      IFAIL  = 0
      IOM    = 1
C
      C(1) =  1.
      C(2) = -1.
      C(3) =  2.
C
      OM0(1) = 0.4
      OM0(2) = 0.3
      OM0(3) = 0.2
C
      DOM0(1) = 0.02
      DOM0(2) = 0.025
      DOM0(3) = 0.03
C
      OMEGA = OM0(1)
      DOM   = DOM0(1)
      GF    = 2.9
C
C***  INITIAL VALUES
C
      BMAX=FDS101(M,B,ZERO)
      K=0
  105 IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 110 I=1,NV
         B(I+IA) = -B(I+IA) * DW(I+IA)
         X(I+IA) = ZERO
  110 CONTINUE
      IF(K.LT.M) GO TO 105
      LNORM = FDS151(M,B,ZERO)
      ANORM = LNORM
      EPSREL = EPSLIN * ANORM
      IF(IDOKU.GE.2) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  START OF THE MJOR-ITERATION-LOOP
C
  200 IF(MOD(IMVM,2).EQ.1)  ND=-ND
      CALL FDS231(B,DW(ID2),DW(1),IW(1),IW(II2),
     &            IW(II3),ILIN,M,ND,IFILE(IF2),UR(IF2))
      IMVM = IMVM + 1
      CALL FDS221(M,B,DW(1),DW(ID2),-OMEGA-C(1)*DOM)
      GNORM = FDS151(M,DW(ID2),ZERO)
C
C***  CHECK NEW DEFECT
C
      IF(GNORM.GT.LNORM) THEN
         IOM = IOM + 1
         IF(IOM.GT.3) IOM = 1
         OMEGA = OM0(IOM)
         DOM = DOM0(IOM)
         CALL FDS221(M,B,DW(1),DW(ID2),-OMEGA-C(1)*DOM)
      ENDIF
      CALL FDS221(M,X,B,X,-OMEGA-C(1)*DOM)
      K=0
  225 IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 230 I=1,NV
         B(I+IA)=DW(I+M+IA)
  230 CONTINUE
      IF(K.LT.M) GO TO 225
      DO 300 J=2,3
         IF(MOD(IMVM,2).EQ.1)  ND=-ND
         CALL FDS231(B,DW(ID2),DW(1),IW(1),IW(II2),
     &               IW(II3),ILIN,M,ND,IFILE(IF2),UR(IF2))
         IMVM = IMVM + 1
         CALL FDS221(M,B,DW(1),DW(ID2),-OMEGA-C(J)*DOM)
         CALL FDS221(M,X,B,X,-OMEGA-C(J)*DOM)
         K=0
  245    IA=K
         NV=MIN(M-K,MVL)
         K=K+NV
         DO 250 I=1,NV
            B(I+IA)=DW(I+M+IA)
  250    CONTINUE
         IF(K.LT.M) GO TO 245
  300 CONTINUE
      LNORM = FDS151(M,B,ZERO)
      OMEGA = OMEGA + C(3) * DOM
      DOM   = DOM * GF
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU.GE.10.AND.IMVM.GE.IDOKUV) THEN
         WRITE(LOUT,1300) IMVM,LNORM
         IDOKUV=IDOKU+IDOKUV
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),B,LNORM,BMAX,EPSLIN,EPSREL,IDOKU,
     &        IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
      IF(LNORM.GT.P4*ANORM) GO TO 430
      GO TO 200
C
C***  END OF THE MJOR-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      GO TO 500
  420 ICONV = 2
      IF(IDOKU.GE.2) WRITE(LOUT,1420) IMVM
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS510:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &   '    STOPPING CRITERION:',G14.4,'  M J O R   M E T H O D')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS510----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::128     ,,,,,FDS511.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS511(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 1 1   PRES - METHOD FOR THE SOLUTION OF THE LINEAR ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE. THE METHODS WORKS ALSO IF PHI=0, I.E. NO BREAKDOWN   ***
C**      OCCURS.                                                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1990                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :    (SEE FDS500)                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,I,NIW,NDW,IDOPT,
     &         IMVM1,
     &         IDRX,IDXX,KK,KK1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1
      INTEGER ISIGMA,NREST
      PARAMETER (ISIGMA=5,NREST=20)
      INTEGER ITR,KNEW,KOLD,IDX(ISIGMA),IDR(ISIGMA)
      DOUBLE PRECISION     ONE,ZERO,LNORM,ANORM,LNORMA,FDS151,FDS222,
     &         AK(ISIGMA),SUM ,AN(ISIGMA),AA1,BMAX,FI(ISIGMA),EPSILO,
     &         EPSDUM
      LOGICAL LBREAK,LBRE(ISIGMA)
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, ONE = 1.0, MVL = 65535)
      PARAMETER  (EPSILO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = INFOL(3)
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = DLIN(1)
      IDOKU1 = IDOKU
C
      NIW = 3  * ND
      NDW = (2*ISIGMA+3) * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 511
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      IDOPT = ID1   + M
      IDR(1)= IDOPT + M
      DO 5 ITR=2,ISIGMA
         IDR(ITR)=IDR(ITR-1)+M
    5 CONTINUE
      IDX(1)= IDR(ISIGMA) + M
      DO 6 ITR=2,ISIGMA
         IDX(ITR)=IDX(ITR-1)+M
    6 CONTINUE
C
      DO 11 ITR=2,ISIGMA
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 10 I=1,M
            DW(IDX(ITR)+I-1) = ZERO
            DW(IDR(ITR)+I-1) = ZERO
   10    CONTINUE
   11 CONTINUE
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(IDR(1)),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 52         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 52
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=511
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &        ILIN(1),IFILE(IF1),IFILE(IF2),ND,
     &        UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
         INFOL(1)= 1
      ENDIF
      IF (INFOL(2).EQ.0) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 118 I = 1,M
            X(I) = ZERO
            DW(IDR(1)+I-1) = ZERO
            DW(I) = B(I)*DW(ID1+I-1)
118      CONTINUE
         DLIN(2) = FDS151(M,DW(1),ZERO)
         EPSREL  = EPSLIN * DLIN(2)
      ELSE
         CALL FDS231(X(1),DW(1),DW(IDR(1)),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM + 1
         IMVM1 = IMVM1 + 1
         IF (INFOL(2).EQ.-1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
            DO 151 I = 1,M
               DW(I) = DW(IDR(1)+I-1)-B(I)*DW(ID1+I-1)
  151       CONTINUE
            INFOL(2)=0
            DLIN(2) = FDS151(M,DW(1),ZERO)
            EPSREL  = EPSLIN * DLIN(2)
         ENDIF
      ENDIF
C
C***  START WITH R = AX - B
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 221 I = 1,M
         DW(IDOPT+I-1) = B(I) * DW(ID1+I-1)
         DW(IDR(1)+I-1) = DW(IDR(1)+I-1) - DW(IDOPT+I-1)
         DW(IDOPT+I-1) = DW(IDR(1)+I-1)
         DW(IDX(1) +I-1) = X(I)
221   CONTINUE
      LNORM = FDS151(M,DW(IDR(1)),ZERO)
      LNORMA= LNORM
      ANORM = DLIN(2)
      IF(IDOKU.GE.2 .AND. INFOL(2).EQ.0) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  INITIAL VALUES
C
*VOCL LOOP,SCALAR
      DO 121 I = 1,ISIGMA
         AK(I) = ZERO
         FI(I) = ZERO
         LBRE(I) = .FALSE.
121   CONTINUE
      IDRX = IDR(1)
      KK   = 0
      KK1  = 0
      GO TO 200
C
C***  RESTART AFTER NREST ITERATION STEPS
C
  120 CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 116 I = 1,M
         DW(IDR(1)+I-1) = DW(IDOPT+I-1)
         DW(IDX(1)+I-1) = X(I)
116   CONTINUE
*VOCL LOOP,SCALAR
      DO 122 I = 1,ISIGMA
         AK(I) = ZERO
         FI(I) = ZERO
         LBRE(I) = .FALSE.
122   CONTINUE
      IDRX = IDR(1)
      KK   = 0
      KK1  = 0
C
C***  START OF THE ITERATION-LOOP
C
200   IF(MOD(IMVM,2).EQ.0) ND=-ND
      CALL FDS231(DW(IDRX),DW(1),DW(ID1),IW(1),IW(II2),
     &     IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      KK   = KK  + 1
      KK1  = KK1 + 1
      IMVM = IMVM + 1
      IMVM1= IMVM1+ 1
      IF (KK.EQ.ISIGMA+1) KK = 1
C
      AN(KK) = FDS222(DW(IDR(KK)),DW(IDR(KK)),M)
      DO 130 ITR=1,MIN(KK1,ISIGMA)
         AK(ITR) = -FDS222(DW(IDR(ITR)),DW(ID1),M)/AN(ITR)
         IF (LBRE(ITR)) THEN
            FI(ITR) = 0.0
         ELSE
            FI(ITR) = AK(ITR)
         ENDIF
  130 CONTINUE
      SUM = 0.0
*VOCL LOOP,SCALAR
      DO 110 I = 1,ISIGMA
         SUM = SUM + FI(I)
  110 CONTINUE
C
      IF (KK.EQ.ISIGMA) THEN
         KNEW = 1
      ELSE
         KNEW = KK+1
      ENDIF
C
      IF (ABS(SUM).LE.EPSILO) THEN
         LBREAK=.TRUE.
         LBRE(KNEW)=.TRUE.
         SUM=1.0
      ELSE
         LBREAK=.FALSE.
         LBRE(KNEW)=.FALSE.
         SUM = ONE/SUM
      ENDIF
      IDXX = IDX(KNEW)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 85 I=1,M
         DW(IDXX+I-1) =  DW(IDRX+I-1) + AK(KNEW)*DW(IDXX+I-1)
  85  CONTINUE
      DO 86 ITR=1,ISIGMA
         IF (ITR.EQ.KNEW) GOTO 86
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 87 I=1,M
            DW(IDXX+I-1) = DW(IDXX+I-1)+AK(ITR)*DW(IDX(ITR)+I-1)
  87     CONTINUE
  86  CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 88 I=1,M
         DW(IDXX+I-1) =  DW(IDXX+I-1)*SUM
  88  CONTINUE
C
      IDRX = IDR(KNEW)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 185 I=1,M
         DW(IDRX+I-1) =  DW(ID1+I-1) + AK(KNEW)*DW(IDRX+I-1)
 185  CONTINUE
      DO 186 ITR=1,ISIGMA
         IF (ITR.EQ.KNEW) GOTO 186
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 187 I=1,M
            DW(IDRX+I-1) = DW(IDRX+I-1)+AK(ITR)*DW(IDR(ITR)+I-1)
 187     CONTINUE
 186  CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 188 I=1,M
         DW(IDRX+I-1) =  DW(IDRX+I-1)*SUM
 188  CONTINUE
C     CALL SMOOTHING ALGORITHM
      IF (.NOT.LBREAK) THEN
         CALL FDS541(DW(IDOPT),DW(IDRX),X(1),DW(IDXX),DW(1),M)
C
C***  CHECK STOPPING CRITERION
C
         LNORM = FDS151(M,DW(IDOPT),ZERO)
         IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
         IF (IDOKU1.GE.10) THEN
            IF (IMVM.GE.IDOKU1) THEN
               WRITE(LOUT,1300) IMVM,LNORM
               IDOKU1 = IMVM + IDOKU
            ENDIF
         ENDIF
C
         IF (LNORM.GT.ANORM) GO TO 430
         IF (LNORM.LT.EPSREL) THEN
            CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &           IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
            IF(LNORM.LT.EPSREL) GO TO 410
         ENDIF
      ELSE
         IF(IDOKU.GE.2.AND.IDOKU.LE.9)WRITE(LOUT,1309) IMVM,LNORM,EPSILO
         IF (IDOKU1.GE.10) THEN
            IF (IMVM.GE.IDOKU1) THEN
               WRITE(LOUT,1309) IMVM,LNORM,EPSILO
               IDOKU1 = IMVM + IDOKU
            ENDIF
         ENDIF
      ENDIF
C
C***  RESTART AFTER NREST STEPS
C
      IF (KK1.EQ.NREST)  GO TO 120
C
      IF(IMVM.GT.ITMAX) GO TO 420
      IF(IMVM1.GT.20.AND.ILIN(1).EQ.0) THEN
C
C***  CONTINUE WITH (ANOTHER) METHOD
C
         AA1 = LNORM/LNORMA
         IF (AA1.GE.0.5) THEN
            INFOL(3) = IMVM
            INFOL(4) = INFOL(4) + 1
            GOTO 500
         ENDIF
         IMVM1 = 0
         LNORMA=LNORM
      ENDIF
      GO TO 200
C
C***  END OF THE ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      INFOL(5)=1
      GO TO 500
  420 ICONV = 2
      IF (IDOKU.GE.2) THEN
         WRITE(LOUT,1420) IMVM
         EPSDUM=1.0E+10
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSDUM,EPSREL,
     &           IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
      ENDIF
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS511:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &   '    STOPPING CRITERION:',G14.4,'  P R E S 2 0   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE , PRES20 METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1309 FORMAT('    STEP:',I7,'  DEFECT:',G12.4,' |1/PHI| <= ',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS511----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::129     ,,,,,FDS512.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS512(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 1 2   BICO-METHOD FOR THE SOLUTION OF THE LINEAR   ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1990                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,ID2,ID3R,ID4RS,ID5P,ID6PS,NIW,NDW,
     &         IDX,IDOPT,IMVM1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1,I,
     &         NREST,IREST
      DOUBLE PRECISION  ZERO,A,BE,RRS,RRS1,LNORMA,LNORM,ANORM,FDS151,
     &         FDS222,AA1,BMAX,PSN,
     &         RRS1H,RRSH,PSNH,HILF,R1000,SLEEP,EPSDUM
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, MVL = 65535)
      PARAMETER  (HILF = 75.0)
      PARAMETER  (SLEEP=1.0E-2)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = INFOL(3)
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = DLIN(1)
      IDOKU1 = IDOKU
C
      NIW = 3 * ND
      NDW = 9 * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 512
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      ID2   = ID1   + M
      ID3R  = ID2   + M
      ID4RS = ID3R  + M
      ID5P  = ID4RS + M
      ID6PS = ID5P  + M
      IDOPT = ID6PS + M
      IDX   = IDOPT + M
C
C     NREST = 500
C
C     NO RESTART UNTIL VALUES ARE OPTIMIZED:
C
      NREST = ITMAX
C
      IREST =   0
      PSN =1.0
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (INFOL(1).EQ.1.OR.MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(ID3R),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 51         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 51
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=512
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0.AND.INFOL(1).EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &   ILIN(1),IFILE(IF1),IFILE(IF2),ND,UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
         INFOL(1)=1
      ENDIF
C
C***  INITIAL VALUES
C
      IF (INFOL(2).EQ.0) THEN
         K  = 0
 60      IA = K
         NV = MIN(M-K,MVL)
         K  = K + NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 110 I = 1,NV
            X(I+IA) = ZERO
            DW(ID3R+IA+I-1) = ZERO
            DW(I+IA) = B(I+IA)*DW(ID1+IA+I-1)
110      CONTINUE
         IF (K.LT.M) GO TO 60
         DLIN(2) =FDS151(M,DW(1),ZERO)
         EPSREL  = EPSLIN * DLIN(2)
      ELSE
         CALL FDS231(X(1),DW(1),DW(ID3R),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM  + 1
         IMVM1 = IMVM1 + 1
         IF (INFOL(2).EQ.-1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
            DO 151 I = 1,M
               DW(I) = DW(ID3R+I-1)-B(I)*DW(ID1+I-1)
  151       CONTINUE
            INFOL(2)=0
            DLIN(2) = FDS151(M,DW(1),ZERO)
            EPSREL  = EPSLIN * DLIN(2)
         ENDIF
      ENDIF
C
C***  START WITH R = A * X - B
C
      K  = 0
 62   IA = K
      NV = MIN(M-K,MVL)
      K  = K + NV
      NV = NV-1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 65 I=0,NV
         DW(ID5P +IA+I) = B(1+IA+I) * DW(ID1+IA+I)
         DW(ID3R +IA+I) = DW(ID3R+IA+I)-DW(ID5P+IA+I)
         DW(ID4RS+IA+I) = DW(ID3R+IA+I)
         DW(ID5P +IA+I) = DW(ID3R+IA+I)
         DW(ID6PS+IA+I) = DW(ID3R+IA+I)
         DW(IDOPT+IA+I) = DW(ID3R+IA+I)
         DW(IDX  +IA+I) = X(1+IA+I)
  65  CONTINUE
      IF (K.LT.M) GO TO 62
      RRS   = FDS222(DW(ID3R),DW(ID4RS),M)
      LNORM = FDS151(M,DW(ID3R),ZERO)
      R1000 = LNORM
      LNORMA= LNORM
      ANORM = DLIN(2)
      IF(IDOKU.GE.2.AND.INFOL(2).EQ.0) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ILIN(1).EQ.0.AND.IDOKU.GE.2) WRITE(LOUT,1210) IMVM
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
      GOTO 200
C
C***  RESTART
C
 1111 CONTINUE
      IF (IDOKU.GE.2) WRITE(LOUT,1260) IMVM
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 116 I = 1,M
         DW(ID3R+I-1) = DW(IDOPT+I-1)
         DW(ID4RS+I-1) = DW(IDOPT+I-1)
         DW(ID5P+I-1) = DW(IDOPT+I-1)
         DW(ID6PS+I-1) = DW(IDOPT+I-1)
         DW(IDX+I-1) = X(I)
116   CONTINUE
      RRS   = FDS222(DW(ID3R),DW(ID4RS),M)
      PSN=1.0
C
C***  START OF THE BICO-ITERATION-LOOP
C
200   IF(MOD(IMVM,4).GE.2) ND=-ND
      CALL FDS232(DW(ID5P),DW(ID6PS),DW(1),DW(ID1),DW(ID2),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM + 2
      IMVM1 = IMVM1 + 2
      A = FDS222(DW(ID1),DW(ID6PS),M)
      IF (A.EQ.ZERO) THEN
C***  READ NORMALIZATION FACTORS
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(1),M,UR(IF3))
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 201 I = 1,M
            DW(ID3R+I-1) = DW(IDOPT+I-1)
            DW(ID4RS+I-1) = DW(ID2  +I-1)-DW(I)*B(I)
C           DW(ID4RS+I-1) = DW(ID2  +I-1)
            DW(ID5P+I-1) = DW(IDOPT+I-1)
            DW(ID6PS+I-1) = DW(ID4RS+I-1)
            DW(IDX+I-1) = X(I)
  201    CONTINUE
         RRS   = FDS222(DW(ID3R),DW(ID4RS),M)
         PSN=1.0
         IF(IDOKU.GE.2) WRITE (LOUT,1350) IMVM
         GOTO 200
      ELSE
         A=RRS/A/PSN
         CALL FDS221(M,DW(ID3R),DW(ID1),DW(ID3R),-A)
         CALL FDS221(M,DW(IDX),DW(ID5P),DW(IDX),-A)
      ENDIF
CALL SMOOTHING ALGORITHM
      CALL FDS541(DW(IDOPT),DW(ID3R),X(1),DW(IDX),DW(1),M)
      LNORM=FDS151(M,DW(IDOPT),ZERO)
C
      IF (IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF (IDOKU1.GE.10) THEN
         IF (IMVM.GE.IDOKU1) THEN
            WRITE(LOUT,1300) IMVM,LNORM
            IDOKU1=IMVM+IDOKU
         ENDIF
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM) GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
      IF(IMVM1.GT.1000.AND.ILIN(1).EQ.0) THEN
C
C***  CONTINUE WITH (ANOTHER) METHOD
C
         AA1 = LNORM/LNORMA
         IF (AA1.GE.0.1) THEN
            INFOL(4) = INFOL(4) + 1
            INFOL(3) = IMVM
            GOTO 500
         ENDIF
         IMVM1 = 0
         LNORMA=LNORM
      ENDIF
C
CHECK CONVERGENCE
C
      IF (MOD(IMVM1,NREST).LE.1) THEN
         R1000=LNORM
      ENDIF
      IF (MOD(IMVM1,NREST).GE.NREST-2) THEN
         IF (ABS(R1000-LNORM).LT.R1000*SLEEP) THEN
            IF (IREST.EQ.1) THEN
               NREST = NREST * 2
               IREST = 0
            ELSE
               IREST = 1
               GOTO 1111
            ENDIF
         ELSE
            IREST = 0
         ENDIF
      ENDIF
      CALL FDS221(M,DW(ID4RS),DW(ID2),DW(ID4RS),-A)
      RRS1 = FDS222(DW(ID3R),DW(ID4RS),M)
      IF (RRS1.EQ.ZERO) THEN
         K  = 0
 61      IA = K
         NV = MIN(M-K,MVL)
         K  = K + NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 111 I = 1,NV
            DW(ID4RS+IA+I-1) = DW(ID3R+IA+I-1)
            DW(ID6PS+IA+I-1) = DW(ID5P+IA+I-1)
111      CONTINUE
         IF (K.LT.M) GO TO 61
      RRS1 = FDS222(DW(ID3R),DW(ID4RS),M)
      ENDIF
      RRS1H=LOG(ABS(RRS1))
      RRSH=LOG(ABS(RRS))
      PSNH=LOG(ABS(PSN))
      IF (RRS1H-RRSH+PSNH.GT.HILF) THEN
         GOTO 1111
      ELSE
         IF (RRS.EQ.ZERO) THEN
C***  READ NORMALIZATION FACTORS
            PFE = 1
            CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
            CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(1),M,UR(IF3))
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
            DO 202 I = 1,M
               DW(ID3R+I-1) = DW(IDOPT+I-1)
               DW(ID4RS+I-1) = DW(ID2  +I-1)-DW(I)*B(I)
C              DW(ID4RS+I-1) = DW(ID2  +I-1)
               DW(ID5P+I-1) = DW(IDOPT+I-1)
               DW(ID6PS+I-1) = DW(ID4RS+I-1)
               DW(IDX+I-1) = X(I)
  202       CONTINUE
            RRS   = FDS222(DW(ID3R),DW(ID4RS),M)
            PSN=1.0
            IF(IDOKU.GE.2) WRITE (LOUT,1350) IMVM
            GOTO 200
         ELSE
            BE=RRS1/RRS *PSN
            CALL FDS221(M,DW(ID3R),DW(ID5P),DW(ID5P),BE)
            CALL FDS221(M,DW(ID4RS),DW(ID6PS),DW(ID6PS),BE)
         ENDIF
      ENDIF
      RRS  = RRS1
      PSN=FDS151(M,DW(ID6PS),ZERO)
      IF (PSN.NE.0.0) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 112 I = 1,M
            DW(ID6PS+I-1) = DW(ID6PS+I-1)/PSN
            DW(ID4RS+I-1) = DW(ID4RS+I-1)/PSN
112      CONTINUE
      ELSE
         PSN=1.0
      ENDIF
      GO TO 200
C
C***  END OF THE BICO-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      INFOL(5)=1
      GO TO 500
  420 ICONV = 2
      INFOL(5) = 1
      IF (IDOKU.GE.2) THEN
         WRITE(LOUT,1420) IMVM
         EPSDUM=1.0E+10
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSDUM,EPSDUM,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
      ENDIF
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS512:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUAL TO ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &       '    STOPPING CRITERION:',G14.4,'  B I C O   M E T H O D')
 1210 FORMAT('    STEP:',I7,'  B I C O   M E T H O D')
 1260 FORMAT(' RESTART AT STEP ',I7)
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1350 FORMAT('    STEP:',I7,'  BREAKDOWN: STANDARD CORRECTIVE ACTION')
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS512----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::130     ,,,,,FDS513.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS513(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 1 3   BIORTH-METHOD FOR THE SOLUTION OF THE LINEAR ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,ID2,ID3R,ID4RS,ID5P,ID6PS,NIW,NDW,
     &         IDX,IDOPT,IMVM1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1,I
      DOUBLE PRECISION     ZERO,RR,RR1,LNORM,ANORM,FDS151,
     &         FDS222,AA1,BMAX,A1,A2,BE1,BE2,RSRS,RSRS1,EPSDUM
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, MVL = 65535)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = INFOL(3)
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = DLIN(1)
      IDOKU1 = IDOKU
C
      NIW = 3 * ND
      NDW = 9 * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 513
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      ID2   = ID1   + M
      ID3R  = ID2   + M
      ID4RS = ID3R  + M
      ID5P  = ID4RS + M
      ID6PS = ID5P  + M
      IDOPT = ID6PS + M
      IDX   = IDOPT + M
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (INFOL(1).EQ.1.OR.MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(ID3R),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 51         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 51
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=513
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0.AND.INFOL(1).EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &      ILIN(1),IFILE(IF1),IFILE(IF2),ND,UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
         INFOL(1)=1
      ENDIF
C
C***  INITIAL VALUES
C
      IF (INFOL(2).EQ.0) THEN
         K  = 0
 60      IA = K
         NV = MIN(M-K,MVL)
         K  = K + NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 110 I = 1,NV
            X(I+IA) = ZERO
            DW(ID3R+IA+I-1) = ZERO
            DW(I+IA) = B(I+IA)*DW(ID1+IA+I-1)
110      CONTINUE
         IF (K.LT.M) GO TO 60
         DLIN(2) =FDS151(M,DW(1),ZERO)
         EPSREL  = EPSLIN * DLIN(2)
      ELSE
         CALL FDS231(X(1),DW(1),DW(ID3R),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM  + 1
         IMVM1 = IMVM1 + 1
         IF (INFOL(2).EQ.-1) THEN
            DO 151 I = 1,M
               DW(I) = DW(ID3R+I-1)-B(I)*DW(ID1+I-1)
  151       CONTINUE
            INFOL(2)=0
            DLIN(2) = FDS151(M,DW(1),ZERO)
            EPSREL  = EPSLIN * DLIN(2)
         ENDIF
      ENDIF
C
C***  START WITH R = A * X - B
C
      K  = 0
 62   IA = K
      NV = MIN(M-K,MVL)
      K  = K + NV
      NV = NV-1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 65 I=0,NV
         DW(ID5P +IA+I) = B(1+IA+I) * DW(ID1+IA+I)
         DW(ID3R +IA+I) = DW(ID3R+IA+I)-DW(ID5P+IA+I)
         DW(ID4RS+IA+I) = DW(ID3R+IA+I)
         DW(ID5P +IA+I) = DW(ID3R+IA+I)
         DW(ID6PS+IA+I) = DW(ID3R+IA+I)
         DW(IDOPT+IA+I) = DW(ID3R+IA+I)
         DW(IDX  +IA+I) = X(1+IA+I)
  65  CONTINUE
      IF (K.LT.M) GO TO 62
      RR    = FDS222(DW(ID3R),DW(ID3R),M)
      RSRS  = FDS222(DW(ID4RS),DW(ID4RS),M)
      LNORM = FDS151(M,DW(ID3R),ZERO)
      ANORM = DLIN(2)
      IF(IDOKU.GE.2.AND.INFOL(2).EQ.0) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ILIN(1).EQ.0.AND.IDOKU.GE.2) WRITE(LOUT,1210) IMVM
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  START OF THE BICO-ITERATION-LOOP
C
200   IF(MOD(IMVM,4).GE.2) ND=-ND
      CALL FDS232(DW(ID6PS),DW(ID5P),DW(1),DW(ID1),DW(ID2),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM + 2
      IMVM1 = IMVM1 + 2
      A1= FDS222(DW(ID1),DW(ID3R),M)
      A2= FDS222(DW(ID2),DW(ID4RS),M)
      IF (A1.EQ.ZERO.OR.A2.EQ.ZERO) THEN
         IERR = 513
         WRITE(LOUT,1250)
         GOTO 440
      ELSE
         A1=RR/A1
         A2=RSRS/A2
      ENDIF
      CALL FDS221(M,DW(ID3R),DW(ID1),DW(ID3R),-A1)
      CALL FDS221(M,DW(IDX),DW(ID6PS),DW(IDX),-A1)
      CALL FDS541(DW(IDOPT),DW(ID3R),X(1),DW(IDX),DW(1),M)
C
      LNORM=FDS151(M,DW(IDOPT),ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU1.GE.10) THEN
         IF (IMVM.GE.IDOKU1) THEN
            WRITE(LOUT,1300) IMVM,LNORM
            IDOKU1=IMVM+IDOKU
         ENDIF
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM) GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
      CALL FDS221(M,DW(ID4RS),DW(ID2),DW(ID4RS),-A2)
      RR1  = RR
      RSRS1= RSRS
      RR   = FDS222(DW(ID3R),DW(ID3R),M)
      RSRS = FDS222(DW(ID4RS),DW(ID4RS),M)
      IF (RR.EQ.ZERO) THEN
         IERR = 513
         WRITE(LOUT,1250)
         GO TO 440
      ENDIF
      IF (RSRS.EQ.ZERO) THEN
         K  = 0
 61      IA = K
         NV = MIN(M-K,MVL)
         K  = K + NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 111 I = 1,NV
            DW(ID4RS+IA+I-1) = DW(ID3R+IA+I-1)
            DW(ID6PS+IA+I-1) = DW(ID5P+IA+I-1)
111      CONTINUE
         IF (K.LT.M) GO TO 61
         RSRS = RR
      ENDIF
      BE1  = RR*A2/(RSRS1*A1)
      BE2  = RSRS*A1/(RR1*A2)
      CALL FDS221(M,DW(ID3R),DW(ID5P),DW(ID5P),BE1)
      CALL FDS221(M,DW(ID4RS),DW(ID6PS),DW(ID6PS),BE2)
      GO TO 200
C
C***  END OF THE BIORTH-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      INFOL(5)=1
      GO TO 500
  420 ICONV = 2
      INFOL(5) = 1
      IF (IDOKU.GE.2) THEN
         WRITE(LOUT,1420) IMVM
         EPSDUM=1.0E+10
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSDUM,EPSREL,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
      ENDIF
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS513:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &   '    STOPPING CRITERION:',G14.4,'  B I O R T H   M E T H O D')
 1210 FORMAT('    STEP:',I7,'  B I O R T H   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE, BIORTH METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS513----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::131     ,,,,,FDS514.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS514(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     #                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 1 4   AT-PRES-METHOD FOR THE SOLUTION OF THE LINEAR***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1988                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     #         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :    (SEE FDS500)                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,ISTEP,
     #         II2,II3,ID1,I,NIW,NDW,IDR,IDR1,IDOPT,
     #         IDX1,IDX0,IMVM1,
     #         IDRX,IDXX,KK,KK1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1
      DOUBLE PRECISION     ONE,ZERO,LNORM,ANORM,LNORMA,FDS151,FDS222,
     #         AK(2),SUM ,AN(2),AA1,BMAX,EPSDUM
      INTEGER IDDK
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, ONE = 1.0, MVL = 65535)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = INFOL(3)
      IMVM1 = 0
      ISTEP = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = DLIN(1)
      IDOKU1 = IDOKU
C
      NIW = 3  * ND
      NDW = 8 * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 514
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      IDR   = ID1   + M
      IDR1  = IDR   + M
      IDOPT = IDR1  + M
      IDX0  = IDOPT + M
      IDX1  = IDX0  + M
      IDDK  = IDX1 + M
C
      DO 10 I=1,M
         DW(IDX1+I-1) = ZERO
         DW(IDR1+I-1) = ZERO
   10 CONTINUE
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (INFOL(1).EQ.1.OR.MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     #                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(IDR1),IW(II2),IW(II3),M,ND,
     #                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 52         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 52
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=514
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0.AND.INFOL(1).EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     #        ILIN(1),IFILE(IF1),IFILE(IF2),ND,
     #        UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
         INFOL(1)= 1
      ENDIF
      IF (INFOL(2).EQ.0) THEN
         K  = 0
 50      IA = K
         NV = MIN(M-K,MVL)
         K  = K+NV
         DO 118 I = 1,NV
            X(I+IA) = ZERO
            DW(IDR+IA+I-1) = ZERO
118      CONTINUE
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 10001 I = 1,NV
            DW(IA+I)=B(IA+I)*DW(ID1+IA+I-1)
10001 CONTINUE
         IF (K.LT.M) GO TO 50
         DLIN(2) = FDS151(M,DW(1),ZERO)
         EPSREL  = EPSLIN * DLIN(2)
      ELSE
         CALL FDS231(X(1),DW(1),DW(IDR),IW(1),IW(II2),
     #        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM + 1
         IMVM1 = IMVM1 + 1
         IF (INFOL(2).EQ.-1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
            DO 151 I = 1,M
               DW(I) = DW(IDR+I-1)-B(I)*DW(ID1+I-1)
  151       CONTINUE
            INFOL(2)=0
            DLIN(2) = FDS151(M,DW(1),ZERO)
            EPSREL  = EPSLIN * DLIN(2)
         ENDIF
      ENDIF
C
C***  START WITH R = AX - B
C
      K  = 0
 41   IA = K
      NV = MIN(M-K,MVL)
      K  = K + NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 221 I = 1,NV
         DW(IDOPT+IA+I-1) = B(I+IA) * DW(ID1+IA+I-1)
         DW(IDR  +IA+I-1) = DW(IDR+IA+I-1) - DW(IDOPT+IA+I-1)
         DW(IDOPT+IA+I-1) = DW(IDR+IA+I-1)
         DW(IDX0 +IA+I-1) = X(I+IA)
221   CONTINUE
      IF (K.LT.M) GOTO 41
      LNORM = FDS151(M,DW(IDR),ZERO)
      LNORMA= LNORM
      ANORM = DLIN(2)
      IF(IDOKU.GE.2 .AND. INFOL(2).EQ.0) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ILIN(1).EQ.0.AND.IDOKU.GE.2) WRITE(LOUT,1210) IMVM
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  INITIAL VALUES
C
      DO 121 I = 1,2
         AK(I) = ZERO
121   CONTINUE
      IDRX = IDR
      KK   = 0
      KK1  = 0
C
C***  START OF THE ITERATION-LOOP
C
200   CONTINUE
      ISTEP=ISTEP+1
C     DW(IDDK) = A(T) * R(K)
      IF(MOD(IMVM,2).EQ.0) ND=-ND
      CALL FDS234(DW(IDRX),DW(1),DW(IDDK),IW(1),IW(II2),
     #     IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      KK   = KK  + 1
      KK1  = KK1 + 1
      IMVM = IMVM + 1
      IMVM1= IMVM1+ 1
C     DW(ID1) = A * A(T) * R(K)
      CALL FDS231(DW(IDDK),DW(1),DW(ID1),IW(1),IW(II2),
     #     IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM = IMVM + 1
      IMVM1= IMVM1+ 1
      K  = 0
      IF (KK.EQ.3) KK = 1
C
      IF (KK.EQ.1) AN(1) = FDS222(DW(IDR),DW(IDR),M)
      IF (KK.EQ.2) AN(2) = FDS222(DW(IDR1),DW(IDR1),M)
      IF (KK1.GE.1) AK(1) = -FDS222(DW(IDR),DW(ID1),M)/AN(1)
      IF (KK1.GE.2) AK(2) = -FDS222(DW(IDR1),DW(ID1),M)/AN(2)
      SUM = 0.
      DO 110 I = 1,2
         SUM = SUM + AK(I)
  110 CONTINUE
      IF (SUM.EQ.ZERO) THEN
         IERR = 514
         WRITE(LOUT,1250)
         GOTO 440
      ELSE
         SUM = ONE/SUM
      ENDIF
      IF (KK.EQ.1) IDXX = IDX1
      IF (KK.EQ.2) IDXX = IDX0
      K  = 0
  80  IA = K
      NV = MIN(M-K,MVL)
      K  = K+NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 10003 I = 1,NV
         DW(IDXX+IA+I-1) = (DW(IDDK+IA+I-1)+AK(1)*DW(IDX0+IA+I-1)
     #                                     +AK(2)*DW(IDX1+IA+I-1))*SUM
10003 CONTINUE
      IF (K.LT.M) GO TO 80
C
      IF (KK.EQ.1) IDRX = IDR1
      IF (KK.EQ.2) IDRX = IDR
C
      K  = 0
  90  IA = K
      NV = MIN(M-K,MVL)
      K  = K+NV
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 10004 I = 1,NV
         DW(IDRX+IA+I-1) =(DW(ID1+IA +I-1)+AK(1)*DW(IDR +IA+I-1)
     #                                    +AK(2)*DW(IDR1+IA+I-1))*SUM
10004 CONTINUE
      IF (K.LT.M) GO TO 90
C
C***  CHECK STOPPING CRITERION
C
      CALL FDS541(DW(IDOPT),DW(IDRX),X(1),DW(IDXX),DW(1),M)
      LNORM = FDS151(M,DW(IDOPT),ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF (IDOKU1.GE.10) THEN
        IF (IMVM.GE.IDOKU1) THEN
          WRITE(LOUT,1300) IMVM,LNORM
          IDOKU1 = IMVM + IDOKU
        ENDIF
      ENDIF
C
      IF(LNORM.GT.ANORM) GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     #        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
C
      IF(IMVM.GT.ITMAX) GO TO 420
      GO TO 200
C
C***  END OF THE ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      INFOL(5)=1
      GO TO 500
  420 ICONV = 2
      IF (IDOKU.GE.2) THEN
         WRITE(LOUT,1420) IMVM
         EPSDUM=1.0E+10
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSDUM,EPSREL,
     #        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
      ENDIF
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS514:'/
     #       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     #       ' COEFFICIENTS ON FILE.'/
     #       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     #   '    STOPPING CRITERION:',G14.4,' A T P R E S   M E T H O D')
 1210 FORMAT('    STEP:',I7,'  A T P R E S   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE , ATPRES METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     #       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     #       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     #       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS514----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::132     ,,,,,FDS520.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS520(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,EPSREL,ICONV,INFOL,DLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 2 0   CGS -METHOD FOR THE SOLUTION OF THE LINEAR   ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE.                                                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1990                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR,
     &         INFOL(1)
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN,EPSREL,DLIN(1)
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF2,IF3,MODNEW,LOUT,IDOKU,IMVM,
     &         II2,II3,ID1,IDR,IDP,IDH,IDR0,IDU,NIW,NDW,
     &         IDX,IDOPT,IMVM1,IOS,RN1,PFE,MVL,K,IA,NV,IDOKU1,I
      DOUBLE PRECISION     ZERO,A,AP,BE,ONE,RR,RR1,LNORM,ANORM,FDS151,
     &         FDS222,BMAX,FDS101
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS :                                              ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0, MVL = 65535, ONE = 1.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     --------------------
C
C
      IMVM  = 0
      IMVM1 = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF2    = ILIN(8)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      BMAX   = FDS101(M,B,EPS)
      IDOKU1 = IDOKU
C
      NIW = 3 * ND
      NDW = 9 * M
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 520
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1     + M
      IDU   = ID1   + M
      IDR   = IDU   + M
      IDH   = IDR   + M
      IDP   = IDH   + M
      IDR0  = IDP   + M
      IDOPT = IDR0  + M
      IDX   = IDOPT + M
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF (MODNEW.NE.0) THEN
C
C***  READ NORMALIZATION FACTORS
C
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS309(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
      ELSE
         IF (ILIN(15).EQ.1) THEN
            CALL FDS531(DW(ID1),IW(II3),LLIN,M,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF (IERR.NE.0) THEN
               IERR = 0
               ILIN(15) = 0
            ENDIF
         ENDIF
         IF (ILIN(15).EQ.0) THEN
            CALL FDS532(DW(1),DW(ID1),DW(IDR),IW(II2),IW(II3),M,ND,
     &                  IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
            IF(IERR.NE.0) GO TO 440
         ENDIF
         IF (ILIN(15).EQ.2) THEN
            K  = 0
 51         IA = K
            NV = MIN(M-K,MVL)
            K  = K+NV
            DO 117 I = 1,NV
               DW(ID1+IA+I-1) = 1.
117         CONTINUE
            IF (K.LT.M) GO TO 51
         ENDIF
         PFE = 1
         CALL FDS305(IFILE(IF3),IOS,RN1,UR(IF3))
         CALL FDS310(IFILE(IF3),IOS,RN1,PFE,DW(ID1),M,UR(IF3))
         IF (IOS.NE.0) THEN
            IERR=520
            WRITE(LOUT,1100)
            GOTO 440
         ENDIF
      ENDIF
      IF(MODNEW.EQ.0) THEN
C
C***  NORMALIZATION
C
         CALL FDS522(DW(ID1),DW(1),IW(II2),IW(II3),
     &   ILIN(1),IFILE(IF1),IFILE(IF2),ND,UR(IF1),UR(IF2),IERR)
         IF(IERR.NE.0) GO TO 440
      ENDIF
      IF (ILIN(16).NE.1) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 118 I = 1,M
            X(I) = ZERO
            DW(IDR+I-1) = ZERO
            DW(I) = B(I)*DW(ID1+I-1)
118      CONTINUE
         EPSREL  = EPSLIN * FDS151(M,DW(1),ZERO)
      ELSE
         CALL FDS231(X(1),DW(1),DW(IDR),IW(1),IW(II2),
     &        IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
         IMVM  = IMVM + 1
         IMVM1 = IMVM1 + 1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 151 I = 1,M
            DW(I) = DW(IDR+I-1)-B(I)*DW(ID1+I-1)
  151    CONTINUE
         EPSREL  = EPSLIN * FDS151(M,DW(1),ZERO)
      ENDIF
C
C***  START WITH R = A * X - B
C
      K  = 0
 62   IA = K
      NV = MIN(M-K,MVL)
      K  = K + NV
      NV = NV-1
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 65 I=0,NV
         DW(IDR  +IA+I) = DW(IDR+IA+I) -B(1+IA+I) * DW(ID1+IA+I)
         DW(IDR0 +IA+I) = DW(IDR+IA+I)
         DW(IDOPT+IA+I) = DW(IDR+IA+I)
         DW(IDP  +IA+I) = ZERO
         DW(IDH  +IA+I) = ZERO
         DW(IDX  +IA+I) = X(1+IA+I)
  65  CONTINUE
      IF (K.LT.M) GO TO 62
      ANORM = FDS151(M,DW(IDR),ZERO)
      BE=ZERO
      IF(IDOKU.GE.2) WRITE(LOUT,1200) ANORM,EPSREL
      IF (ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GOTO 410
      ENDIF
C
C***  START OF THE CGS-ITERATION-LOOP
 
      RR=FDS222(DW(IDR0),DW(IDR),M)
200   CALL FDS221(M,DW(IDR),DW(IDH),DW(IDU),BE)
      CALL FDS221(M,DW(IDH),DW(IDP),DW(1),BE)
      CALL FDS221(M,DW(IDU),DW(1),DW(IDP),BE)
      IF(MOD(IMVM,2).GE.1) ND=-ND
      CALL FDS231(DW(IDP),DW(1),DW(ID1),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM  + 1
      IMVM1 = IMVM1 + 1
      AP = FDS222(DW(IDR0),DW(ID1),M)
      RR1=RR
      IF (AP.EQ.ZERO.OR.RR.EQ.ZERO) THEN
         IERR = 520
         WRITE(LOUT,1250)
         GOTO 440
      ENDIF
      A=RR/AP
      CALL FDS221(M,DW(IDU),DW(ID1),DW(IDH),-A)
      CALL FDS221(M,DW(IDU),DW(IDH),DW(IDU),ONE)
      CALL FDS221(M,DW(IDX),DW(IDU),DW(IDX),-A)
      IF(MOD(IMVM,2).GE.1) ND=-ND
      CALL FDS231(DW(IDU),DW(1),DW(ID1),
     &  IW(1),IW(II2),IW(II3),ILIN(1),M,ND,IFILE(IF2),UR(IF2))
      IMVM  = IMVM + 1
      IMVM1 = IMVM1 + 1
      CALL FDS221(M,DW(IDR),DW(ID1),DW(IDR),-A)
      RR=FDS222(DW(IDR0),DW(IDR),M)
      BE = RR/RR1
      CALL FDS541(DW(IDOPT),DW(IDR),X(1),DW(IDX),DW(1),M)
C
      LNORM=FDS151(M,DW(IDOPT),ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU1.GE.10) THEN
         IF (IMVM.GE.IDOKU1) THEN
            WRITE(LOUT,1300) IMVM,LNORM
            IDOKU1=IMVM+IDOKU
         ENDIF
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM) GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(1),DW(IDOPT),LNORM,BMAX,EPSLIN,EPSREL,
     &        IDOKU,IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
      GO TO 200
C
C***  END OF THE CGS-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      GO TO 500
  420 ICONV = 2
      IF(IDOKU.GE.2) WRITE(LOUT,1420) IMVM
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS520:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &       '    STOPPING CRITERION:',G14.4,'  C G S   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE, CGS METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS520----------------------------------------------------
      E  N  D
C:::133     ,,,,,FDS522.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS522(DIAG,DQ,IAX,ILD,ILIN,IFILE1,IFILE2,
     &                  ND,UR1,UR2,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 2 2   COMPUTES THE PRODUCT OF THE MATRIX QD, WHICH ***
C**      IS STORED BY DIAGONALS, WITH THE DIAGONAL-MATRIX DIAG,     ***
C**      WHICH IS GIVEN BY ITS MAIN-DIAGONAL. QD IS READ FROM       ***
C**      FILE 1, DIAG * QD IS WRITTEN ON FILE 2.                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1989                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IAX(1),ILD(1),ILIN(1),IFILE1,IFILE2,ND,UR1,UR2,IERR
      DOUBLE PRECISION   DIAG(1), DQ(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I IN  I  MAIN-DIAGONAL OF DIAGONAL-MATRIX DIAG
C        I      I     I  ARRAY : DIAG(M)
C--------I------I-----I------------------------------------------------
C DQ     I  DP  I  -  I  WORKARRAY FOR ONE DIAGONAL OF THE MATRIX QD
C        I      I     I  ARRAY : DQ(M)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  START-ADRESS-1 FOR DIAGONAL-VECTOR DIAG FOR
C        I      I     I  EACH DIAGONAL OF QD
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL OF QD
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION VECTOR
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
CIFILE1,2I  I   I IN  I  UNIT-NUMBERS
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF QD
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,ID,IOS,IDOKU,JJ,L,LOUT,PFE1,PFE2,RN1,RN2,
     &          IIA1,IIA2,INDMAX,JJP
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      IERR=0
CWSS  CALL FDS305(IFILE1,IOS,RN1,UR1)
      PFE1 = 1
CWSS  CALL FDS305(IFILE2,IOS,RN2,UR2)
      PFE2 = 1
      JJ     = 0
      LOUT  = ILIN(12)
      IDOKU = ILIN(13)
CWSS
         RN1 = -1
         L=1
         CALL FDS312(IFILE1,IOS,RN1,IIA1,PFE1,DQ,L,UR1,0)
         RN2 = -1
      IF(ILIN(14).LT.2) THEN
         CALL FDS311(IFILE2,IOS,RN2,IIA2,PFE2,DQ,L,UR2,INDMAX,JJP)
       ELSE
         CALL FDS313(IFILE2,IOS,RN2,IIA2,PFE2,DQ,L,UR2)
       ENDIF
CWSS
      DO 100 ID=1,ND
         L = ILD(ID)
         IF (ILIN(14).EQ.2) THEN
C
C**         MATRIX ALREADY PACKED
C
            CALL FDS312(IFILE1,IOS,RN1,IIA1,PFE1,DQ,L,UR1,0)
         ELSE
C
C**         MATRIX STILL UNPACKED
C
            CALL FDS309(IFILE1,IOS,RN1,PFE1,DQ,L,UR1)
         END IF
 
         IA = IAX(ID)
 
         DO 50 I=1,L
            DQ(I) = DQ(I) * DIAG(I+IA)
   50    CONTINUE
         JJ = JJ+L
         IF (ILIN(14).EQ.1) THEN
C
C***        CALL THE PACK-SERVICE-ROUTINE FDS311
C
            CALL FDS311(IFILE2,IOS,RN2,IIA2,PFE2,DQ,L,UR2,INDMAX,JJP)
C
         END IF
 
         IF (ILIN(14).EQ.2) THEN
C
            CALL FDS313(IFILE2,IOS,RN2,IIA2,PFE2,DQ,L,UR2)
C
         END IF
 
         IF (ILIN(14).LT.1) THEN
C
C***        STORE COMPLETE DIAGONAL
C
            CALL FDS310(IFILE2,IOS,RN2,PFE2,DQ,L,UR2)
         ENDIF
         IF(IOS.NE.0) THEN
            IERR = IFILE2*10000 + 522
            RETURN
         ENDIF
  100 CONTINUE
      IF(IDOKU.GE.2.AND.ILIN(14).LE.1) WRITE(LOUT,1000) JJ
      IF(IDOKU.GE.2.AND.ILIN(14).EQ.1) WRITE(LOUT,1005) JJP
      IF(IDOKU.GE.2.AND.ILIN(14).EQ.1) WRITE(LOUT,1010) INDMAX
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(4X,'SIZE OF MATRIX:       ',I10)
 1005 FORMAT(4X,'SIZE OF PACKED MATRIX:',I10)
 1010 FORMAT(4X,'STORAGE USED BY IDQP IN /FDSIND/:',I10)
C1100 FORMAT(' *** ERROR IN FDS522:'/
C    &       '     THE DIMENSION OF THE ARRAY IN COMMON /FDSIND/ :',
C    &       I12,'  IS TOO SMALL.'/)
C
C-----END OF FDS522----------------------------------------------------
      E    N    D
C:::134     ,,,,,FDS531.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS531(DIAG,ILD,LLIN,M,IFILE,UR,EPS,ILIN,IERR,LOUT)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 3 1   READS THE MAIN-DIAGONAL FROM FILE.           ***
C**      ERROR-EXIT, IF MAIN-DIAGONAL IS NOT OCCUPIED.              ***
C**      THE NORMALIZATION COEFFICIENTS ARE COMPUTED AS RECIPROCAL  ***
C**      VALUES OF THE MAIN DIAGONAL.                               ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILD(1), M, IFILE, UR, IERR, LOUT
      DOUBLE PRECISION  DIAG(1), EPS
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I OUT I  NORMALIZATION FACTORS        ARRAY : DIAG(M)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH FOR EACH DIAGONAL     ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  LLIN(I) = TRUE INDICATES A NONZERO DIAGONAL
C        I      I     I  ARRAY : LLIN(MN)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  LENGTH OF MAIN-DIAGONAL
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLE
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE CONSTANT
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I OUT I  LINSOL INFORMATION-VECTOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  OUTPUT FILE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, L, IA, ID, IMIN, IOS, K, PFE, PFE2, RN, PACK
      INTEGER  ILIN(1)
      DOUBLE PRECISION     ONE, HUND, DWEPS
C**
C**       CONSTANTS:
C**       ---------
C**
      PARAMETER (ONE = 1.0, HUND = 100.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      PACK = ILIN(14)
      IF(.NOT.LLIN(M)) THEN
         IERR = 531
         IMIN = 1
         WRITE(LOUT,1000) IMIN
         RETURN
      ENDIF
      IF(PACK.EQ.2) THEN
      RN = -1
      L=1
      CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,0)
      ELSE
      CALL FDS305(IFILE,IOS,RN,UR)
      ENDIF
      PFE2 = 1
      ID  = 0
      DO 100 I=1,M-1
         IF(LLIN(I)) THEN
            ID = ID + 1
            IF(PACK.EQ.2) THEN
              L = ILD(ID)
              CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,L,UR,1)
            ELSE
            CALL FDS303(IFILE,IOS,1,ILD(ID),PFE2,RN,IERR,UR)
            ENDIF
         ENDIF
  100 CONTINUE
      IF(PACK.EQ.2) THEN
        CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DIAG,M,UR,0)
      ELSE
        CALL FDS309(IFILE,IOS,RN,PFE2,DIAG,M,UR)
      ENDIF
      DWEPS = HUND*EPS
      IMIN=0
      DO 150 I=1,M
         IF(ABS(DIAG(I)).LT.DWEPS)
     &      IMIN=I
  150 CONTINUE
      IF(IMIN.GT.0) THEN
            IERR=531
            WRITE(LOUT,1000) IMIN
            RETURN
      ENDIF
      DO 200 I=1,M
         DIAG(I) = ONE / DIAG(I)
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(' *** ERROR IN FDS531:'/
     &   '     ZERO ON THE MAIN DIAGONAL AT I=',I10/
     &   '     TAKE METHOD WITH LINE PRECONDITIONING (ILIN(15)=0)'/)
C
C-----END OF FDS531----------------------------------------------------
      E    N    D
C:::135     ,,,,,FDS532.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS532(DQ,DQMAX,SIG,IAX,ILD,M,ND,IFILE,UR,EPS,
     *             ILIN,IERR,LOUT)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 3 2   COMPUTES THE NORMALIZATION COEFFICIENTS      ***
C**      OF THE MATRIX A, WHICH IS STORED BY DIAGONALS. THE RECI-   ***
C**      PROCAL VALUES ARE STORED IN DQMAX.                         ***
C**      THE MATRIX WILL BE NORMALIZED, SO THAT THE SUM OF THE      ***
C**      ABSOLUTE VALUES OF EACH LINE IS EQUAL ONE.                 ***
C**      THE NORMALIZATION COEFFICIENT HAS THE SIGN OF THE          ***
C**      CORRESPONDING ELEMENT IN THE MAIN DIAGONAL OF THE          ***
C**      ORIGINAL MATRIX.                                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IAX(1),ILD(1),M,ND,IFILE,UR,ILIN(1),IERR,LOUT
      DOUBLE PRECISION  DQ(1),DQMAX(1),SIG(1),EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DQ,SIG I  DP  I  -  I  WORKARRAYS FOR ONE DIAGONAL OF MATRIX A
C        I      I     I  WITH MAXIMUM LENGTH M
C--------I------I-----I------------------------------------------------
C DQMAX  I  DP  I OUT I  VECTOR OF THE NORMALIZATION COEFFICIENTS OF
C        I      I     I  LENGTH M
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  LINE-NUMBER-1 OF THE FIRST ELEMENT OF EACH
C        I      I     I  DIAGONAL
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE MATRIX A
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF MATRIX A
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE CONSTANT
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  LINSOL-INFORMATION VECTOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  OUTPUTFILE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IA,IA1,ID,IOS,L,PFE,PFE2,RN,IMIN,PACK
      DOUBLE PRECISION  ZERO, ONE, DWEPS, HUND
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0, ONE = 1.0, HUND = 100.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      PACK = ILIN(14)
      DO 10 I=1,M
         DQMAX(I) = ZERO
   10 CONTINUE
      IF(PACK.EQ.2) THEN
        RN = -1
        L=1
        CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DQ,L,UR,0)
      ELSE
        CALL FDS305(IFILE,IOS,RN,UR)
      ENDIF
      PFE2 = 1
      DO 100 ID=1,ND
         L = ILD(ID)
         IF(PACK.EQ.2) THEN
           CALL FDS312(IFILE,IOS,RN,PFE,PFE2,DQ,L,UR,0)
         ELSE
           CALL FDS309(IFILE,IOS,RN,PFE2,DQ,L,UR)
         ENDIF
         IA = IAX(ID)
         DO 50 I=1,L
            DQMAX(I+IA) = DQMAX(I+IA)+ABS(DQ(I))
   50    CONTINUE
         IF(L.EQ.M) THEN
         DO 60 I=1,L
            SIG(I) = SIGN(ONE,DQ(I))
  60     CONTINUE
         ENDIF
  100 CONTINUE
      DWEPS = HUND*EPS
      IMIN=0
      DO 150 I=1,M
         IF(DQMAX(I).LT.DWEPS)
     &      IMIN=I
  150 CONTINUE
      IF(IMIN.GT.0) THEN
            IERR=532
            WRITE(LOUT,1000) IMIN
            RETURN
      ENDIF
      DO 200 I=1,M
         DQMAX(I) = SIG(I) / DQMAX(I)
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(' *** ERROR IN FDS532:'/
     &       '     LINE CONTAINS NO NONZERO ELEMENT, I=',I10/)
C
C-----END OF FDS532----------------------------------------------------
      E    N    D
C:::136     ,,,,,FDS541.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS541(ROPT,R,XOPT,X,DW,M)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 4 1   COMPUTES THE OPTIMIZED SOLUTION AND          ***
C**      RESIDUAL OF THE NORMALIZED SYSTEM.                         ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1990                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  M
      DOUBLE PRECISION     ROPT(1), R(1), XOPT(1), X(1), DW(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ROPT   I  DP  I I/O I  OPTIMIZED RESIDUAL OF LENGTH M
C--------I------I-----I------------------------------------------------
C R      I  DP  I IN  I  LAST RESIDUAL OF LENGTH M
C--------I------I-----I------------------------------------------------
C XOPT   I  DP  I I/O I  OPTIMIZED SOLUTION OF LENGTH M
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  LAST SOLUTION OF LENGTH M
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORK ARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  VECTOR LENGTH
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I
      DOUBLE PRECISION     ZERO, ALPHA, FDS222
C**                                                                 ***
C**       CONSTANTS:                                                ***
C**       ---------                                                 ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 20 I=1,M
         DW(I) = R(I) - ROPT(I)
   20 CONTINUE
      ALPHA = FDS222(DW,DW,M)
      IF(ALPHA.EQ.ZERO) GO TO 30
      ALPHA = -FDS222(ROPT,DW,M) / ALPHA
   30 CALL FDS221(M,ROPT,DW,ROPT,ALPHA)
      DO 40 I=1,M
         DW(I) = X(I) - XOPT(I)
   40 CONTINUE
      CALL FDS221(M,XOPT,DW,XOPT,ALPHA)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS541----------------------------------------------------
      E    N    D
C:::137     ,,,,,FDS551.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS551(DQ,QR,LNORM,BMAX,EPSLIN,
     &                  EPSREL,IDOKU,IFILE,LOUT,M,UR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 5 1   COMPUTES THE RESIDUAL R=AX-B. THE NEW        ***
C**      STOPPING CRITERION EPSREL FOR THE ITERATION OF THE LINEAR  ***
C**      SYSTEM IS COMPUTED OF THE L2NORM OF THE RESIDUAL OF THE    ***
C**      NORMALIZED SYSTEM, THE RELATIVE MAXIMUM OF THE RESIDUAL R  ***
C**      AND THE GIVEN TOLERANCE EPSLIN.                            ***
C**      ( R IS COMPUTED OF THE RESIDUAL OF THE NORMALIZED SYSTEM   ***
C**      AND THE NORMALIZATION COEFFICIENTS. )                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IDOKU,IFILE,LOUT,M,UR
      DOUBLE PRECISION  DQ(1),QR(1),LNORM,BMAX,EPSLIN,EPSREL
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DQ     I  DP  I  -  I  WORKARRAY FOR THE NORMALIZATION KOEFFICIENTS
C        I      I     I  OF LENGTH M
C--------I------I-----I------------------------------------------------
C QR     I  DP  I IN  I  RESIDUAL OF THE NORMALIZED SYSTEM OF LENGTH M
C--------I------I-----I------------------------------------------------
C LNORM  I  DP  I IN  I  L2NORM OF THE RESIDUAL OF THE NORMALIZED
C        I      I     I  SYSTEM
C--------I------I-----I------------------------------------------------
C BMAX   I  DP  I IN  I  ABSOLUTE MAXIMUM OF VECTOR B
C--------I------I-----I------------------------------------------------
C EPSLIN I  DP  I IN  I  RELATIVE TOLERANCE FOR THE SOLUTION OF THE
C        I      I     I  LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C EPSREL I  DP  I OUT I  NEW STOPPING CRITERION FOR THE ITERATION OF
C        I      I     I  THE NORMALIZED SYSTEM.
C--------I------I-----I------------------------------------------------
C IDOKU  I  I   I IN  I  DOCUMENTATION-PARAMETER
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IA,K,MVL,NV,RN1,IOS,PFE
      DOUBLE PRECISION  EPSMAX, ZERO, FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0,MVL=65535)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      CALL FDS305(IFILE,IOS,RN1,UR)
      PFE=1
      CALL FDS309(IFILE,IOS,RN1,PFE,DQ,M,UR)
      K=0
   50 IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 100 I=1,NV
         DQ(I+IA) = QR(I+IA)/DQ(I+IA)
  100 CONTINUE
      IF(K.LT.M) GO TO 50
      EPSMAX = FDS101(M,DQ,ZERO) / BMAX
      IF(EPSMAX.LT.EPSLIN) THEN
         IF(IDOKU.GE.2) WRITE(LOUT,1100) EPSMAX
      ELSE
         EPSREL = 0.7 * LNORM * EPSLIN / EPSMAX
         IF(IDOKU.GE.2) WRITE(LOUT,1200) EPSMAX, EPSREL
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1100 FORMAT('    MAXIMUM OF RELATIVE DEFECT:',G15.4,/
     &       '    LINSOL ITERATION COMPLETE.')
 1200 FORMAT('    MAXIMUM OF RELATIVE DEFECT:',G15.4/
     &       '    NEW STOPPING CRITERION:',G19.4)
C-----END OF FDS551----------------------------------------------------
      E    N    D
C:::138     ,,,,,FDS570.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS570(ILIN,MNEW,NK,NXNEW,NYNEW,NZNEW,
     *                   NDNEW,QNEW,ANEW,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 5 7 0   AMOUNT FORMULAE FOR NEW GRID AND ORDER       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER * 1 - INSTRUCTION HAS THE AIM,         ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1), MNEW, NK, NXNEW, NYNEW, NZNEW, NDNEW, IERR
      DOUBLE PRECISION     QNEW, ANEW
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I     INFORMATION VECTOR
C--------I------I-----I------------------------------------------------
C MNEW   I  I   I IN  I     NEW NUMBER OF UNKNOWNS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I     NUMBER OF SOLUTION COMPONENTS OR
C        I      I     I     DIFFERENTIAL EQUATIONS
C--------I------I-----I------------------------------------------------
C NXNEW  I  I   I IN  I     NEW NUMBER OF POINTS IN X DIRECTION
C NYNEW  I  I   I IN  I     NEW NUMBER OF POINTS IN Y DIRECTION
C NZNEW  I  I   I IN  I     NEW NUMBER OF POINTS IN Z DIRECTION
C--------I------I-----I------------------------------------------------
C NDNEW  I  I   I IN  I     NEW NUMBER OF DIAGONALS
C--------I------I-----I------------------------------------------------
C QNEW   I  I   I IN  I     NEW ORDER (AVERAGE OF EACH DIRECTION)
C--------I------I-----I------------------------------------------------
C ANEW   I  DP  I OUT I     RELATIVE AMOUNT FOR LINSOL
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I     ERROR INFORMATION
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION  A1, A2, DIM
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  ANEW = MVM(QNEW) * MVM(MNEW) * NDNEW * MNEW
C              ORDER   *   GRID    * DIAGS * UNKNOWNS
C          =    A1     *    A2     * DIAGS * UNKNOWNS
C
      IF (NZNEW.GT.0) THEN
         DIM = 3.
      ELSE
         DIM = 2.
      ENDIF
      A1 = QNEW + 2.
      A2 = (NXNEW + NYNEW + NZNEW)/DIM - 2.
      ANEW = A1 * A2 * NDNEW * MNEW
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS570----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::139     ,,,,,FDS612.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS612(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,ICONV,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 6 1 2   BICO-METHOD FOR THE SOLUTION OF THE LINEAR   ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE. (INCORE-VERSION FOR NORMALIZED MATRIX).              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF3,MODNEW,LOUT,IDOKU,IDOKUV,IMVM,
     &         II2,II3,ID1,ID2,ID3R,ID4RS,ID5P,ID6PS,IDX,I,
     &         NIW,NDW,IOS,PFE,RN,NEXTRA
      DOUBLE PRECISION  ZERO,A,APPS,BE,RRS,RRS1,
     &                  LNORM,ANORM,EPSREL,BMAX,FDS101,FDS151,FDS222
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0 , NEXTRA = 1000)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IMVM  = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      IDOKUV = IDOKU
      NIW=3*ND
      NDW=7*M+3*NEXTRA
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 516
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1
      ID2   = ID1   + M
      ID3R  = ID2   + M
      ID4RS = ID3R  + M
      ID5P  = ID4RS + M + NEXTRA
      ID6PS = ID5P  + M + NEXTRA
      IDX   = ID6PS + M + NEXTRA
C
      DO 10 I=ID4RS+M,IDX-1
         DW(I) = ZERO
   10 CONTINUE
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF(MODNEW.EQ.0) THEN
      IF(ILIN(15).EQ.1) THEN
C
C***  PRECONDITIONING WITH ELEMENTS OF MAIN-DIAGONAL
C
CWSS  CALL FDS531(DW(ID1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,IERR,
CWSS &            LOUT)
      CALL FDS531(DW(ID1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,ILIN,
     &            IERR,LOUT)
      IF(IERR.NE.0) THEN
         IERR = 0
         ILIN(15) = 0
      ENDIF
      ENDIF
      IF(ILIN(15).EQ.0) THEN
C
C***  LINE - PRECONDITIONING
C
CWSS  CALL FDS532(DW(ID3R),DW(ID1),DW(ID2),IW(II2),IW(II3),M,ND,
CWSS &            IFILE(IF1),UR(IF1),EPS,IERR,LOUT)
      CALL FDS532(DW(ID3R),DW(ID1),DW(ID2),IW(II2),IW(II3),M,ND,
     &            IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
      IF(IERR.NE.0) GO TO 440
      ENDIF
      IF(ILIN(15).EQ.2) THEN
         DO 117 I=1,M
            DW(ID1+I-1) = 1.
  117    CONTINUE
      ENDIF
C
C***  NORMALIZATION OF THE MATRIX
C
      CALL FDS622(DW(ID1),IW(II2),IW(II3),ILIN,IFILE(IF1),M,
     &            ND,UR(IF1),IERR)
      IF(IERR.NE.0) GO TO 440
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS310(IFILE(IF3),IOS,RN,PFE,DW(ID1),M,UR(IF3))
      IF(IOS.NE.0) THEN
         IERR = 516
         WRITE(LOUT,1100)
         GO TO 440
      ENDIF
      ELSE
C
C***  READ NORMALIZATION FACTORS
C
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS309(IFILE(IF3),IOS,RN,PFE,DW(ID1),M,UR(IF3))
      ENDIF
C
C***  INITIAL VALUES
C
      BMAX=FDS101(M,B,ZERO)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 110 I=1,M
         X(I) = ZERO
         DW(ID3R -1+I) = -B(I)*DW(ID1-1+I)
         DW(ID4RS-1+I) = DW(ID3R-1+I)
         DW(ID5P -1+I) = DW(ID3R-1+I)
         DW(ID6PS-1+I) = DW(ID3R-1+I)
         DW(IDX-1+I)   = ZERO
         B(I) = DW(ID3R-1+I)
  110 CONTINUE
      RRS = FDS222(DW(ID3R),DW(ID4RS),M)
      LNORM = FDS151(M,DW(ID3R),ZERO)
      ANORM = LNORM
      EPSREL = EPSLIN * ANORM
      IF(IDOKU.GE.2) WRITE(LOUT,1200) ANORM,EPSREL
      IF(ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GO TO 410
      ENDIF
C
C***  START OF THE BICO-ITERATION-LOOP
C
  200 CALL FDS632(DW(ID5P),DW(ID6PS),DW(ID1),DW(ID2),IW(1),
     &            IW(II2),IW(II3),M,ND)
      IMVM = IMVM + 2
      APPS = FDS222(DW(ID1),DW(ID6PS),M)
      IF(APPS.EQ.ZERO.OR.RRS.EQ.ZERO) THEN
         IERR = 516
         WRITE(LOUT,1250)
         GO TO 440
      ELSE
         A = RRS/APPS
      ENDIF
      CALL FDS221(M,DW(IDX),DW(ID5P),DW(IDX),-A)
      CALL FDS221(M,DW(ID3R),DW(ID1),DW(ID3R),-A)
      CALL FDS541(B,DW(ID3R),X,DW(IDX),DW(ID1),M)
      LNORM = FDS151(M,B,ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU.GE.10.AND.IMVM.GE.IDOKUV) THEN
         WRITE(LOUT,1300) IMVM,LNORM
         IDOKUV=IDOKU+IDOKUV
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM)  GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(ID1),B,LNORM,BMAX,EPSLIN,EPSREL,IDOKU,
     &        IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
C
      CALL FDS221(M,DW(ID4RS),DW(ID2),DW(ID4RS),-A)
      RRS1 = FDS222(DW(ID3R),DW(ID4RS),M)
      IF(RRS1.EQ.ZERO) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 111 I=1,M
            DW(ID4RS+I-1) = DW(ID3R+I-1)
            DW(ID6PS+I-1) = DW(ID5P+I-1)
  111    CONTINUE
         RRS1 = FDS222(DW(ID3R),DW(ID4RS),M)
      ENDIF
      BE = RRS1/RRS
      RRS = RRS1
      CALL FDS221(M,DW(ID3R),DW(ID5P),DW(ID5P),BE)
      CALL FDS221(M,DW(ID4RS),DW(ID6PS),DW(ID6PS),BE)
      GO TO 200
C
C***  END OF THE BICO-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      GO TO 500
  420 ICONV = 2
      IF(IDOKU.GE.2) WRITE(LOUT,1420) IMVM
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS612:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &       '    STOPPING CRITERION:',G14.4,'  B I C O   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE, BICO METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS612----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::140     ,,,,,FDS613.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS613(ILIN,LLIN,IW,MIW,DW,MDW,B,X,IFILE,UR,
     &                  EPS,EPSLIN,ICONV,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 6 1 3   BIORTH-METHOD FOR THE SOLUTION OF THE LINEAR ***
C**      SYSTEM QD * X = B, WITH MATRIX QD STORED BY DIAGONALS ON   ***
C**      FILE. (INCORE-VERSION FOR NORMALIZED MATRIX).              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1986                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  ILIN(1),IW(1),MIW,MDW,IFILE(1),UR(1),ICONV,IERR
      DOUBLE PRECISION  DW(1),B(1),X(1),EPS,EPSLIN
      LOGICAL  LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :   (SEE FDS500)                    ***
C**   -------------------------                                     ***
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ITMAX,M,MN,ND,IF1,IF3,MODNEW,LOUT,IDOKU,IDOKUV,IMVM,
     &         II2,II3,ID1,ID2,ID3R,ID4RS,ID5P,ID6PS,IDX,I,
     &         NIW,NDW,IOS,PFE,RN,NEXTRA
      DOUBLE PRECISION  ZERO,A1,A2,BE1,BE2,RR,RR1,RSRS,RSRS1,
     &                  LNORM,ANORM,EPSREL,BMAX,FDS101,FDS151,FDS222
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO = 0.0 , NEXTRA = 1000)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IMVM  = 0
      ICONV = 0
C
      ITMAX  = ILIN(2)
      M      = ILIN(3)
      MN     = ILIN(4)
      ND     = ILIN(5)
      IF1    = ILIN(7)
      IF3    = ILIN(9)
      MODNEW = ILIN(11)
      LOUT   = ILIN(12)
      IDOKU  = ILIN(13)
      IDOKUV = IDOKU
      NIW=3*ND
      NDW=7*M+3*NEXTRA
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IERR = 516
         WRITE(LOUT,1000) NIW, NDW
         GO TO 440
      ENDIF
C
      II2 = 1   + ND
      II3 = II2 + ND
C
      ID1   = 1
      ID2   = ID1   + M
      ID3R  = ID2   + M
      ID4RS = ID3R  + M
      ID5P  = ID4RS + M + NEXTRA
      ID6PS = ID5P  + M + NEXTRA
      IDX   = ID6PS + M + NEXTRA
C
      DO 10 I=ID4RS+M,IDX-1
         DW(I) = ZERO
   10 CONTINUE
C
C***  PREPARATION OF THE MATRIX FOR THE ITERATION
C
      CALL FDS230(LLIN,M,MN,IW(1),IW(II2),IW(II3))
      IF(MODNEW.EQ.0) THEN
      IF(ILIN(15).EQ.1) THEN
C
C***  PRECONDITIONING WITH ELEMENTS OF MAIN-DIAGONAL
C
CWSS  CALL FDS531(DW(ID1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,IERR,
CWSS &            LOUT)
      CALL FDS531(DW(ID1),IW(II3),LLIN,M,IFILE(IF1),UR(IF1),EPS,ILIN,
     &            IERR,LOUT)
      IF(IERR.NE.0) THEN
         IERR = 0
         ILIN(15) = 0
      ENDIF
      ENDIF
      IF(ILIN(15).EQ.0) THEN
C
C***  LINE - PRECONDITIONING
C
CWSS  CALL FDS532(DW(ID3R),DW(ID1),DW(ID2),IW(II2),IW(II3),M,ND,
CWSS &            IFILE(IF1),UR(IF1),EPS,IERR,LOUT)
      CALL FDS532(DW(ID3R),DW(ID1),DW(ID2),IW(II2),IW(II3),M,ND,
     &            IFILE(IF1),UR(IF1),EPS,ILIN,IERR,LOUT)
      IF(IERR.NE.0) GO TO 440
      ENDIF
      IF(ILIN(15).EQ.2) THEN
         DO 117 I=1,M
            DW(ID1+I-1) = 1.
  117    CONTINUE
      ENDIF
C
C***  NORMALIZATION OF THE MATRIX
C
      CALL FDS622(DW(ID1),IW(II2),IW(II3),ILIN,IFILE(IF1),M,
     &            ND,UR(IF1),IERR)
      IF(IERR.NE.0) GO TO 440
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS310(IFILE(IF3),IOS,RN,PFE,DW(ID1),M,UR(IF3))
      IF(IOS.NE.0) THEN
         IERR = 516
         WRITE(LOUT,1100)
         GO TO 440
      ENDIF
      ELSE
C
C***  READ NORMALIZATION FACTORS
C
      CALL FDS305(IFILE(IF3),IOS,RN,UR(IF3))
      PFE=1
      CALL FDS309(IFILE(IF3),IOS,RN,PFE,DW(ID1),M,UR(IF3))
      ENDIF
C
C***  INITIAL VALUES
C
      BMAX=FDS101(M,B,ZERO)
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
      DO 110 I=1,M
         X(I) = ZERO
         DW(ID3R -1+I) = -B(I)*DW(ID1-1+I)
         DW(ID4RS-1+I) = DW(ID3R-1+I)
         DW(ID5P -1+I) = DW(ID3R-1+I)
         DW(ID6PS-1+I) = DW(ID3R-1+I)
         DW(IDX-1+I)   = ZERO
         B(I) = DW(ID3R-1+I)
  110 CONTINUE
      RR = FDS222(DW(ID3R),DW(ID3R),M)
      RSRS = FDS222(DW(ID4RS),DW(ID4RS),M)
      LNORM = FDS151(M,DW(ID3R),ZERO)
      ANORM = LNORM
      EPSREL = EPSLIN * ANORM
      IF(IDOKU.GE.2) WRITE(LOUT,1200) ANORM,EPSREL
      IF(ANORM.EQ.ZERO) THEN
         WRITE(LOUT,1150)
         GO TO 410
      ENDIF
C
C***  START OF THE BIORTH-ITERATION-LOOP
C
  200 CALL FDS632(DW(ID6PS),DW(ID5P),DW(ID1),DW(ID2),IW(1),
     &            IW(II2),IW(II3),M,ND)
      IMVM = IMVM + 2
      A1 = FDS222(DW(ID1),DW(ID3R),M)
      A2 = FDS222(DW(ID2),DW(ID4RS),M)
      IF(A1.EQ.ZERO.OR.A2.EQ.ZERO) THEN
         IERR = 516
         WRITE(LOUT,1250)
         GO TO 440
      ELSE
         A1 = RR/A1
         A2 = RSRS/A2
      ENDIF
      CALL FDS221(M,DW(IDX),DW(ID6PS),DW(IDX),-A1)
      CALL FDS221(M,DW(ID3R),DW(ID1),DW(ID3R),-A1)
      CALL FDS541(B,DW(ID3R),X,DW(IDX),DW(ID1),M)
      LNORM = FDS151(M,B,ZERO)
      IF(IDOKU.GE.2.AND.IDOKU.LE.9) WRITE(LOUT,1300) IMVM,LNORM
      IF(IDOKU.GE.10.AND.IMVM.GE.IDOKUV) THEN
         WRITE(LOUT,1300) IMVM,LNORM
         IDOKUV=IDOKU+IDOKUV
      ENDIF
C
C***  CHECK STOPPING CRITERION
C
      IF(LNORM.GT.ANORM)  GO TO 430
      IF(LNORM.LT.EPSREL) THEN
         CALL FDS551(DW(ID1),B,LNORM,BMAX,EPSLIN,EPSREL,IDOKU,
     &        IFILE(IF3),LOUT,M,UR(IF3))
         IF(LNORM.LT.EPSREL) GO TO 410
      ENDIF
      IF(IMVM.GT.ITMAX) GO TO 420
C
      CALL FDS221(M,DW(ID4RS),DW(ID2),DW(ID4RS),-A2)
      RR1 = RR
      RSRS1 = RSRS
      RR = FDS222(DW(ID3R),DW(ID3R),M)
      RSRS = FDS222(DW(ID4RS),DW(ID4RS),M)
      IF(RR.EQ.ZERO) THEN
         IERR = 516
         WRITE(LOUT,1250)
         GO TO 440
      ENDIF
      IF(RSRS.EQ.ZERO) THEN
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 111 I=1,M
            DW(ID4RS+I-1) = DW(ID3R+I-1)
            DW(ID6PS+I-1) = DW(ID5P+I-1)
  111    CONTINUE
         RSRS = RR
      ENDIF
      BE1 = RR*A2/(RSRS1*A1)
      BE2 = RSRS*A1/(RR1*A2)
      CALL FDS221(M,DW(ID3R),DW(ID5P),DW(ID5P),BE1)
      CALL FDS221(M,DW(ID4RS),DW(ID6PS),DW(ID6PS),BE2)
      GO TO 200
C
C***  END OF THE BIORTH-ITERATION-LOOP
C
  410 ICONV = 1
      IF(IDOKU.GE.2) WRITE(LOUT,1410) IMVM
      GO TO 500
  420 ICONV = 2
      IF(IDOKU.GE.2) WRITE(LOUT,1420) IMVM
      GO TO 500
  430 ICONV = 3
      WRITE(LOUT,1430) IMVM
      GO TO 500
  440 ICONV = 4
  500 ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' *** ERROR IN FDS613:'/
     &       '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
 1100 FORMAT('    ERROR WHILE WRITING NORMALIZATION',
     &       ' COEFFICIENTS ON FILE.'/
     &       '    DEFINE FILE LARGER.'/' ')
 1150 FORMAT('    RIGHT HAND SIDE EQUALS ZERO'/' ')
 1200 FORMAT('    STARTING DEFECT:',G17.4/
     &   '    STOPPING CRITERION:',G14.4,'  B I O R T H   M E T H O D')
 1250 FORMAT('    FLOATING DIVIDE, BIORTH METHOD NOT APPLICABLE'/' ')
 1300 FORMAT('    STEP:',I7,'  DEFECT:',G12.4)
 1410 FORMAT('    CONVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
 1420 FORMAT('    ITERATION REACHED MAXIMUM NUMBER OF',
     &       ' MATRIX-VECTOR MULTIPLICATIONS:',I7)
 1430 FORMAT('    DIVERGENCE AFTER',I7,
     &       ' MATRIX-VECTOR MULTIPLICATIONS')
C
C
C-----END OF FDS613----------------------------------------------------
      E    N    D
C:::141     ,,,,,FDS622.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS622(DIAG,IAX,ILD,ILIN,IFILE1,M,
     &                  ND,UR1,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 6 2 2   COMPUTES THE PRODUCT OF THE MATRIX QD, WHICH ***
C**      IS STORED BY DIAGONALS, WITH THE DIAGONAL-MATRIX DIAG,     ***
C**      WHICH IS GIVEN BY ITS MAIN-DIAGONAL. QD IS READ FROM       ***
C**      FILE 1, DIAG * QD IS WRITTEN ON COMMON FDSMAT.             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IAX(1),ILD(1),ILIN(1),IFILE1,M,ND,UR1,IERR
      DOUBLE PRECISION   DIAG(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DIAG   I  DP  I IN  I  MAIN-DIAGONAL OF DIAGONAL-MATRIX DIAG
C        I      I     I  ARRAY : DIAG(M)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  START-ADRESS-1 FOR DIAGONAL-VECTOR DIAG FOR
C        I      I     I  EACH DIAGONAL OF QD
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL OF QD
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION VECTOR
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
C IFILE1 I  I   I IN  I  UNIT-NUMBER
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  NUMBER OF UNKNOWNS
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF QD
C--------I------I-----I------------------------------------------------
C UR1    I  I   I I/O I  SYNCHRONISATION-VARIABLE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,ID,IOS,IDOKU,L,LOUT,PFE1,PFE,RN1,MDQ,MDUM,NEXTRA
      DOUBLE PRECISION ZERO,DQ
      COMMON /FDSMAT/ MDQ,MDUM,DQ(1)
C
C**        CONSTANTS :
C          ---------
C
      PARAMETER (ZERO=0.0 , NEXTRA=1000)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      LOUT  = ILIN(12)
      IDOKU = ILIN(13)
      CALL FDS305(IFILE1,IOS,RN1,UR1)
      PFE1 = 1
      IF(MDQ.LT.NEXTRA) GO TO 200
      DO 10 I=1,NEXTRA
         DQ(I) = ZERO
   10 CONTINUE
      PFE = NEXTRA
      DO 100 ID=1,ND
         L = ILD(ID)
         IF(MDQ.LT.PFE+L) GO TO 200
         CALL FDS309(IFILE1,IOS,RN1,PFE1,DQ(PFE+1),L,UR1)
         IA = IAX(ID)
         DO 50 I=1,L
            DQ(I+PFE) = DQ(I+PFE) * DIAG(I+IA)
   50    CONTINUE
         PFE=PFE+L
  100 CONTINUE
      IF(MDQ.LT.PFE+NEXTRA) GO TO 200
      DO 110 I=1,NEXTRA
         DQ(PFE+I) = ZERO
  110 CONTINUE
      PFE = PFE+NEXTRA
      IF(IDOKU.GE.2) WRITE(LOUT,1100) PFE
      R E T U R N
C
  200 IERR = 622
      L = ND * M + 2 * NEXTRA
      WRITE(LOUT,1000) L
 1000 FORMAT(' *** ERROR IN FDS622:'/
     &       '     THE DIMENSION OF THE ARRAY IN COMMON /FDSMAT/',
     &       ' IS TOO SMALL.'/I12,' WOULD BE SUFFICIENT.'/)
 1100 FORMAT(4X,'STORAGE USED BY DQ IN /FDSMAT/:',I10)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS622----------------------------------------------------
      E    N    D
C:::142     ,,,,,FDS632.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDS632(B1,B2,X1,X2,IAB,IAX,ILD,M,ND)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S 6 3 2   COMPUTES TWO MATRIX-VECTOR-MULTIPLICATIONS:  ***
C**      X1 = A * B1, X2 = A(T) * B2.                               ***
C**      THE MATRIX IS STORED IN COMMON-BLOCK FDSMAT.               ***
C**      (UNROLLING OF 3 DIAGONALS)                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IAB(1),IAX(1),ILD(1),M,ND
      DOUBLE PRECISION  B1(1), B2(1), X1(1), X2(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C B1,B2  I  DP  I IN  I  RIGHT-HAND-SIDE-VECTORS OF LENGTH M
C--------I------I-----I------------------------------------------------
C X1,X2  I  DP  I OUT I  RESULT-VECTORS OF LENGTH M
C--------I------I-----I------------------------------------------------
C IAB    I  I   I IN  I  START-ADDRESS - 1 FOR VECTOR B FOR EACH
C        I      I     I  DIAGONAL
C        I      I     I  ARRAY : IAB(ND)
C--------I------I-----I------------------------------------------------
C IAX    I  I   I IN  I  START-ADDRESS - 1 FOR VECTOR X FOR EACH
C        I      I     I  DIAGONAL
C        I      I     I  ARRAY : IAX(ND)
C--------I------I-----I------------------------------------------------
C ILD    I  I   I IN  I  LENGTH OF EACH DIAGONAL
C        I      I     I  ARRAY : ILD(ND)
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  DIMENSION OF THE LINEAR SYSTEM
C--------I------I-----I------------------------------------------------
C ND     I  I   I IN  I  NUMBER OF DIAGONALS OF MATRIX A
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IB1,IB2,IB3,IC,IC1,IC2,IC3,ID,ID1,ID2,ID3,IL,IL1,IL2,
     &         IL3,L,L1,L2,L3,PFE,MDIAG,MDUM,NEXTRA
      DOUBLE PRECISION  ZERO,DIAG
      COMMON /FDSMAT/ MDIAG,MDUM,DIAG(1)
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0 , NEXTRA = 1000)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      DO 10 I=1,M
         X1(I) = ZERO
         X2(I) = ZERO
   10 CONTINUE
      PFE = NEXTRA
      ID = 0
C
   20    L1 = ILD(ID+1)
         IC1 = IAB(ID+1)
         IL1 = IAX(ID+1)
         IF(ND-ID.GT.1) THEN
            L2 = ILD(ID+2)
            IC2 = IAB(ID+2)
            IL2 = IAX(ID+2)
         ENDIF
         IF(ND-ID.GT.2) THEN
            L3 = ILD(ID+3)
            IC3 = IAB(ID+3)
            IL3 = IAX(ID+3)
         ENDIF
         IF(ND-ID.GT.2) THEN
         L = MAX(L1,L2,L3)
         IF(L-MIN(L1,L2,L3).GT.NEXTRA) GO TO 60
         IC  = MIN(IC1,IC2,IC3)
         IL  = MIN(IL1,IL2,IL3)
         IB1 = IC1+IL-IL1
         IB2 = IC2+IL-IL2
         IB3 = IC3+IL-IL3
         ID1 = PFE+IL-IL1
         ID2 = PFE+L1+IL-IL2
         ID3 = PFE+L1+L2+IL-IL3
         DO 71 I=1,L
            X1(I+IL) = X1(I+IL) + DIAG(I+ID1) * B1(I+IB1)
     &                          + DIAG(I+ID2) * B1(I+IB2)
     &                          + DIAG(I+ID3) * B1(I+IB3)
   71    CONTINUE
         IB1 = IL1+IC-IC1
         IB2 = IL2+IC-IC2
         IB3 = IL3+IC-IC3
         ID1 = PFE+IC-IC1
         ID2 = PFE+L1+IC-IC2
         ID3 = PFE+L1+L2+IC-IC3
         DO 72 I=1,L
            X2(I+IC) = X2(I+IC) + DIAG(I+ID1) * B2(I+IB1)
     &                          + DIAG(I+ID2) * B2(I+IB2)
     &                          + DIAG(I+ID3) * B2(I+IB3)
   72    CONTINUE
         ID  = ID  + 3
         PFE = PFE + L1 + L2 + L3
         GO TO 80
         ENDIF
   60    IF(ND-ID.GT.1) THEN
         L = MAX(L1,L2)
         IF(L-MIN(L1,L2).GT.NEXTRA) GO TO 50
         IC = MIN(IC1,IC2)
         IL = MIN(IL1,IL2)
         IB1 = IC1+IL-IL1
         IB2 = IC2+IL-IL2
         ID1 = PFE+IL-IL1
         ID2 = PFE+L1+IL-IL2
         DO 61 I=1,L
            X1(I+IL) = X1(I+IL) + DIAG(I+ID1) * B1(I+IB1)
     &                          + DIAG(I+ID2) * B1(I+IB2)
   61    CONTINUE
         IB1 = IL1+IC-IC1
         IB2 = IL2+IC-IC2
         ID1 = PFE+IC-IC1
         ID2 = PFE+L1+IC-IC2
         DO 62 I=1,L
            X2(I+IC) = X2(I+IC) + DIAG(I+ID1) * B2(I+IB1)
     &                          + DIAG(I+ID2) * B2(I+IB2)
   62    CONTINUE
         ID  = ID  + 2
         PFE = PFE + L1 + L2
         GO TO 80
         ENDIF
   50    IF(ND-ID.GT.0) THEN
         DO 51 I=1,L1
            X1(I+IL1) = X1(I+IL1) + DIAG(I+PFE) * B1(I+IC1)
            X2(I+IC1) = X2(I+IC1) + DIAG(I+PFE) * B2(I+IL1)
   51    CONTINUE
         ID  = ID  + 1
         PFE = PFE + L1
         ENDIF
   80    IF(ID.LT.ND) GO TO 20
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDS632----------------------------------------------------
      E    N    D
C:::1     ,,,,,FDSA12.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSA12 (IBC,LZ,NX,NOX,MOX,MLF,X,NCTR,DW,MDW,IW,MIW,
     &                   IFILE,RL,RN,UR,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 1 2   COMPUTES THE ADDRESSES FOR THE LOCAL ARRAYS  ***
C**      WITHIN THE WORKARRAYS DW AND IW, CALLS THE FDS-SUBROUTINE, ***
C**      WHICH COMPUTES THE COEFFICIENTS OF THE DIFFERENCE FORMULAE ***
C**      FOR NORMAL OR PERIODIC PROBLEMS, AND WRITES THE FORMULAE   ***
C**      AND ALL INFORMATION ABOUT THEM ON FILE FOR ONE BOUNDARY-   ***
C**      VALUE-DIRECTION.                                           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      LOGICAL LZ
      INTEGER  IBC(2),NX,NOX,MOX,MLF,NCTR,MDW,MIW,IW(MIW),IFILE,RL,RN,
     &         UR,IERR
      DOUBLE PRECISION  X(NX),DW(MDW)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IBC    I  I   I IN  I  INDICATES THE SORT OF BOUNDARY CONDITIONS FOR
C        I      I     I  X(1) AND X(NX).
C        I      I     I  IBC = 0   NORMAL
C        I      I     I  IBC = 1   EXTRAPOLATION
C        I      I     I  ARRAY :   IBC(2)
C--------I------I-----I------------------------------------------------
C LZ     I  L   I IN  I  LZ=TRUE, IF PROBLEM IS PERIODIC IN THIS
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRID POINTS
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE SECOND DERIVATIVE
C        I      I     I  NOX=2,4,6,...
C--------I------I-----I------------------------------------------------
C MOX    I  I   I IN  I  ARRAY BOUND ( MOX >= NPMAX )
C--------I------I-----I------------------------------------------------
C MLF    I  I   I IN  I  ARRAY BOUND ( MLF >= 2*MOX - 1 )
C--------I------I-----I------------------------------------------------
C X      I DP   I IN  I  (NONEQUIDISTANT) GRID, X(1) < X(2) <...< X(NX)
C        I      I     I  ARRAY : X(NX)
C--------I------I-----I------------------------------------------------
C NCTR   I  I   I OUT I  CENTRE OF THE FORMULAE IN THE ARRAY OF FORMUL.
C--------I------I-----I------------------------------------------------
C DW     I DP   I  -  I  WORKARRAY  DW(MDW)
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  ARRAY BOUND ( MDW >= 4*NX*MLF+(6+4*MOX)*MOX )
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY  IW(MIW)
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  ARRAY BOUND ( MIW >= 3*NX+MOX )
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF FILE
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C RN     I  I   I I/O I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IA,ID1,ID2,ID3,ID4,ID5,ID6,ID7,ID8,ID9,ID10,ID11,ID12,
     &         ID13,ID14,IEX,II,II1,II2,II3,II4,IOS,MI,MD,NPF,PFE
      DOUBLE PRECISION  ONE,ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ONE=1.0,ZERO=0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**** START OF CALCULATION :
C     --------------------
C
C***  ADDRESSES FOR THE LOCAL ARRAYS WITHIN THE WORKARRAYS DW/IW
C
      ID1=1
      ID2=ID1+NX*MLF
      ID3=ID2+NX*MLF
      ID4=ID3+NX*MLF
      ID5=ID4+NX*MLF
      ID6=ID5+MOX
      ID7=ID6+MOX*MOX
      ID8=ID7+MOX
      ID9=ID8+MOX
      ID10=ID9+MOX
      ID11=ID10+MOX*MOX
      ID12=ID11+MOX*MOX
      ID13=ID12+MOX*MOX
      ID14=ID13+MOX
      II1=1
      II2=II1+NX
      II3=II2+NX
      II4=II3+NX
      MI=3*NX+MOX
      MD=4*NX*MLF+(6+4*MOX)*MOX
      IF (MI.GT.MIW .OR. MD.GT.MDW) THEN
         IERR=12
         GO TO 100
      ENDIF
C
      IF (LZ) THEN
C
C***  PERIODIC PROBLEM:
C
      CALL FDS005(X,NX,NOX,NX,MOX,MLF,IW(II1),IW(II2),IW(II3),NCTR,
C                                     NA      NFA     NFL
     &            IW(II4),DW(ID1),DW(ID2),DW(ID3),DW(ID4),DW(ID5),
C                 NB      ABX     ABXX    FABX    FABXX   XS
     &            DW(ID6),DW(ID7),DW(ID8),DW(ID9),IERR)
C                 ST      Z1      Z2      XH
C
      ELSE
C
      CALL FDS003(X,NX,NOX,NX,MOX,MLF,IW(II1),IW(II2),IW(II3),NCTR,
C                                     NA      NFA     NFL
     &            IW(II4),DW(ID1),DW(ID2),DW(ID3),DW(ID4),DW(ID5),
C                 NB      ABX     ABXX    FABX    FABXX   XS
     &            DW(ID6),DW(ID7),DW(ID8),DW(ID9),IERR)
C                 ST      Z1      Z2      XH
C
      END IF
      IF(IERR.NE.0) THEN
         IERR = 12
         GO TO 100
      END IF
C
C***  CHANGING THE DIFFERENCE FORMULAE FOR THE FIRST DERIVATIVE AT
C     THE BOUNDARY INTO EXTRAPOLATION FORMULAE.
C
      IF (IBC(1) .NE. 0 .AND. .NOT. LZ) THEN
         IEX=1
         CALL FDS031(DW(ID10),DW(ID11),DW(ID12),DW(ID13),DW(ID14),
C                    AKNP     AKIP     AKFP     AIP      FAIP
     &               IEX,IA,IW(II4),NPF,NOX,NX,MOX,X,DW(ID9),DW(ID5),
C                           NB                       XH      XS
     &               DW(ID6),DW(ID7),DW(ID8),IERR)
C                    ST      Z1      Z2
         IF (IERR .NE. 0) THEN
            IERR=31
            GO TO 100
         ENDIF
         I=(NCTR-1)*NX
         DW(ID1+I)=-ONE
         DW(ID3+I)=ZERO
         DO 10 I=1,NPF
            II=(NCTR-1+I)*NX
            DW(ID1+II)=DW(ID13+I-1)
            DW(ID3+II)=DW(ID14+I-1)
   10   CONTINUE
      ENDIF
C
      IF (IBC(2) .NE. 0 .AND. .NOT. LZ) THEN
         IEX=NX
         CALL FDS031(DW(ID10),DW(ID11),DW(ID12),DW(ID13),DW(ID14),
C                    AKNP     AKIP     AKFP     AIP      FAIP
     &               IEX,IA,IW(II4),NPF,NOX,NX,MOX,X,DW(ID9),DW(ID5),
C                           NB                       XH      XS
     &               DW(ID6),DW(ID7),DW(ID8),IERR)
C                    ST      Z1      Z2
         IF (IERR .NE. 0) THEN
            IERR=31
            GO TO 100
         ENDIF
         I=NCTR*NX-1
         DW(ID1+I)=-ONE
         DW(ID3+I)=ZERO
         DO 20 I=1,NPF
            II=(NCTR-NPF-1+I)*NX-1
            DW(ID1+II)=DW(ID13+I-1)
            DW(ID3+II)=DW(ID14+I-1)
   20   CONTINUE
      ENDIF
C
C***  WRITING OF THE DIFFERENCE FORMULAE AND INFORMATIONS ABOUT THEM
C     ON FILE (NA,NFA,NFL,ABX,ABXX,FABX,FABXX)
C
      CALL FDS316(IFILE,IOS,RN,RL,PFE,IW(II1),NX,IERR,UR)
      CALL FDS316(IFILE,IOS,RN,RL,PFE,IW(II2),NX,IERR,UR)
      CALL FDS316(IFILE,IOS,RN,RL,PFE,IW(II3),NX,IERR,UR)
      CALL FDS318(IFILE,IOS,RN,RL,PFE,DW(ID1),NX*MLF,IERR,UR)
      CALL FDS318(IFILE,IOS,RN,RL,PFE,DW(ID2),NX*MLF,IERR,UR)
      CALL FDS318(IFILE,IOS,RN,RL,PFE,DW(ID3),NX*MLF,IERR,UR)
      CALL FDS318(IFILE,IOS,RN,RL,PFE,DW(ID4),NX*MLF,IERR,UR)
C
C
C**** END OF CALCULATION
C     ------------------
C
  100 R E T U R N
C-----END OF FDSA12 ---------------------------------------------------
      E    N    D
C:::2     ,,,,,FDSA32.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSA32 (IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,
     &           U2,IW,MIW,DW,MDW,EPS,LOUT,IND,IERR,FDSN05)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 3 2   COMPUTATION OF THE ERROR OF THE SOLUTION     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IFILE(1),UR(1),N,NK,IW(1),
     &          MIW,MDW,LOUT,IND,IERR
      DOUBLE PRECISION  U1(N,NK),U2(1),DW(1),EPS
      LOGICAL   LINFO(1) , LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR         ARRAY : IINFO(25)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR         ARRAY : LINFO(9)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(11)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*M-1)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS FOR I/O       ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES     ARRAY : UR(10)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF OUTPUT FILE
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSN05 I  E   I IN  I  NAME OF THE LINSOL-MAIN-PROGRAM
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   M,MV,RL,IN,IM,IFD,NV,RN,RN3,J,IA,IK,IOS,PFE,I,K,MVL,
     &          IMVM,M222,IDOKU
      DOUBLE PRECISION  C01, EPSLIN, DUMAX, FDS101
      LOGICAL LMVM
      EXTERNAL  FDS317, FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER   ( C01 = 0.1 , MVL = 65535 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      M222  = IINFO(14)
      IDOKU = IINFO(25)
      LMVM  = LINFO(8)
      IM    = M / MV
      IF(M - IM * MV.GT.0)  IM = IM + 1
      IFD = 5
C
C***  READ THE DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      NV = MV
      RN = 1
      DO 150  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 100  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  100    CONTINUE
  150 CONTINUE
C
C***  CHANGE IN NK-N-SORTING
C
      CALL FDS411(N,NK,U1,U2)
C
C***  READ DEFECT
C
      RN = 3 * (IN * NK + IM) + 1
      CALL FDS331(DW,M,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
C
C***  ADD DISCRETIZATION-ERROR AND DEFECT
C
      K=0
  190 IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 200  I = 1,NV
         U2(I+IA) = U2(I+IA) + DW(I+IA)
  200 CONTINUE
      IF(K.LT.M) GO TO 190
C     SET START SOLUTION FOR LINSOL X=B
      DO 202 IK= 1,NK
         DO 201 I = 1,N
            U1(I,IK) = U2(I+(IK-1)*N)
  201    CONTINUE
  202 CONTINUE
C
C***  COMPUTE THE ERROR OF THE SOLUTION
C
      EPSLIN = C01
      ILIN(11) = 1
      IMVM = ILIN(10)
      IF(IDOKU.GE.1) THEN
         WRITE(LOUT,1020) EPSLIN
         DUMAX = FDS101(M,U2,EPS)
         WRITE(LOUT,1025) DUMAX
      ENDIF
      ILIN(16)=1
      CALL FDSN05(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,
     &            UR,EPS,EPSLIN,IND,IERR)
      ILIN(16)=0
      IMVM = IMVM + ILIN(10)
      GO TO(310,320,330,340) IND
  310 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
C
C***  LINSOL HAS COMPUTED THE ERROR OF THE SOLUTION
C
      GO TO 350
  320 IF (LMVM) THEN
C
C***  LINSOL DID NOT CONVERGE WITH MVM MATRICE-VECTOR-
C     MULTIPLICATIONS
C
         WRITE(LOUT,1032)
         WRITE(LOUT,1030)
         IERR=320
         GO TO 800
      ELSE
C
C***  LINSOL DID NOT CONVERGE WITH MVM MATRICE-VECTOR-
C     MULTIPLICATIONS - GO ON WITH COMPUTATION OF THE ERROR
C
         WRITE(LOUT,1032)
         WRITE(LOUT,1036)
         IND=1
         GO TO 350
      ENDIF
  330 WRITE(LOUT,1033)
      WRITE(LOUT,1030)
C
C***  DIVERGENCE OF LINSOL
C
      IERR=320
      GO TO 800
  340 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
C
C***  ERROR IN LINSOL
C
      IERR=320
      GO TO 800
  350 CALL FDS411(NK,N,U1,U2)
C
C***  READ SOLUTION FOR THE COMPUTATION OF THE RELATIVE ERROR
C
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      RN3 = 3*NK*IN+1
      IF(LINFO(1))
     &CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1035) (IK , DW(IK) , IK = 1,NK)
      IF(.NOT.LINFO(1))
     &CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
      IF(.NOT.LINFO(9)) GO TO 800
C
C***  READ THE X-DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      NV = MV
      RN = IN*NK+1
      DO 370  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 360  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  360    CONTINUE
  370 CONTINUE
      CALL FDS411(N,NK,U1,U2)
C
C***  COMPUTE THE X-ERROR OF THE SOLUTION
C
      IF(IDOKU.GE.1) THEN
         WRITE(LOUT,1040)
         DUMAX = FDS101(M,U2,EPS)
         WRITE(LOUT,1025) DUMAX
      ENDIF
C     SET START SOLUTION FOR LINSOL X=B
      DO 302 IK= 1,NK
         DO 301 I = 1,N
            U1(I,IK) = U2(I+(IK-1)*N)
  301    CONTINUE
  302 CONTINUE
      ILIN(16)=1
      CALL FDSN05(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,
     &            UR,EPS,EPSLIN,IND,IERR)
      ILIN(16)=0
      IMVM = IMVM + ILIN(10)
      GO TO(410,420,430,440) IND
  410 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 450
  420 IF (LMVM) THEN
         WRITE(LOUT,1032)
         WRITE(LOUT,1030)
         IERR=321
         GO TO 800
      ELSE
         WRITE(LOUT,1032)
         WRITE(LOUT,1036)
         IND=1
         GO TO 450
      ENDIF
  430 WRITE(LOUT,1033)
      WRITE(LOUT,1030)
      IERR=321
      GO TO 800
  440 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR=321
      GO TO 800
  450 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1035) (IK , DW(IK) , IK = 1,NK)
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
      IF(M222.LT.5) GO TO 800
C
C***  READ THE Y-DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      NV = MV
      RN = 2*IN*NK+1
      DO 470  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 460  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  460    CONTINUE
  470 CONTINUE
      CALL FDS411(N,NK,U1,U2)
C
C***  COMPUTE THE Y-ERROR OF THE SOLUTION
C
      IF(IDOKU.GE.1) THEN
         WRITE(LOUT,1050)
         DUMAX = FDS101(M,U2,EPS)
         WRITE(LOUT,1025) DUMAX
      ENDIF
C     SET START SOLUTION FOR LINSOL X=B
      DO 402 IK= 1,NK
         DO 401 I = 1,N
            U1(I,IK) = U2(I+(IK-1)*N)
  401    CONTINUE
  402 CONTINUE
      ILIN(16)=1
      CALL FDSN05(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,
     &            UR,EPS,EPSLIN,IND,IERR)
      ILIN(16)=0
      IMVM = IMVM + ILIN(10)
      GO TO(510,520,530,540) IND
  510 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 550
  520 IF (LMVM) THEN
         WRITE(LOUT,1032)
         WRITE(LOUT,1030)
         IERR=322
         GO TO 800
      ELSE
         WRITE(LOUT,1032)
         WRITE(LOUT,1036)
         IND=1
         GO TO 550
      ENDIF
  530 WRITE(LOUT,1033)
      WRITE(LOUT,1030)
      IERR=322
      GO TO 800
  540 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR=322
      GO TO 800
  550 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1035) (IK , DW(IK) , IK = 1,NK)
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
      IF(M222.LT.7) GO TO 800
C
C***  READ THE Z-DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      NV = MV
      RN = 3*IN*NK+1
      DO 570  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 560  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  560    CONTINUE
  570 CONTINUE
      CALL FDS411(N,NK,U1,U2)
C
C***  COMPUTE THE Z-ERROR OF THE SOLUTION
C
      IF(IDOKU.GE.1) THEN
         WRITE(LOUT,1060)
         DUMAX = FDS101(M,U2,EPS)
         WRITE(LOUT,1025) DUMAX
      ENDIF
C     SET START SOLUTION FOR LINSOL X=B
      DO 502 IK= 1,NK
         DO 501 I = 1,N
            U1(I,IK) = U2(I+(IK-1)*N)
  501    CONTINUE
  502 CONTINUE
      ILIN(16)=1
      CALL FDSN05(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,
     &            UR,EPS,EPSLIN,IND,IERR)
      ILIN(16)=0
      IMVM = IMVM + ILIN(10)
      GO TO(610,620,630,640) IND
  610 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 650
  620 IF (LMVM) THEN
         WRITE(LOUT,1032)
         WRITE(LOUT,1030)
         IERR=323
         GO TO 800
      ELSE
         WRITE(LOUT,1032)
         WRITE(LOUT,1036)
         IND=1
         GO TO 650
      ENDIF
  630 WRITE(LOUT,1033)
      WRITE(LOUT,1030)
      IERR=323
      GO TO 800
  640 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR=323
      GO TO 800
  650 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1035) (IK , DW(IK) , IK = 1,NK)
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
  800 ILIN(10) = IMVM
      R E T U R N
 1020 FORMAT(' COMPUTATION OF THE ERROR OF THE SOLUTION:',
     &       ' EPSLIN =',G10.2)
 1025 FORMAT(' MAXIMUM ON THE LEVEL OF THE EQUATION:',G10.2)
 1030 FORMAT(' COMPUTATION OF THE DISCR. ERROR FAILED.')
 1031 FORMAT(' ERROR COMPUTED WITH',I6,
     &       ' MATRIX-VECTOR MULTIPLICATIONS.')
 1032 FORMAT(' LINSOL DID NOT CONVERGE WITH MVM MATRIX-',
     &       'VECTOR MULTIPLICATIONS.')
 1033 FORMAT(' DIVERGENCE OF LINSOL.')
 1034 FORMAT(' ERROR IN LINSOL, IERR =',I4)
 1035 FORMAT(' RELATIVE NORM OF THE ERROR:',/
     &      (' COMPONENT:',I4,G15.2))
 1036 FORMAT(' COMPUTATION OF THE ERROR IS CONTINUED -'/
     &       ' BAD ESTIMATION OF THE ERROR IS POSSIBLE')
 1040 FORMAT(' COMPUTATION OF THE X-ERROR:')
 1050 FORMAT(' COMPUTATION OF THE Y-ERROR:')
 1060 FORMAT(' COMPUTATION OF THE Z-ERROR:')
C
C-----END OF FDSA32----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSA51.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSA51(IDIM,IF1,IF2,NA,NFL,NOX,NX,NXMAX,NXNEW,LFAK,
     *                  DE,EPS,H,S,TOL,TOLFAC,X,XNEW,Z,ZF,C)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 5 1   GENERATES A NONEQUIDISTANT GRIDPOINT DISTRI- ***
C**      BUTION, WHERE THE STEPSIZES ARE DETERMINED BY THE ERROR-   ***
C**      ENVELOPE AND THE TOLERANCE.                                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IDIM,IF1(1),IF2(1),NA(1),NFL(1),NOX,NX,NXMAX,NXNEW
      DOUBLE PRECISION  DE(1),EPS,H(1),S,TOL,TOLFAC,X(1),XNEW(1),
     *                  Z(1),ZF(1),C(1)
      LOGICAL  LFAK
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IDIM   I  I   I OUT I  IDIM = 0 : GRID GENERATION COMPLETE
C        I      I     I  IDIM = 1 : NXNEW > NXMAX , GRID GENERATION
C        I      I     I             NOT COMPLETE
C--------I------I-----I------------------------------------------------
C IF1,2  I  I   I  -  I  AUXILIARY ARRAYS OF LENGTH NX
C--------I------I-----I------------------------------------------------
C NA     I  I   I IN  I  STARTING-ADDRESSES FOR THE OLD DIFFERENCE-
C        I      I     I  FORMULAE.                   ARRAY : NA(NX)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I IN  I  LENGTH OF THE DIFFERENCE-FORMULAE
C        I      I     I                             ARRAY : NFL(NX)
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  NEW ORDER OF THE DIFFERENCE-FORMULAE
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C NXMAX  I  I   I IN  I  MAXIMUM NUMBER OF POINTS FOR THE NEW GRID
C--------I------I-----I------------------------------------------------
C NXNEW  I  I   I OUT I  NUMBER OF POINTS IN THE GENERATED NEW GRID
C--------I------I-----I------------------------------------------------
C LFAK   I  L   I IN  I  IF LFAK = TRUE THE LOCAL CHANGING FACTORS ARE
C        I      I     I  CONTROLLED BY THE SURROUNDING FACTORS
C--------I------I-----I------------------------------------------------
C DE     I  DP  I IN  I  ERROR-ENVELOPE              ARRAY : DE(NX)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C H      I  DP  I  -  I  STEPSIZE DISTRIBUTION          ARRAY : H(NX)
C--------I------I-----I------------------------------------------------
C S      I  DP  I IN  I  FACTOR FOR THE MAXIMUM GRADIENT IN THE STEP-
C        I      I     I  SIZE DISTRIBUTION
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  TOLERANCE
C--------I------I-----I------------------------------------------------
C TOLFAC I  DP  I IN  I  TOLFAC * TOL = DESIRED ACCURACY IN ONE
C        I      I     I                 BOUNDARY DIRECTION
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  COORDINATES OF THE OLD GRID.     ARRAY : X(NX)
C--------I------I-----I------------------------------------------------
C XNEW   I  DP  I OUT I  COORDINATES OF THE GENERATED NEW GRID
C        I      I     I  ARRAY : XNEW(NXMAX)
C--------I------I-----I------------------------------------------------
C Z, ZF  I  DP  I  -  I  AUXILIARY ARRAYS OF LENGTH NX
C--------I------I-----I------------------------------------------------
C C      I  DP  I  -  I  WORKARRAY FOR THE SPLINE COEFFICIENTS
C        I      I     I  ARRAY : C(4,NX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      DOUBLE PRECISION     ZERO,P1,HALF,ONE,TEN,ZW,EPSDE
      INTEGER  I,NXM
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0 , P1=0.1 ,
     *           HALF=0.5 , ONE=1.0 , TEN=10.0)
      EPSDE = EPS * TEN
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NXM=NX-1
C
C***  COMPUTATION OF THE LOCAL STEP SIZES AND CHANGING FACTORS :
C
      DO 10 I=2,NXM
      H(I)=(X(I+1)-X(I-1))*HALF
      ZW=(TOLFAC*TOL/DE(I))**(ONE/NOX)
      IF(ZW.GT.TEN) ZW=TEN
      IF(ZW.LT.P1) ZW=P1
      Z(I)=ZW
   10 CONTINUE
      H(1)=ZERO
      H(NX)=ZERO
      Z(1)=ZERO
      Z(NX)=ZERO
      IF(DE(1).LT.EPSDE) GO TO 20
      H(1)=X(2)-X(1)
      ZW=(TOLFAC*TOL/DE(1))**(ONE/NOX)
      IF(ZW.GT.TEN) ZW=TEN
      IF(ZW.LT.P1) ZW=P1
      Z(1)=ZW
   20 IF(DE(NX).LT.EPSDE) GO TO 30
      H(NX)=X(NX)-X(NXM)
      ZW=(TOLFAC*TOL/DE(NX))**(ONE/NOX)
      IF(ZW.GT.TEN) ZW=TEN
      IF(ZW.LT.P1) ZW=P1
      Z(NX)=ZW
   30 CONTINUE
C
C***  CONTROL OF THE CHANGING FACTORS
C
      IF(LFAK) THEN
      CALL FDSA52(NOX,NX,H,Z,ZF,NA,NFL,IF1,IF2)
      ELSE
      DO 45 I=1,NX
      H(I)=H(I)*Z(I)
   45 CONTINUE
      ENDIF
C
C***  LIMITATION OF THE GRADIENT IN THE STEP SIZE DISTRIBUTION
C
      CALL FDSA53(NOX,NX,H,X,S)
C
C***  GENERATION OF THE NEW GRIDPOINT DISTRIBUTION XNEW :
C
      CALL FDSA54(NX,NXMAX,NXNEW,NOX,IF1,IDIM,H,X,XNEW,C)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSA51----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSA52.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSA52(NOX,NX,H,FL,FMIN,NA,NFL,IA,IE)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 5 2   CONTROLS THE CHANGING FACTORS FL(I) FOR THE  ***
C**      STEP SIZES IN THEIR REGIONS OF INFLUENCE. FINALLY THE NEW  ***
C**      LOCAL STEP SIZES H(I) WERE COMPUTED.                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      DOUBLE PRECISION  H(1),FL(1),FMIN(1)
      INTEGER  NOX,NX,NA(1),NFL(1),IA(1),IE(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  NEW ORDER OF THE DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C H      I  DP  I I/O I  INPUT  : LOCAL STEP SIZES IN THE OLD GRID
C        I      I     I  OUTPUT : LOCAL STEP SIZES FOR THE DETERMINA-
C        I      I     I           TION OF THE NEW GRID GIVEN AT THE
C        I      I     I           OLD GRID POINTS
C        I      I     I  ARRAY : H(NX)
C--------I------I-----I------------------------------------------------
C FL     I  DP  I IN  I  LOCAL CHANGING FACTORS FOR THE STEP SIZES
C        I      I     I  ARRAY : FL(NX)
C--------I------I-----I------------------------------------------------
C FMIN   I  DP  I  -  I  WORKARRAY FOR THE MINIMUM CHANGING FACTORS
C        I      I     I  ARRAY : FMIN(NX)
C--------I------I-----I------------------------------------------------
C NA     I  I   I IN  I  STARTING INDICES OF THE ERROR-FORMULAE
C        I      I     I  ARRAY : NA(NX)
C--------I------I-----I------------------------------------------------
C NFL    I  I   I IN  I  LENGTH OF THE ERROR-FORMULAE
C        I      I     I  ARRAY : NFL(NX)
C--------I------I-----I------------------------------------------------
C IA, IE I  I   I  -  I  WORKARRAYS FOR THE REGIONS OF INFLUENCE
C        I      I     I  ARRAYS : IA(NX) , IE(NX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,K,NXM
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO = 0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NXM=NX-1
C
C***  DETERMINATION OF THE REGION OF INFLUENCE OF POINT I
C
      DO 30 I=1,NX
      K=0
      IF(FL(1).EQ.ZERO) K=1
   10 K=K+1
      IF(NA(K)+NFL(K).LT.I) GO TO 10
C
C***  ERROR FORMULA FOR POINT K ALREADY INCLUDES POINT I
C
      IA(I)=K
      K=NX+1
      IF(FL(NX).EQ.ZERO) K=NX
   20 K=K-1
      IF(NA(K)+1.GT.I) GO TO 20
C
C***  ERROR FORMULA FOR POINT K STILL INCLUDES POINT I
C
      IE(I)=K
C
C***  POINT I IS INCLUDED IN THE FORMULAE OF THE POINTS
C     IA(I) UNTIL IE(I)
C
   30 CONTINUE
C
C***  DETERMINATION OF THE FINAL CHANGING FACTORS FOR THE STEP SIZE
C
      DO 60 I=1,NX
C
C***  MINIMUM FACTOR IN THE INTERVAL (IA(I),IE(I))
C
      K=IA(I)
      FMIN(I)=FL(K)
   50 K=K+1
      IF(FL(K).LT.FMIN(I)) FMIN(I)=FL(K)
      IF(K.LT.IE(I)) GO TO 50
   60 CONTINUE
C
C***  COMPUTATION OF THE NEW STEP SIZES
C
      DO 70 I=1,NX
      H(I)=H(I)*SQRT(FL(I)*FMIN(I))
   70 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSA52----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSA53.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSA53(NOX,NX,H,X,S)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 5 3   LIMITS THE GRADIENT IN THE STEP SIZE DISTRI- ***
C**      BUTION. IN THE NEW GRID THE STEP SIZES SHOULD INCREASE     ***
C**      WITHIN NOX+1 POINTS WITH THE MAXIMUM FACTOR 1+S            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER NOX,NX
      DOUBLE PRECISION H(1),X(1),S
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  NEW ORDER OF THE DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C H      I  DP  I I/O I  STEP SIZE DISTRIBUTION FOR THE NEW GRID GIVEN
C        I      I     I  AT THE OLD GRID POINTS
C        I      I     I  ARRAY : H(NX)
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  COORDINATES OF THE OLD GRID
C        I      I     I  ARRAY : X(NX)
C--------I------I-----I------------------------------------------------
C S      I  DP  I IN  I  FACTOR FOR THE MAXIMUM GRADIENT IN THE STEP
C        I      I     I  SIZE DISTRIBUTION
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER I,I0,I1,IEND,IR,IWDH,K1,K2,MA,MI1,MI2,FDS051
      DOUBLE PRECISION H2A,H2B,EPS,ZERO,Q1,ONE
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0 , ONE=1.0 , EPS=1.E-8)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      Q1 = ONE / (NOX+ONE)
C
C***  LOOK FOR THE FIRST EXTREMA
C
   1  IWDH=0
      I0=1
      IF(H(1).EQ.ZERO) I0=2
      I=I0
      I1=I+1
      IEND=NX
      IF(H(NX).EQ.ZERO) IEND=NX-1
      IR=FDS051(H(I1)-H(I),EPS)
   5  IF(IR) 10,20,30
C
C***  DECREASING STEP SIZES
C
  10  MI1=0
      MA=I0
      GO TO 60
C
C***  CONSTANT STEP SIZES
C
  20  I=I+1
      I1=I+1
      IF(I1.GT.IEND) GO TO 999
      IR=FDS051(H(I1)-H(I),EPS)
      GO TO 5
C
C***  INCREASING STEP SIZES
C
  30  MI1=I0
C
C***  LOOK FOR THE NEXT MAXIMUM
C
  40  I=MI1-1
  45  I=I+1
      I1=I+1
      IF(I1.GT.IEND) GO TO 55
      IR=FDS051(H(I1)-H(I),EPS)
      IF(IR.NE.-1) GO TO 45
      MA=I
      GO TO 60
  55  MA=IEND
      MI2=0
      GO TO 80
C
C***  LOOK FOR THE NEXT MINIMUM
C
  60  I=MA-1
  65  I=I+1
      I1=I+1
      IF(I1.GT.IEND) GO TO 70
      IR=FDS051(H(I1)-H(I),EPS)
      IF(IR.NE.+1) GO TO 65
  70  MI2=I
  80  IF(MI1.EQ.0) GO TO 90
C
C***  STEPSIZE-LIMITATION IN (MI1,MA)
C
      K1=MI1+1
      K2=MA-1
      IF(K1.GT.K2) GO TO 88
      DO 85 I=K1,K2
      I1=I-1
  85  H(I)=MIN(H(I),H(I1)+S*(X(I)-X(I1))*Q1)
  88  H2A =MIN(H(MA),H(K2)+S*(X(MA)-X(K2))*Q1)
  90  IF(MI2.EQ.0) GO TO 100
C
C***  STEPSIZE-LIMITATION IN (MA,MI2)
C
      K1=MI2-1
      K2=MA+1
      I=K1
  95  IF(K2.GT.I) GO TO 98
      I1=I+1
      H(I)=MIN(H(I),H(I1)+S*(X(I1)-X(I))*Q1)
      I=I-1
      GO TO 95
  98  H2B=MIN(H(MA),H(K2)+S*(X(K2)-X(MA))*Q1)
 100  IF(MI1.EQ.0) THEN
         H(MA) = H2B
         GO TO 140
      ELSE IF(MI2.EQ.0) THEN
         H(MA) = H2A
         GO TO 999
      ELSE
         H(MA) = MIN(H2A,H2B)
      ENDIF
      IF(H2B.GE.H2A) GO TO 120
C
C***  AFTER-TREATMENT OF INTERVAL (MI1,MA)
C
      IF(H(MA).LT.H(MI1)) IWDH=1
      K1=MI1+1
      K2=MA-1
      IF(K1.GT.K2) GO TO 120
      DO 110 I=K1,K2
      I1=I-1
 110  H(I)=MIN(H(I),H(I1)+(X(I)-X(I1))*(H(MA)-H(I1))/(X(MA)-X(I1)))
 120  IF(H2B.EQ.H2A) GO TO 140
C
C***  AFTER TREATMENT OF INTERVAL (MA,MI2)
C
      IF(H(MA).LT.H(MI2)) IWDH=1
      K1=MI2-1
      K2=MA+1
      I=K1
 130  IF(K2.GT.I) GO TO 140
      I1=I+1
      H(I)=MIN(H(I),H(I1)+(X(I1)-X(I))*(H(MA)-H(I1))/(X(I1)-X(MA)))
      I=I-1
      GO TO 130
 140  IF(MI2.EQ.IEND) GO TO 999
      MI1=MI2
      GO TO 40
C
 999  IF(IWDH.EQ.1) GO TO 1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSA53----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSA54.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
       SUBROUTINE FDSA54(NX,NXMAX,NXNEW,NOX,MM,IDIM,DX,X,XNEW,C)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S A 5 4   GENERATES A NONEQUIDISTANT GRID XNEW BY A    ***
C**      GIVEN STEPSIZE DISTRIBUTION ON THE OLD GRID X.             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      DOUBLE PRECISION  DX(1), X(1), XNEW(1), C(4,1)
      INTEGER  NX,NXNEW,NOX,IDIM,NXMAX,MM(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C NXMAX  I  I   I IN  I  MAXIMUM NUMBER OF POINTS FOR THE NEW GRID
C--------I------I-----I------------------------------------------------
C NXNEW  I  I   I OUT I  NUMBER OF POINTS IN THE GENERATED NEW GRID
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF CONSISTENCY (MINIMUM NUMBER OF POINTS
C        I      I     I  FOR THE NEW GRID NXMIN = NOX + 4)
C--------I------I-----I------------------------------------------------
C MM     I  I   I  -  I  WORKARRAY OF DIMENSION NX
C--------I------I-----I------------------------------------------------
C IDIM   I  I   I OUT I  INDICATOR :
C        I      I     I  IDIM = 1 :  NXNEW > NXMAX
C--------I------I-----I------------------------------------------------
C DX     I  I   I IN  I  STEPSIZE DISTRIBUTION FOR THE NEW GRID GIVEN
C        I      I     I  AT THE OLD GRID POINTS.         ARRAY : DX(NX)
C--------I------I-----I------------------------------------------------
C X      I  I   I IN  I  COORDINATES OF THE OLD GRID.     ARRAY : X(NX)
C--------I------I-----I------------------------------------------------
C XNEW   I  I   I OUT I  COORDINATES OF THE GENERATED NEW GRID
C        I      I     I  ARRAY : XNEW(NXMAX)
C--------I------I-----I------------------------------------------------
C C      I  I   I  -  I  WORKARRAY FOR THE SPLINE-COEFFICIENTS
C        I      I     I  ARRAY : C(4,NX)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,I1,IN,IN1,IM,IR,IR1,IX,MMIM,N4,NX1,NX2,FDS051
      DOUBLE PRECISION  ABL,DDX,DX1,DX2,DXN1,DXN2,STOL,X1,X2,ZW,
     *                  EPS,ONE,ONEP,P4,P8,ZERO,XAN,XEN
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (P4=1.E-4 , P8=1.E-8 , ONE=1.0 , ONEP=1.1 , ZERO=0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IDIM=0
      N4=NOX+4
      NX1=NX-1
      NX2=NX-2
      XAN = X(1)
      XEN = X(NX)
      STOL = ONEP ** (ONE/NOX) - ONE
C
C***  BOUNDARY STEP SIZES
C
      IF(DX(1).NE.ZERO) GO TO 10
      IF (DX(2).LT.DX(3)) THEN
C
C***  DX(2) < DX(3), RELATION DETERMINES DX(1)
C
      DX(1)=DX(2)*(DX(2)/DX(3))**((X(2)-XAN)/(X(3)-X(2)))
      ELSE
C
C***  DX(2) >= DX(3), LINEAR INTERPOLATION DETERMINES DX(1)
C
      DX(1)=DX(2)+(DX(2)-DX(3))*(X(2)-XAN)/(X(3)-X(2))
      ENDIF
  10  IF(DX(NX).NE.ZERO) GO TO 20
      IF (DX(NX1).LT.DX(NX2)) THEN
      DX(NX)=DX(NX1)*(DX(NX1)/DX(NX2))**((XEN-X(NX1))/(X(NX1)-X(NX2)))
      ELSE
      DX(NX)=DX(NX1)+(DX(NX1)-DX(NX2))*(XEN-X(NX1))/(X(NX1)-X(NX2))
      ENDIF
C
C***  LOOK FOR THE STEPSIZE-MINIMA
C
  20  IR=FDS051(DX(2)-DX(1),P8)
      IM = 1
      DO 30 I=3,NX
      I1=I-1
      IF (DX(I).GE.DX(I1).AND.IR.LT.0) THEN
C
C***  LOCAL MINIMUM AT I1
C
      MM(IM)=I1
      IM =IM+1
      ENDIF
      IR=FDS051(DX(I)-DX(I1),EPS)
  30  CONTINUE
C
C***  LAST MINIMUM FOR PROGRAM PURPOSES
C
      MM(IM)=NX+1
C
C***  GENERATION OF A SMOOTH STEPSIZE-FUNCTION BY
C     SPLINE-INTERPOLATION OF THE LOGARITHMIC STEPSIZES
C
      DO 40 I=1,NX
      C(1,I)=LOG(DX(I))
  40  CONTINUE
      CALL FDS061(X,C,NX,0,0)
C
C***  GRID-GENERATION
C
      XNEW(1)=XAN
      IN=2
      IN1=1
      IM=1
      IX=1
      CALL FDS062(X,DX,NX,XAN,DX1,IX,C)
  50  XNEW(IN)=XNEW(IN1)+DX1
      X1=XNEW(IN1)
      CALL FDS062(X,DX,NX,XNEW(IN),DX2,IX,C)
  60  IF (DX2.GE.DX1.AND.MM(IM).GE.IX) GO TO 80
      IF (MM(IM).GE.IX) THEN
C
C***  DX2 < DX1 : NEWTON-METHOD IN THE INTERVAL (X1,XNEW(IN))
C
      X2 = XNEW(IN)
      DXN1 = DX1
      DXN2 = DX2
      GO TO 70
      ENDIF
C
C***  CONSIDER STEPSIZE-MINIMUM
C
      MMIM=MM(IM)
      IF(DX1.LE.DX(MMIM)) THEN
C
C***  GO TO NEXT MINIMUM AND CHECK IT
C
      IM=IM+1
      GO TO 60
      ENDIF
      DX1=DX(MMIM)
C
C***  MINIMUM TAKEN
C
      XNEW(IN)=XNEW(IN1)+DX1
      CALL FDS062(X,DX,NX,XNEW(IN),DX2,IX,C)
      IF (XNEW(IN).GE.X(MMIM)) THEN
C
C***  GO TO NEXT MINIMUM AND CHECK IT
C
      IM=IM+1
      X1=X(MMIM)
      GO TO 60
      ENDIF
C
C***  NEWTON-METHOD IN THE INTERVAL (XNEW(IN),X(MMIM))
C
      X1=XNEW(IN)
      X2=X(MMIM)
      DXN1=DX2
      DXN2=DX(MMIM)
C
C***  NEWTON-METHOD FOR THE DETERMINATION OF THE OPTIMAL STEPSIZE
C
  70  ABL=(DXN2-DXN1)/(X2-X1)
      DDX=(DX1-DX2)/(ABL-ONE)
      IF (ABS(DDX)/DX1.LT.P4) GO TO 80
      DX1=DX1+DDX
      XNEW(IN)=XNEW(IN1)+DX1
      CALL FDS062(X,DX,NX,XNEW(IN),DX2,IX,C)
      IF (DX2.LT.DX1) THEN
C
C***  DX2 < DX1, NEW INTERVAL (X1,XNEW(IN))
C
      X2=XNEW(IN)
      DXN2=DX2
      ELSE
C
C***  DX1 < DX2, NEW INTERVAL (XNEW(IN),X2)
C
      X1=XNEW(IN)
      DXN1=DX2
      ENDIF
      GO TO 70
C
C***  SUITABLE STEPSIZE FOUND
C
  80  IN1=IN
      IN=IN+1
      DX1=DX2
      IF (XEN-XNEW(IN1).GT.DX1*STOL .AND. IN.LE.NXMAX)  GO TO 50
      IF (XEN-XNEW(IN1).GT.DX1*STOL)  GO TO 190
      NXNEW=IN1
C
C***  FINAL TREATMENT
C
      IF (XEN.GT.XNEW(NXNEW)) GO TO 120
C
C***  GRIDPOINTS BETWEEN THE LAST STEPSIZE-EXTREMUM
C     AND X(NX) HAVE TO BE COMPRESSED A LITTLE BIT
C
C***  LOOK FOR THE LAST EXTREMUM
C
      IN=NXNEW
      IN1=IN-1
      DX1=XNEW(IN)-XNEW(IN1)
      IN=IN1
      IN1=IN-1
      DX2=XNEW(IN)-XNEW(IN1)
      EPS=P4*(DX1+DX2)
      IR=FDS051(DX1-DX2,EPS)
  90  IN=IN1
      IN1=IN-1
      DX1=DX2
      DX2=XNEW(IN)-XNEW(IN1)
      EPS=P4*(DX1+DX2)
      IR1=FDS051(DX1-DX2,EPS)
      IF (IR1*IR.EQ.-1) GO TO 100
      IF (IR1.NE.0) IR=IR1
      IF (IN1.GT.1) GO TO 90
C
C***  NO EXTREMUM FOUND
C
      IN=0
 100  IF(IN.GE.(NXNEW-3)) THEN
C
C***  GO TO NEXT EXTREMUM
C
      IR=IR1
      GO TO 90
      ENDIF
      IN=IN+1
      X1=XNEW(IN)
C
C***  NONLINEAR COMPRESSING OF THE GRIDPOINTS IN THE INTERVAL
C     (X1,XNEW(NXNEW))
C
      ZW=ONE/(XNEW(NXNEW)-X1)
      IN1=IN+1
      DO 110 I=IN1,NXNEW
      X2=(XNEW(I)-X1)*ZW
      XNEW(I)=((XEN-XNEW(NXNEW))*X2+(XNEW(NXNEW)-X1))*X2+X1
 110  CONTINUE
 120  XNEW(NXNEW)=XEN
      IF (N4.LE.NXNEW)  RETURN
C
C***  IF NXNEW < (NOX+4) THEN GENERATE A GRID WITH NOX+4
C     EQUIDISTANT GRIDPOINTS
C
      NXNEW=N4
      XNEW(1)=XAN
      ZW=(XEN-XAN)/(NXNEW-1)
      DO 130 I=2,NXNEW
      I1=I-1
 130  XNEW(I)=XNEW(I1)+ZW
      XNEW(NXNEW)=XEN
      RETURN
C
C***  ERROR RETURN BECAUSE OF TOO SMALL DIMENSION OF XNEW
C
 190  IDIM=1
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSA54----------------------------------------------------
      E    N    D
C:::3     ,,,,,FDSB11.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSB11 (DINFO,IINFO,LINFO,ILIN,LLIN,IFILE,UR,DW,MDW,
     &           IW,MIW,U1,U2,DFT,DFX,ABT,EX,FABT,ST,STA,RNDU,RNU,T,
     &           MT,EPS,TOL,IND,IERR,FDSN01,FDSN02,FDSN03,FDSN04,
     &           FDSN05,FDSU01,FDSU02,FDSU03,FDSU04)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 1 1   COMPUTES THE FIRST INITIAL-VALUE-STEP FOR    ***
C**      PARABOLIC PROBLEMS (2-D OR 3-D). FOR THE ESTIMATE OF THE   ***
C**      ERROR OF THE FIRST STEP A SECOND IV-STEP IS COMPUTED. THE  ***
C**      SOLUTION OF THE SECOND STEP IS USED ONLY FOR THE ERROR-    ***
C**      ESTIMATE. FDSB12 COMPUTES ALL FOLLOWING STEPS.             ***
C**      FDSB11 CONTROLS THE STEP-SIZE IN IV-DIRECTION AND CALLS    ***
C**      FDS200 FOR THE NEWTON-RAPHSON-METHOD.                      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),ILIN(1),IFILE(1),UR(1),IW(1),MDW,MIW,RNDU(1),
     &         RNU(1),MT,IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1),DFT(1),DFX(1),
     &       ABT(1),EX(1),FABT(MT,1),ST(1),STA(1),T(1),EPS,TOL
      LOGICAL  LINFO(1),LLIN(1)
      EXTERNAL FDSN01,FDSN02,FDSN03,FDSN04,FDSN05,
     &         FDSU01,FDSU02,FDSU03,FDSU04
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR       (USED : IT+2*NK+8)
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR       (USED : 42)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       (USED : 14+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR THE LINEAR SOLVER
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR THE LINEAR SOLVER OF LENGTH
C        I      I     I  (2*M-1)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY FOR THE SOLUTION-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C U2     I  DP  I  -  I  WORKARRAY FOR A CORRECTION-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C DFT    I  DP  I I/O I  MAXIMA OF THE T-DISCR.-ERROR FOR EACH EQUATION
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I I/O I  MAXIMA OF THE BV-DISCR.-ERROR FOR EACH
C        I      I     I  EQUATION
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I  -  I  WORKARRAY FOR THE COEFFICIENTS FOR THE
C        I      I     I  T-DERIVATIVE
C--------I------I-----I------------------------------------------------
C EX     I  DP  I  -  I  WORKARRAY FOR THE COEFFICIENTS FOR THE
C        I      I     I  T-EXTRAPOLATION
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I I/O I  COEFFICIENTS FOR THE T-DISCR.-ERROR FOR
C        I      I     I  DIFFERENT ORDERS.      ARRAY : FABT(MT,MOT)
C--------I------I-----I------------------------------------------------
C ST,STA I  DP  I  -  I  WORKARRAYS FOR THE DIFFERENCE FORMULAE
C        I      I     I  ARRAY : ST(MT,MT)        STA(MT,MT)
C        I      I     I  CAUTION: ST AND STA MUST NOT BE CHANGED
C        I      I     I  BETWEEN THE CALLS OF FDSB11 AND FDSB12.
C--------I------I-----I------------------------------------------------
C RNDU   I  I   I I/O I  RECORD NUMBERS FOR THE LAST MT GLOBAL ERROR-
C        I      I     I  PROFILES.
C--------I------I-----I------------------------------------------------
C RNU    I  I   I I/O I  RECORD NUMBERS FOR THE SOLUTION-PROFILES AT
C        I      I     I  THE LAST MT STEPS
C--------I------I-----I------------------------------------------------
C T      I  DP  I I/O I  T-COORDINATES OF THE LAST INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C MT     I  I   I IN  I  MAXIMUM NUMBER OF T-POINTS WITHIN A DIFFERENCE
C        I      I     I  FORMULA IN IV-DIRECTION.
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  RELATIVE TOLERANCE FOR THE ERROR OF THE
C        I      I     I  SOLUTION.
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSN01,I  E   I IN  I  EXTERNAL FIDISOL SUBROUTINES FOR THE NEWTON-
C 2,3,4,5I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  EXTERNAL USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ID,IDOKU,IFAIL,IFD,IFJ,IFT,IFIL3,IHALF,IK,IM,IN,INTEG,
     &         ISIG,IST,IT,LOUT,MAXIT,MOT,MV,MVL,M222,N,NAB,NEX,NK,NOT,
     &         NOTMAX,NR,NT,RL,RN,RN1,RN2,RNUT
      DOUBLE PRECISION     
     & DFTEPS,FAK,H,H2,HMAX,HMIN,TOLEQ,ZERO,ONE,TWO,FDS101
      LOGICAL  LGLOB,LFAIL,LMAX,LRST
      EXTERNAL FDS460
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ID,IT  I  I   I  -  I  AUXILIARY VARIABLES FOR INDEX-CALCULATION
C IK     I      I     I
C--------I------I-----I------------------------------------------------
C IDOKU  I  I   I IN  I  CONTROL OF THE OUTPUT DURING THE ITERATION
C--------I------I-----I------------------------------------------------
C IFAIL  I  I   I OUT I  NUMBER OF FAILED INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C IFD,IFJI  I   I  -  I  FILE-NUMBERS
C IFT,   I      I     I
C IFIL3  I      I     I
C--------I------I-----I------------------------------------------------
C IHALF  I  I   I  -  I  NUMBER OF BISECTIONS OF THE STEP-SIZE
C--------I------I-----I------------------------------------------------
C IN,IM  I  I   I IN  I  NUMBER OF MV-PARTS
C--------I------I-----I------------------------------------------------
C INTEG  I  I   I OUT I  NUMBER OF INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C ISIG   I  I   I  -  I  SIGN-INDICATOR OF H
C--------I------I-----I------------------------------------------------
C IST    I  I   I  -  I  AUXILIARY VARIABLE FOR THE CONTROL OF THE
C        I      I     I  STEP-SIZE
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF THE OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C MAXIT  I  I   I IN  I  MAXIMUM NUMBER OF NEWTON-RAPHSON-ITERATION-
C        I      I     I  STEPS WITHIN FDS200
C--------I------I-----I------------------------------------------------
C MOT    I  I   I IN  I  MAXIMUM ORDER OF CONSISTENCY IN THE
C        I      I     I  T-DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF A
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBIAN MATRICES (6 OR 8)
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS IN THE BV-DIRECTIONS
C--------I------I-----I------------------------------------------------
C NAB    I  I   I  -  I  NUMBER OF COEFFICIENTS FOR THE T-DERIVATIVE
C--------I------I-----I------------------------------------------------
C NEX    I  I   I  -  I  NUMBER OF COEFFICIENTS FOR THE EXTRAPOLATION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NOT    I  I   I OUT I  ACTUAL ORDER OF CONSISTENCY IN THE T-DIRECTION
C--------I------I-----I------------------------------------------------
C NOTMAX I  I   I OUT I  MAXIMUM ORDER WITH NT AVAILABLE PROFILES
C--------I------I-----I------------------------------------------------
C NR,RN, I  I   I  -  I  AUXILIARY VARIABLES FOR DIRECT-ACCESS-I/O
C RN1,RN2I      I     I
C RNUT   I      I     I
C--------I------I-----I------------------------------------------------
C NT     I  I   I OUT I  NUMBER OF AVAILABLE PROFILES IN IV-DIRECTION
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C DFTEPS I  DP  I IN  I  SMALL CONSTANT FOR THE T-DISCR.-ERROR
C--------I------I-----I------------------------------------------------
C FAK    I  DP  I  -  I  REDUCTION-FACTOR FOR THE STEP-SIZE
C--------I------I-----I------------------------------------------------
C H      I  DP  I I/O I  ACTUAL STEP-SIZE
C--------I------I-----I------------------------------------------------
C HMAX   I  DP  I IN  I  MAXIMUM STEP-SIZE
C--------I------I-----I------------------------------------------------
C HMIN   I  DP  I IN  I  MINIMUM STEP-SIZE
C--------I------I-----I------------------------------------------------
C TOLEQ  I  DP  I  -  I  TOLERANCE ON THE LEVEL OF EQUATION
C--------I------I-----I------------------------------------------------
C LGLOB  I  L   I IN  I  LGLOB = TRUE INDICATES, THAT THE GLOBAL ERROR
C        I      I     I  HAS TO BE COMPUTED.
C--------I------I-----I------------------------------------------------
C LFAIL  I  L   I  -  I  IF LFAIL = TRUE THE INTEGRATION STEP IS NOT
C        I      I     I  ACCEPTED.
C--------I------I-----I------------------------------------------------
C LMAX   I  L   I IN  I  INDICATOR FOR THE CONTROL OF THE ORDER AND
C        I      I     I  THE STEPSIZE
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0 , ONE=1.0 , TWO=2.0 , MVL=65535 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ INFORMATION-VECTOR
C
      NK     = IINFO(1)
      N      = IINFO(9)
      MV     = IINFO(11)
      RL     = IINFO(12)
      IN     = IINFO(13)
      M222   = IINFO(14)
      ID     = IINFO(16) + 2 * NK
      IDOKU  = IINFO(25)
      LOUT   = IINFO(26)
      MAXIT  = IINFO(27)
      MOT    = IINFO(42)
C
      DFTEPS = DINFO(ID+4)
      H      = DINFO(ID+5)
      HMIN   = DINFO(ID+6)
      HMAX   = DINFO(ID+7)
C
      LMAX   = LINFO(11+NK)
      LGLOB  = LINFO(14+NK)
C
      IFAIL = 0
      IHALF = 0
      IND   = 0
      IERR  = 0
      IFT   = 1
      IFD   = 5
      IFJ   = 7
      INTEG = 1
      IM = N*NK/MV
      IF(N*NK-IM*MV.GT.0) IM=IM+1
C
C***  ROTATE RECORDNUMBERS AND T-VALUES
C
  100 RN = RNU(MT)
      DO 200 IT=MT-1,1,-1
         RNU(IT+1) = RNU(IT)
         T(IT+1)   = T(IT)
  200 CONTINUE
      RNU(1) = RN
C
  250 T(1) = T(2) + H
C
C***  COMPUTE DIFFERENCE-FORMULAE IN THE T-DIRECTION
C
      NOT = 1
      LFAIL = .FALSE.
      IF (INTEG.EQ.1) THEN
         NT  =2
      ELSE
         NT  =3
      ENDIF
      CALL FDS007(T,NT,NOT,MOT,MT,NEX,NAB,NOTMAX,ST,STA,
     &            EX,ABT,FABT,LFAIL,IERR)
      IF(IERR.NE.0) RETURN
C
C***  EXTRAPOLATION OF THE SOLUTION, FIX PART OF THE T-DERIVATIVES
C
      RNUT = 2 * MT * IN * NK + 1
      CALL FDSB27(ABT,EX,DW,U1,U2,IERR,IFILE(IFT),IFILE(3),
     &     IFILE(IFT),MV,MVL,N,NK,NAB,NEX,RL,RNU,1,RNUT,
     &     UR(IFT),UR(3),UR(IFT))
      IF(IERR.NE.0) RETURN
C
C***  NEWTON-RAPHSON-ITERATION
C
      IT = IINFO(16)
      DINFO(IT-1) = T(1)
      DINFO(IT)   = ABT(1)
      LINFO(5) = .FALSE.
      IF(INTEG.EQ.2) LINFO(5) = .TRUE.
      WRITE(LOUT,1250) INTEG, T(1), H, NOT
      LRST=.FALSE.
      CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST,MAXIT,LOUT,IND,IERR,
     &     FDSN01,FDSN02,FDSN03,FDSN04,FDSN05,FDS460,
     &     FDSU01,FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.AND.IERR.NE.200) RETURN
      TOLEQ = DINFO(ID+8)
      IF(IND.EQ.1) THEN
C
C***     TRANSFER SOLUTION TO PARABOLIC FILE
C
         RN1 = 1
         RN2 = RNU(1)
         NR  = IN * NK
         CALL FDS333(DW,IFILE(3),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &               UR(3),UR(IFT),IERR)
         IF(IERR.NE.0) RETURN
      ENDIF
      IF(INTEG.EQ.1.AND.IND.EQ.1) THEN
C
C***      FIRST INTEGRATION-STEP O.K. , GO TO SECOND STEP
C
          IF(LGLOB) THEN
C
C***      TRANSFER DISCR.ERROR IN BV-DIRECTION AND DEFECT TO
C         PARABOLIC FILE
C
          RN1 = 1
          RN2 = (2*MT+1)*IN*NK+1
          NR = IN*NK
          CALL FDS333(DW,IFILE(IFD),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &                UR(IFD),UR(IFT),IERR)
          IF(IERR.NE.0) RETURN
          RN1 = 3*(IN*NK+IM)+1
          NR = IM
          CALL FDS333(DW,IFILE(3),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &                UR(3),UR(IFT),IERR)
          IF(IERR.NE.0) RETURN
          ENDIF
          INTEG = 2
          GO TO 100
      ENDIF
      IF(IND.GE.2) THEN
C
C***     INTEGRATION FAILED, REDUCE STEP-SIZE
C
         WRITE(LOUT,1260)
         FAK = TWO
         IF(IHALF.GT.2) FAK = TWO ** (IHALF-1)
         IF(ABS(H).LE.HMIN+EPS) GO TO 600
         H = H / FAK
         ISIG = 1
         IF(H.LT.ZERO) ISIG = - 1
         IF(ABS(H).LT.HMIN) H = ISIG * HMIN
         IHALF = IHALF + 1
         IFAIL = IFAIL + 1
         IERR = 0
         IF(INTEG.EQ.1) GO TO 250
C
C***     REORGANIZE RECORD-NUMBERS FOR FIRST INTEGRATION STEP
C
         RN = RNU(1)
         DO 300 IT=2,MT
            RNU(IT-1) = RNU(IT)
  300    CONTINUE
         RNU(MT) = RN
         T(2) = T(3)
         INTEG = 1
         GO TO 250
      ENDIF
      IF(LGLOB) THEN
C
C***  THE DISCR.ERROR ON THE LEVEL OF EQUATION IN THE BOUNDARY-
C     VALUE-DIRECTION HAS BEEN COMPUTED IN THE FIRST INTEGRATION-
C     STEP. (TRANSFER WITH DEFECT FROM PARABOLIC FILE).
C
      RN1 = (2*MT+1)*IN*NK+1
      RN2 = 1
      NR = IN*NK
      CALL FDS333(DW,IFILE(IFT),IFILE(IFD),MV,NR,RL,RN1,RN2,
     &            UR(IFT),UR(IFD),IERR)
      RN2 = 3*(IN*NK+IM)+1
      NR = IM
      CALL FDS333(DW,IFILE(IFT),IFILE(3),MV,NR,RL,RN1,RN2,
     &            UR(IFT),UR(3),IERR)
      ENDIF
C
C***  COMPUTE THE T-DISCR.ERROR
C     (SPECIAL ERROR-FORMULA)
C
      H2 = TWO * H
      FABT(1,1) =   ONE / H2
      FABT(2,1) = - ONE / H
      FABT(3,1) =   ONE / H2
      IFIL3 = 0
      IF(LGLOB) IFIL3=IFILE(IFD)
      RN = 4 * IN * NK + 1
      CALL FDSB31(U1,DFTEPS,DFT,U2,FABT(1,1),IERR,IFILE(IFT),
     &     IFILE(IFJ),IFIL3,IN,LGLOB,MV,MVL,M222,N,NK,
     &     3,DW,RL,RNU,RN,UR(IFT),UR(IFJ),UR(IFD))
      IF(IERR.NE.0) RETURN
      IF(IDOKU.GE.1)
     &   WRITE(LOUT,1300) TOLEQ,(IK,DFT(IK),DFX(IK),IK=1,NK)
      IF(ABS(H).LE.HMIN+EPS) GO TO 400
C
C***  CHECK THE MAXIMA OF THE DISCR.ERRORS IN IV-AND BV-DIRECTION
C
      LFAIL=.FALSE.
      IF(LMAX) THEN
         IF(FDS101(NK,DFT,ZERO).GT.FDS101(NK,DFX,TOLEQ))
     &      LFAIL = .TRUE.
      ELSE
      DO 350 IK= 1,NK
         IF(DFT(IK).GT.MAX(DFX(IK),TOLEQ)) LFAIL = .TRUE.
  350 CONTINUE
      ENDIF
      IF(LFAIL) THEN
C
C***     T-ERROR GREATER THAN KEY-ERROR, CONTROL STEP-SIZE
C        AND INTEGRATE AGAIN.
C
         WRITE(LOUT,1350)
         IHALF = IHALF + 1
         IFAIL = IFAIL + 1
         IST = 1
         CALL FDSB52(DFT,DFX,EPS,H,HMIN,HMAX,IST,LMAX,NK,NOT,TOLEQ)
C
C***     REORGANIZE RECORD-NUMBERS FOR FIRST INTEGRATION STEP
C
         RN = RNU(1)
         DO 370 IT=2,MT
            RNU(IT-1)=RNU(IT)
  370    CONTINUE
         RNU(MT) = RN
         T(2) = T(3)
         INTEG = 1
         GO TO 250
      ENDIF
C
C***  INTEGRATION-STEP COMPLETE, ERROR ACCEPTED
C
  400 WRITE(LOUT,1400)
C
C***  REORGANIZE RECORD-NUMBERS FOR THE NEXT GENERAL INTEGRATION
C     STEP (THE SECOND INTEGRATION STEP IS DROPPED).
      IF (LGLOB) THEN
C
C***  COMPUTE THE GLOBAL ERROR ON THE LEVEL OF EQUATION
C
      DO 500 IT=1,MT
         RNDU(IT) = RNU(IT) + MT * IN * NK
  500 CONTINUE
      NAB=NOT+1
      CALL FDSB32(ABT,U1,U2,DW,IFILE(IFT),IFILE(IFD),IFILE(IFJ),
     &     MV,MVL,M222,N,NAB-1,NK,RL,RNDU,UR(IFT),UR(IFD),UR(IFJ),
     &     IERR)
      IF(IERR.NE.0) RETURN
C
C***  COMPUTE THE ERROR OF THE SOLUTION
C
      LINFO(9) = .FALSE.
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,IW,MIW,
     &            DW,MDW,EPS,LOUT,IND,IERR,FDSN05)
      IF(IND.NE.1) THEN
         LINFO(14+NK)=.FALSE.
         IERR = 0
         IND=1
         GO TO 600
      ENDIF
C
C***  TRANSFER GLOBAL ERROR TO PARABOLIC FILE
C
      RN1 = 3 * IN * NK + 1
      RN2 = RNDU(1)
      NR  = IN * NK
      CALL FDS333(DW,IFILE(3),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &            UR(3),UR(IFT),IERR)
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  INFORMATION-VECTOR FOR THE NEXT STEP
C
  600 IINFO(37) = INTEG
      IINFO(38) = IFAIL
      IINFO(39) = NOT
      IINFO(40) = NOTMAX
      IINFO(41) = NT
      ID = IINFO(16) + 2 * NK
      DINFO(ID+5) = H
C
C
C**** END OF CALCULATION
C     ------------------
C
 1250 FORMAT(' '/' INTEGRATION STEP:',I5,'  T =',G13.4,
     &           '  H =',G13.4,'  NOT =',I4/1X,70('-')/)
 1260 FORMAT(' NEWTON ITERATION DID NOT CONVERGE, REDUCE H.')
 1300 FORMAT(' ERROR ESTIMATE FOR THE',
     &       ' FIRST INTEGRATION STEP.'/
     &       ' TOLERANCE:',G15.2/(I5,'.  T-ERROR:',G10.2,
     &       '  X-ERROR:',G10.2))
 1350 FORMAT(' T-DISCRETIZATION ERROR NOT SMALL ENOUGH,',
     &       ' CONTROL STEP SIZE.')
 1400 FORMAT(/' INTEGRATION STEP COMPLETE, T-ERROR ACCEPTED.'/)
      R E T U R N
C-----END OF FDSB11----------------------------------------------------
      E    N    D
C:::4     ,,,,,FDSB12.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSB12 (DINFO,IINFO,LINFO,LRST,ILIN,LLIN,IFILE,UR,DW,
     &           MDW,IW,MIW,U1,U2,DFT,DFTI,DFX,DFXN,ABT,EX,FABT,ST,STA,
     &           RNDU,RNU,T,MT,EPS,TOL,IND,IERR,FDSN01,FDSN02,FDSN03,
     &           FDSN04,FDSN05,FDSU01,FDSU02,FDSU03,FDSU04)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 1 2   COMPUTES ONE INITIAL-VALUE-STEP FOR PARABOLIC***
C**      PROBLEMS(2-D OR 3-D) EXCEPT THE FIRST TWO STEPS(SEE FDSB11)***
C**      FDSB12 CONTROLS THE ORDER OF CONSISTENCY AND THE STEP-SIZE ***
C**      IN IV-DIRECTION AND CALLS FDS200 FOR THE NEWTON-RAPHSON-   ***
C**      METHOD. FINALLY THE DISC.-ERRORS ARE COMPUTED.             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),ILIN(1),IFILE(1),UR(1),IW(1),MDW,MIW,RNDU(1),
     &         RNU(1),MT,IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1),DFT(1),DFTI(1),
     &       DFX(1),DFXN(1),ABT(1),EX(1),FABT(MT,1),ST(1),STA(1),T(1),
     &       EPS,TOL
      LOGICAL  LINFO(1),LRST,LLIN(1)
      EXTERNAL FDSN01,FDSN02,FDSN03,FDSN04,FDSN05,
     &         FDSU01,FDSU02,FDSU03,FDSU04
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR       (USED : IT+2*NK+8)
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR       (USED : 42)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       (USED : 14+NK)
C--------I------I-----I------------------------------------------------
C LRST   I  L   I IN  I  INDICATES A RESTART OF THE SOLUTION-PROCESS
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR THE LINEAR SOLVER
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR THE LINEAR SOLVER OF LENGTH
C        I      I     I  (2*M-1)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY FOR THE SOLUTION-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C U2     I  DP  I  -  I  WORKARRAY FOR A CORRECTION-VECTOR OF LENGTH M
C--------I------I-----I------------------------------------------------
C DFT    I  DP  I I/O I  MAXIMA OF THE T-DISCR.-ERROR FOR EACH EQUATION
C--------I------I-----I------------------------------------------------
C DFTI   I  DP  I  -  I  WORKARRAY AS DFT
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I I/O I  MAXIMA OF THE BV-DISCR.-ERROR FOR EACH
C        I      I     I  EQUATION
C--------I------I-----I------------------------------------------------
C DFXN   I  DP  I  -  I  WORKARRAY AS DFX
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I  -  I  WORKARRAY FOR THE COEFFICIENTS FOR THE
C        I      I     I  T-DERIVATIVE
C--------I------I-----I------------------------------------------------
C EX     I  DP  I  -  I  WORKARRAY FOR THE COEFFICIENTS FOR THE
C        I      I     I  T-EXTRAPOLATION
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I I/O I  COEFFICIENTS FOR THE T-DISCR.-ERROR FOR
C        I      I     I  DIFFERENT ORDERS.      ARRAY : FABT(MT,MOT)
C--------I------I-----I------------------------------------------------
C ST,STA I  DP  I I/O I  WORKARRAYS FOR THE DIFFERENCE FORMULAE
C        I      I     I  ARRAY : ST(MT,MT) , STA(MT,MT)
C        I      I     I  CAUTION : ST AND STA MUST NOT BE CHANGED
C        I      I     I  BETWEEN TWO CALLS OF FDSB12.
C--------I------I-----I------------------------------------------------
C RNDU   I  I   I I/O I  RECORD NUMBERS FOR THE LAST MT GLOBAL ERROR-
C        I      I     I  PROFILES.
C--------I------I-----I------------------------------------------------
C RNU    I  I   I I/O I  RECORD NUMBERS FOR THE SOLUTION-PROFILES AT
C        I      I     I  THE LAST MT STEPS
C--------I------I-----I------------------------------------------------
C T      I  DP  I I/O I  T-COORDINATES OF THE LAST INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C MT     I  I   I IN  I  MAXIMUM NUMBER OF T-POINTS WITHIN A DIFFERENCE
C        I      I     I  FORMULA IN IV-DIRECTION.
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  RELATIVE TOLERANCE FOR THE ERROR OF THE
C        I      I     I  SOLUTION.
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSN01,I  E   I IN  I  EXTERNAL FIDISOL-SUBROUTINES FOR THE NEWTON-
C 2,3,4,5I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  EXTERNAL USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ID,IDOKU,IFAIL,IFD,IFJ,IFT,IHALF,IK,IN,INTEG,ISIG,IST,
     &         IT,LOUT,MAXIT,MOT,MV,MVL,M222,N,NAB,NEX,NK,NOT,NOTMAX,
     &         NOTNEW,NR,NT,RL,RN,RN1,RN2,RNUT
      DOUBLE PRECISION     
     & DFTEPS,DFTMAX,FAK,H,HMAX,HMIN,TOLEQ,TWO,ZERO,FDS101
      LOGICAL  LGLOB,LMAX,LOT1,LTERR,LFAIL,LRST1
      EXTERNAL FDS460
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ID,IT  I  I   I  -  I  AUXILIARY VARIABLES FOR INDEX-CALCULATION
C IK     I      I     I
C--------I------I-----I------------------------------------------------
C IDOKU  I  I   I IN  I  CONTROL OF THE OUTPUT DURING THE ITERATION
C--------I------I-----I------------------------------------------------
C IFAIL  I  I   I I/O I  NUMBER OF FAILED INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C IFD,IFJI  I   I  -  I  FILE-NUMBERS
C IFT    I      I     I
C--------I------I-----I------------------------------------------------
C IHALF  I  I   I  -  I  NUMBER OF BISECTIONS OF THE STEP-SIZE
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  NUMBER OF MV-PARTS
C--------I------I-----I------------------------------------------------
C INTEG  I  I   I I/O I  NUMBER OF INTEGRATION-STEPS
C--------I------I-----I------------------------------------------------
C ISIG   I  I   I  -  I  SIGN-INDICATOR OF H
C--------I------I-----I------------------------------------------------
C IST    I  I   I  -  I  AUXILIARY VARIABLE FOR THE CONTROL OF THE
C        I      I     I  STEP-SIZE
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF THE OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C MAXIT  I  I   I IN  I  MAXIMUM NUMBER OF NEWTON-RAPHSON-ITERATION-
C        I      I     I  STEPS WITHIN FDS200
C--------I------I-----I------------------------------------------------
C MOT    I  I   I IN  I  MAXIMUM ORDER OF CONSISTENCY IN THE
C        I      I     I  T-DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF A
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBIAN MATRICES (6 OR 8)
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS IN THE BV-DIRECTIONS
C--------I------I-----I------------------------------------------------
C NAB    I  I   I  -  I  NUMBER OF COEFFICIENTS FOR THE T-DERIVATIVE
C--------I------I-----I------------------------------------------------
C NEX    I  I   I  -  I  NUMBER OF COEFFICIENTS FOR THE EXTRAPOLATION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NOT    I  I   I I/O I  ACTUAL ORDER OF CONSISTENCY IN THE T-DIRECTION
C--------I------I-----I------------------------------------------------
C NOTMAX I  I   I I/O I  MAXIMUM ORDER WITH NT AVAILABLE PROFILES
C--------I------I-----I------------------------------------------------
C NOTNEW I  I   I  -  I  AUXILIARY VARIABLE FOR THE CONTROL OF THE
C        I      I     I  ORDER.
C--------I------I-----I------------------------------------------------
C NR,RN, I  I   I  -  I  AUXILIARY VARIABLES FOR DIRECT-ACCESS-I/O
C RN1,RN2I      I     I
C RNUT   I      I     I
C--------I------I-----I------------------------------------------------
C NT     I  I   I I/O I  NUMBER OF AVAILABLE PROFILES IN IV-DIRECTION
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C DFTEPS I  DP  I IN  I  SMALL CONSTANT FOR THE T-DISCR.-ERROR
C--------I------I-----I------------------------------------------------
C DFTMAX I  DP  I  -  I  MAXIMUM OF THE T-DISCR.-ERROR
C--------I------I-----I------------------------------------------------
C FAK    I  DP  I  -  I  REDUCTION-FACTOR FOR THE STEP-SIZE
C--------I------I-----I------------------------------------------------
C H      I  DP  I I/O I  ACTUAL STEP-SIZE
C--------I------I-----I------------------------------------------------
C HMAX   I  DP  I IN  I  MAXIMUM STEP-SIZE
C--------I------I-----I------------------------------------------------
C HMIN   I  DP  I IN  I  MINIMUM STEP-SIZE
C--------I------I-----I------------------------------------------------
C TOLEQ  I  DP  I IN  I  TOLERANCE ON THE LEVEL OF EQUATION
C--------I------I-----I------------------------------------------------
C LGLOB  I  L   I IN  I  LGLOB = TRUE INDICATES, THAT THE GLOBAL ERROR
C        I      I     I  HAS TO BE COMPUTED.
C--------I------I-----I------------------------------------------------
C LMAX   I  L   I IN  I  INDICATOR FOR THE CONTROL OF THE ORDER
C        I      I     I  AND THE STEPSIZE
C--------I------I-----I------------------------------------------------
C LOT1   I  L   I IN  I  INDICATOR FOR THE CONTROL OF THE ORDER
C--------I------I-----I------------------------------------------------
C LTERR  I  L   I IN  I  INDICATOR FOR THE CONTROL OF THE STEP-SIZE
C--------I------I-----I------------------------------------------------
C LFAIL  I  L   I  -  I  IF LFAIL=TRUE THE INTEGRATION STEP IS NOT
C        I      I     I  ACCEPTED.
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0 , TWO=2.0 , MVL=65535 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ INFORMATION-VECTOR
C
      NK     = IINFO(1)
      N      = IINFO(9)
      MV     = IINFO(11)
      RL     = IINFO(12)
      IN     = IINFO(13)
      M222   = IINFO(14)
      ID     = IINFO(16) + 2*NK
      IDOKU  = IINFO(25)
      LOUT   = IINFO(26)
      MAXIT  = IINFO(27)
      INTEG  = IINFO(37)
      IFAIL  = IINFO(38)
      NOT    = IINFO(39)
      NOTMAX = IINFO(40)
      NT     = IINFO(41)
      MOT    = IINFO(42)
C
      DFTEPS = DINFO(ID+4)
      H      = DINFO(ID+5)
      HMIN   = DINFO(ID+6)
      HMAX   = DINFO(ID+7)
      TOLEQ  = DINFO(ID+8)
C
      LMAX   = LINFO(11+NK)
      LOT1   = LINFO(12+NK)
      LTERR  = LINFO(13+NK)
      LGLOB  = LINFO(14+NK)
C
      LFAIL = .FALSE.
      IHALF = 0
      IND = 0
      IERR = 0
      INTEG = INTEG + 1
      NT = MIN(NT+1,MT)
C
      IFT = 1
      IFD = 5
      IFJ = 7
C
C***  IN THE CASE OF A RESTART NO ORDER-CONTROL IS DONE
C
      IF(LRST) THEN
         LRST = .FALSE.
         GO TO 150
      ENDIF
C
C***  CONTROL THE ORDER OF CONSISTENCY IN THE T-DIRECTION
C
  100 CALL FDSB51(DFT,DFTI,DFTMAX,DFTEPS,DW,FABT,IDOKU,IERR,IFILE(IFT),
     &     IFILE(IFJ),IN,LMAX,LOT1,LOUT,MV,MVL,M222,N,NK,NOT,NOTMAX,
     &     NOTNEW,MT,RL,RNU,U1,U2,UR(IFT),UR(IFJ))
      IF(IERR.NE.0) RETURN
      NOT = NOTNEW
C
C***  CONTROL THE STEP-SIZE IN THE T-DIRECTION
C
  150 IST = 1
      IF(INTEG.GT.2) IST = 2
      IF(INTEG.GT.10) IST = 3
      CALL FDSB52(DFT,DFX,EPS,H,HMIN,HMAX,IST,LMAX,NK,NOT,TOLEQ)
C
C***  ROTATE RECORDNUMBERS AND T-VALUES
C
      IF(.NOT.LFAIL) THEN
      RN = RNU(MT)
      DO 200 IT=MT-1,1,-1
         RNU(IT+1) = RNU(IT)
         T(IT+1)   = T(IT)
  200 CONTINUE
      RNU(1) = RN
      ENDIF
  250 T(1) = T(2) + H
C
C***  COMPUTE DIFFERENCE-FORMULAE IN THE T-DIRECTION
C
      CALL FDS007(T,NT,NOT,MOT,MT,NEX,NAB,NOTMAX,ST,STA,
     &            EX,ABT,FABT,LFAIL,IERR)
      IF(IERR.NE.0) RETURN
      LFAIL=.FALSE.
C
C***  EXTRAPOLATION OF THE SOLUTION, FIX PART OF THE T-DERIVATIVES
C
      RNUT = 2*MT*IN*NK+1
      CALL FDSB27(ABT,EX,DW,U1,U2,IERR,IFILE(IFT),IFILE(3),
     &     IFILE(IFT),MV,MVL,N,NK,NAB,NEX,RL,RNU,1,RNUT,
     &     UR(IFT),UR(3),UR(IFT))
      IF(IERR.NE.0) RETURN
C
C***  NEWTON-RAPHSON-ITERATION
C
      IT = IINFO(16)
      DINFO(IT-1) = T(1)
      DINFO(IT)   = ABT(1)
      WRITE(LOUT,1250) INTEG, T(1), H, NOT
      LRST1=.FALSE.
      CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST1,MAXIT,LOUT,IND,IERR,
     &     FDSN01,FDSN02,FDSN03,FDSN04,FDSN05,FDS460,
     &     FDSU01,FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.AND.IERR.NE.200) RETURN
      TOLEQ = DINFO(ID+8)
      IF(IND.GE.2) THEN
C
C***     NEWTON-ITERATION DID NOT CONVERGE, REDUCE STEP-SIZE
C
         WRITE(LOUT,1260)
         FAK = TWO
         IF(IHALF.GT.2) FAK = TWO ** (IHALF - 1)
         IF(ABS(H).LE.HMIN+EPS) GO TO 600
         H = H / FAK
         ISIG = 1
         IF(H.LT.ZERO) ISIG = - 1
         IF(ABS(H).LT.HMIN) H = ISIG * HMIN
         IHALF = IHALF + 1
         IFAIL = IFAIL + 1
         IF(IHALF.GT.1.AND.NOT.GT.1) NOT = NOT - 1
         IERR = 0
         LFAIL=.TRUE.
         GO TO 250
      ENDIF
C
C***  TRANSFER SOLUTION TO PARABOLIC FILE
C
      RN1 = 1
      RN2 = RNU(1)
      NR  = IN * NK
      CALL FDS333(DW,IFILE(3),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &            UR(3),UR(IFT),IERR)
      IF(IERR.NE.0) RETURN
C
C***  COMPUTE THE DISCR.ERROR ON THE LEVEL OF EQUATION
C     IN THE BOUNDARY-VALUE-DIRECTION
C
      LINFO(5) = .FALSE.
      CALL FDSN03(DFTMAX,DFXN,TOLEQ,IINFO,DINFO,LINFO,
     &            IFILE,UR,U1,U2,IW,MIW,DW,MDW,IERR)
      IF(IERR.NE.0) RETURN
      LINFO(5) = .TRUE.
C
C***  COMPUTE THE T-DISCR.ERROR
C
      RN = 4 * IN * NK + 1
      CALL FDSB31(U1,DFTEPS,DFT,U2,FABT(1,NOT),IERR,IFILE(IFT),
     &     IFILE(IFJ),IFILE(IFD),IN,.TRUE.,MV,MVL,M222,N,NK,
     &     NAB+1,DW,RL,RNU,RN,UR(IFT),UR(IFJ),UR(IFD))
      IF(IERR.NE.0) RETURN
C
C***  CHECK THE MAXIMA OF THE DISCR.ERRORS IN IV-AND BV-DIRECTION
C
      IF(IDOKU.GE.1)
     &   WRITE(LOUT,1300) TOLEQ,(IK,DFT(IK),DFXN(IK),IK=1,NK)
      IF(.NOT.LTERR) THEN
C
C***     CONTROL H WITH ACTUAL ERROR
C
         DO 310 IK=1,NK
            DFX(IK) = DFXN(IK)
  310    CONTINUE
      ELSE
C
C***     CONTROL H WITH MAXIMUM ERROR OVER ALL T-STEPS
C
         DO 320 IK=1,NK
            IF(DFXN(IK).GT.DFX(IK)) DFX(IK) = DFXN(IK)
  320    CONTINUE
      ENDIF
      IF(ABS(H).LE.HMIN+EPS) GO TO 400
      LFAIL=.FALSE.
      IF(LMAX) THEN
         IF(FDS101(NK,DFT,ZERO).GT.FDS101(NK,DFX,TOLEQ))
     &      LFAIL = .TRUE.
      ELSE
      DO 330 IK= 1,NK
         IF(DFT(IK).GT.MAX(DFX(IK),TOLEQ)) LFAIL = .TRUE.
  330 CONTINUE
      ENDIF
      IF(LFAIL) THEN
C
C***     T-ERROR GREATER THAN KEY-ERROR, CONTROL ORDER AND
C        STEP-SIZE AGAIN.
C
         WRITE(LOUT,1350)
         IHALF = IHALF + 1
         IFAIL = IFAIL + 1
         IF(IHALF.GT.2.AND.NOT.GT.1) THEN
            NOT = NOT-1
C
C***        COMPUTE DISCR.-ERROR FOR ORDER NOT
C
            NAB = NOT+2
            CALL FDSB31(U1,DFTEPS,DFT,U2,FABT(1,NOT),IERR,IFILE(IFT),
     &           IFILE(IFJ),0,IN,.FALSE.,MV,MVL,M222,N,NK,NAB,DW,RL,
     &           RNU,0,UR(IFT),UR(IFJ),0)
            IF(IDOKU.GE.1)
     &         WRITE(LOUT,1360) NOT,(IK,DFT(IK),IK=1,NK)
            GO TO 150
         ENDIF
         GO TO 100
      ENDIF
C
C***  INTEGRATION-STEP COMPLETE, ERROR ACCEPTED
C
  400 WRITE(LOUT,1400)
      IF(LGLOB) THEN
C
C***  COMPUTE THE GLOBAL ERROR ON THE LEVEL OF EQUATION
C
      DO 500 IT=1,MT
         RNDU(IT) = RNU(IT) + MT * IN * NK
  500 CONTINUE
      NAB=NOT+1
      CALL FDSB32(ABT,U1,U2,DW,IFILE(IFT),IFILE(IFD),IFILE(IFJ),
     &     MV,MVL,M222,N,NAB,NK,RL,RNDU,UR(IFT),UR(IFD),UR(IFJ),
     &     IERR)
      IF(IERR.NE.0) RETURN
C
C***  COMPUTE THE ERROR OF THE SOLUTION
C
      LINFO(9) = .FALSE.
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,IW,MIW,
     &            DW,MDW,EPS,LOUT,IND,IERR,FDSN05)
      IF(IND.NE.1) THEN
         LINFO(14+NK)=.FALSE.
         IND=1
         IERR = 0
         GO TO 600
      ENDIF
C
C***  TRANSFER GLOBAL ERROR TO PARABOLIC FILE
C
      RN1 = 3 * IN * NK + 1
      RN2 = RNDU(1)
      NR  = IN * NK
      CALL FDS333(DW,IFILE(3),IFILE(IFT),MV,NR,RL,RN1,RN2,
     &            UR(3),UR(IFT),IERR)
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  INFORMATION-VECTOR FOR THE NEXT STEP
C
  600 IINFO(37) = INTEG
      IINFO(38) = IFAIL
      IINFO(39) = NOT
      IINFO(40) = NOTMAX
      IINFO(41) = NT
      ID = IINFO(16)+2*NK
      DINFO(ID+5) = H
C
C
C**** END OF CALCULATION
C     ------------------
C
 1250 FORMAT(' '/' INTEGRATION STEP:',I5,'  T =',G13.4,
     &           '  H =',G13.4,'  NOT =',I4/1X,70('-')/)
 1260 FORMAT(' NEWTON ITERATION DID NOT CONVERGE, REDUCE H.')
 1300 FORMAT(' TOLERANCE:',G15.2/(I5,'.  T-ERROR:',G10.2,
     &       '  X-ERROR:',G10.2))
 1350 FORMAT(' T-DISCRETIZATION ERROR NOT SMALL ENOUGH,',
     &       ' CONTROL STEP SIZE AND ORDER.')
 1360 FORMAT(' ERROR ESTIMATE FOR THE ORDER NOT=',I4/
     &       (I5,'.  T-ERROR:',G10.2))
 1400 FORMAT(/' INTEGRATION STEP COMPLETE, T-ERROR ACCEPTED.'/)
      R E T U R N
C-----END OF FDSB12----------------------------------------------------
      E    N    D
C:::5     ,,,,,FDSB21.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSB21(IFILE,RN,UR,MP,MOT,RNU,T,ST,STA,FABT,DFT,DFX,
     &                  DINFO,IINFO,FDSSD,FDSSI,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 2 1   READS/WRITES ALL INFORMATION FOR THE RESTART ***
C**      OF THE INTEGRATION LOOP IN A PARABOLIC PROBLEM.            ***
C**      (CHECKPOINT).                                              ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER IFILE,RN,UR,MP,MOT,RNU(1),IINFO(1),IERR
      DOUBLE PRECISION  T(1),ST(MP,MP),STA(MP,MP),FABT(MP,MOT),DFT(1),
     &      DFX(1),DINFO(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IFILE, I  I   I IN  I  UNIT NUMBER, RECORD NUMBER AND SYNCHR.VAR.
C RN,UR  I      I     I  FOR I/O-FILE
C--------I------I-----I------------------------------------------------
C MP,MOT I  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C RNU    I  I   I I/O I  RECORD NUMBERS FOR THE SOLUTION PROFILES
C--------I------I-----I------------------------------------------------
C T      I  DP  I I/O I  T-COORDINATES
C--------I------I-----I------------------------------------------------
C ST,STA I  DP  I I/O I  AUXILIARY ARRAYS FOR THE DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I I/O I  COEFFICIENTS FOR THE T-DISCR.ERROR FOR
C        I      I     I  DIFFERENT ORDERS
C--------I------I-----I------------------------------------------------
C DFT    I  DP  I I/O I  MAXIMA OF THE T-DISCR.-ERROR
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I I/O I  MAXIMA OF THE X-Y-Z-DISCR.-ERROR
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I I/O I  INFORMATION-VECTOR
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I I/O I  INFORMATION-VECTOR
C--------I------I-----I------------------------------------------------
C FDSSD, I  E   I IN  I  NAMES OF THE I/O-SUBROUTINES FOR READ/WRITE
C FDSSI  I      I     I  (DP,I)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IOS,PFE,II,RL,NK
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK=IINFO(1)
      RL=IINFO(12)
C
C***  READ/WRITE T, ST, STA, FABT, DFT, DFX, DFTEPS, H, HMIN,
C                HMAX, TOLEQ, INTEG, IFAIL, NOT, NOTMAX, NT,
C                RNU
C     FROM/ON PARABOLIC FILE
C
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,T,MP,IERR,UR)
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,ST,MP*MP,IERR,UR)
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,STA,MP*MP,IERR,UR)
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,FABT,MP*MOT,IERR,UR)
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,DFT,NK,IERR,UR)
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,DFX,NK,IERR,UR)
      II=IINFO(16)+2*NK+4
      CALL FDSSD(IFILE,IOS,RN,RL,PFE,DINFO(II),5,IERR,UR)
      CALL FDSSI(IFILE,IOS,RN,RL,PFE,IINFO(37),5,IERR,UR)
      CALL FDSSI(IFILE,IOS,RN,RL,PFE,RNU,MP,IERR,UR)
C
      IF(IOS.NE.0) IERR=IFILE*10000+21
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB21----------------------------------------------------
      E    N    D
C:::6     ,,,,,FDSB27.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSB27(ABT,EX,DW,U1,U2,IERR,IFILE1,IFILE2,IFILE3,
     &           MV,MVL,N,NK,NAB,NEX,RL,RN1,RN2,RN3,UR1,UR2,UR3)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 2 7   COMPUTES THE EXTRAPOLATION OF THE SOLUTION   ***
C**      AND THE FIX PART OF THE T-DERIVATIVES. THE CORRESPONDING   ***
C**      PROFILES ARE READ FROM FILE 1. THE INITIAL SOLUTION FOR    ***
C**      THE NEWTON-RAPHSON-ITERATION IS WRITTEN ON FILE 2, THE     ***
C**      T-DERIVATIVE ON FILE 3.                                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IERR,IFILE1,IFILE2,IFILE3,MV,MVL,N,NK,NAB,NEX,
     &          RL,RN1(1),RN2,RN3,UR1,UR2,UR3
      DOUBLE PRECISION   ABT(1),EX(1),DW(1),U1(1),U2(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I IN  I  COEFFICIENTS FOR THE T-DERIVATIVE ABT(NAB)
C--------I------I-----I------------------------------------------------
C EX     I  DP  I IN  I  COEFFICIENTS FOR THE EXTRAPOLATION EX(NEX)
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  3 WORKARRAYS FOR THE SOLUTION THE DERIVATIVE
C U1,U2  I      I     I  AND THE EXTRAPOLATION.
C        I      I     I  ARRAYS : DW(M), U1(M), U2(M)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF
C        I      I     I  THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NAB    I  I   I IN  I  NUMBER OF COEFFICIENTS IN ABT
C--------I------I-----I------------------------------------------------
C NEX    I  I   I IN  I  NUMBER OF COEFFICIENTS IN EX
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C RN1,2,3I  I   I IN  I  RECORD NUMBERS FOR THE PROFILES ON FILE 1,
C        I      I     I  THE EXTRAPOLATION ON FILE2 AND THE DERIVATIVE
C        I      I     I  ON FILE 3.
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I, IA, J, K, M, NEF, NV, RN
      DOUBLE PRECISION   ZERO
      EXTERNAL FDS317, FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     --------------------
C
      M = N * NK
C
C***  PARALLEL COMPUTATION OF THE EXTRAPOLATION AND THE FIX PART
C     OF THE T-DERIVATIVE.
C
C***  INITIALIZE RESULT-VECTORS
C
      K = 0
   10 IA = K
      NV = MIN(M-K,MVL)
      K = K + NV
      DO 20 I=1,NV
         U1(I+IA) = ZERO
         U2(I+IA) = ZERO
   20 CONTINUE
      IF(K.LT.M) GO TO 10
      NEF = MAX(NEX+1,NAB)
      DO 100 J=2,NEF
C
C***     READ SOLUTION AT T(J)
C
         RN = RN1(J)
         CALL FDS332(DW,N,NK,MV,IFILE1,RN,RL,UR1,FDS317,IERR)
C
C***     SPLITTING UP THE LOOP 1(1)M INTO PARTS OF LENGTH MVL
C
         K = 0
   40    IA = K
         NV = MIN(M-K,MVL)
         K = K + NV
         IF(J.LE.NEX+1) THEN
         DO 50 I=1,NV
            U1(I+IA) = U1(I+IA) + EX(J-1) * DW(I+IA)
   50    CONTINUE
         ENDIF
         IF(J.LE.NAB) THEN
         DO 60 I=1,NV
            U2(I+IA) = U2(I+IA) + ABT(J) * DW(I+IA)
   60    CONTINUE
         ENDIF
         IF(K.LT.M) GO TO 40
  100 CONTINUE
C
C***  WRITE U1 ON FILE 2, U2 ON FILE 3
C
      RN = RN2
      CALL FDS332(U1,N,NK,MV,IFILE2,RN,RL,UR2,FDS318,IERR)
      IF(IERR.NE.0) RETURN
      RN = RN3
      CALL FDS332(U2,N,NK,MV,IFILE3,RN,RL,UR3,FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB27----------------------------------------------------
      E    N    D
C:::7     ,,,,,FDSB31.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSB31(DT,DTEPS,DTMAX,DUT,FABT,IER,IFILE1,IFILE2,
     &           IFILE3,IN,LDF,MV,MVL,M222,N,NK,NPFT,PUT,RL,RN1,
     &           RN3,UR1,UR2,UR3)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 3 1   COMPUTES THE T-DISCRETIZATION-ERROR ON THE   ***
C**      LEVEL OF EQUATION FOR A GIVEN FORMULA AND PROFILES ON      ***
C**      FILE 1. THE JACOBI-MATRICES PUT ARE READ FROM FILE 2.      ***
C**      THE MAXIMUM OF THE T-ERROR FOR EACH EQUATION IS COMPUTED   ***
C***     AND STORED IN DTMAX. IF IFILE3 > 0 THE T-ERROR IS WRITTEN  ***
C**      ON FILE 3. IF LDF = TRUE THE T-ERROR IS ADDED TO THE ERROR ***
C**      IN BV-DIRECTION.                                           ***
C**      THIS SUBROUTINE CAN ALSO BE USED FOR THE COMPUTATION OF    ***
C***     THE ERROR-ESTIMATES FOR HIGHER AND LOWER T-ORDER.          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IER,IFILE1,IFILE2,IFILE3,IN,MV,MVL,M222,N,NK,
     &          NPFT,RL,RN1(1),RN3,UR1,UR2,UR3
      DOUBLE PRECISION   DT(N,NK),DTEPS,DTMAX(NK),DUT(N,NK),
     &                   FABT(NPFT),PUT(N)
      LOGICAL   LDF
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DT     I  DP  I  -  I  WORKARRAY FOR THE T-ERROR ON THE LEVEL OF
C        I      I     I  EQUATION.
C        I      I     I  ARRAY : DT(N,NK)
C--------I------I-----I------------------------------------------------
C DTEPS  I  DP  I IN  I  LOWER BOUND FOR THE MAXIMUM OF DT
C--------I------I-----I------------------------------------------------
C DTMAX  I  DP  I OUT I  MAXIMUM OF DT FOR EACH EQUATION
C--------I------I-----I------------------------------------------------
C DUT    I  DP  I  -  I  WORKARRAY FOR THE T-DISCRETIZATION-ERROR
C        I      I     I  ARRAY : DUT(N,NK)
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I IN  I  COEFFICIENTS OF THE DIFFERENCE FORMULA FOR
C        I      I     I  THE T-DISCRETIZATION-ERROR
C        I      I     I  ARRAY : FABT(NPFT)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  NUMBER OF MV-PARTS
C--------I------I-----I------------------------------------------------
C LDF    I  L   I IN  I  IF LDF = TRUE THE T-ERROR IS ADDED TO THE
C        I      I     I  ERROR IN BV-DIRECTION
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF
C        I      I     I  THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NPFT   I  I   I IN  I  NUMBER OF PROFILES NEEDED FOR THE
C        I      I     I  ERROR-FORMULA
C--------I------I-----I------------------------------------------------
C PUT    I  DP  I  -  I  WORKARRAY FOR THE JACOBI-MATRICES
C        I      I     I  ARRAY : PUT(N)
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C RN1    I  I   I IN  I  RECORD NUMBERS FOR THE LAST NPFT PROFILES
C        I      I     I  ARRAY : RN1(NPFT)
C--------I------I-----I------------------------------------------------
C RN3    I  I   I IN  I  RECORD NUMBERS FOR THE T-ERROR
C--------I------I-----I------------------------------------------------
C UR1,2, I  I   I I/O I  SYNCHRONISATION -VARIABLES
C   3    I      I     I
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IE,IEND,IK,IOS,J,K,NV,PFE,RN,RNJ
      DOUBLE PRECISION   ZERO
      EXTERNAL FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO=0.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  EVALUATION OF THE DIFFERENCE FORMULA FOR THE T-DISCR.-ERROR
C
      CALL FDS027(FABT,IFILE1,0,MV,MVL,N,NPFT,NK,RL,
     &            RN1,0,DT,DUT,UR1,0)
C
C***  INITIALIZATIONS
C
      DO 15 IK=1,NK
      K=0
    5 IA=K
      NV=MIN(N-K,MVL)
      K=K+NV
      DO 10 I=1,NV
         DT(I+IA,IK) = ZERO
   10 CONTINUE
      IF(K.LT.N) GO TO 5
   15 CONTINUE
      RN = 0
C
C***  COMPUTATION OF THE T-ERROR ON THE LEVEL OF EQUATION
C
      DO 100 IE=1,NK
      DO 100 IK=1,NK
         RN  = RN + M222
         RNJ = RN
         NV  = MV
         IA  = 1
         DO 40 J=1,IN
            IF(J.EQ.IN) NV = N - (IN - 1) * MV
            CALL FDS317(IFILE2,IOS,RNJ,RL,PFE,PUT(IA),NV,IER,UR2)
            RNJ = RNJ - 1 + NK * NK * M222
            IA  = IA + MV
   40    CONTINUE
         K=0
   45    IA=K
         NV=MIN(N-K,MVL)
         K=K+NV
         DO 50 I=1,NV
            DT(I+IA,IE) = DT(I+IA,IE) - PUT(I+IA) * DUT(I+IA,IK)
   50    CONTINUE
         IF(K.LT.N) GO TO 45
  100 CONTINUE
C
C***  MAXIMUM OF DT FOR EACH EQUATION
C
      CALL FDS111(N,NK,N,NK,DT,DTMAX,DTEPS)
C
C***  OUTPUT ON FILE IF IFILE3 > 0
C
      IF(IFILE3.GT.0) THEN
         RN = RN3
         CALL FDS332(DT,N,NK,MV,IFILE3,RN,RL,UR3,FDS318,IER)
      ENDIF
C
C***  ADD T-ERROR TO THE ERROR IN BV-DIRECTION
C
      IF(LDF) THEN
         NV = MV
         RN = 1
         DO 150 J=1,IN
            IF(J.EQ.IN) NV = N - (IN - 1) * MV
            IA = 1 + (J - 1) * MV
            DO 140 IK=1,NK
               CALL FDS317(IFILE3,IOS,RN,RL,PFE,DUT(IA,IK),NV,IER,UR3)
               IEND = IA + NV - 1
               DO 130 I=IA,IEND
                  DUT(I,IK) = DUT(I,IK) + DT(I,IK)
  130          CONTINUE
               RN = RN - 1
               CALL FDS318(IFILE3,IOS,RN,RL,PFE,DUT(IA,IK),NV,IER,UR3)
  140       CONTINUE
  150    CONTINUE
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB31----------------------------------------------------
      E    N    D
C:::8     ,,,,,FDSB32.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSB32(ABT,DF,DU,DW,IFILE1,IFILE2,IFILE3,MV,MVL,
     &           M222,N,NAB,NK,RL,RNDU,UR1,UR2,UR3,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 3 2   COMPUTES AND ADDS THE GLOBAL ERROR ON THE    ***
C**      LEVEL OF EQUATIONS. THE PROFILES ARE READ FROM FILE 1,     ***
C**      THE ERROR IS READ AND WRITTEN ON FILE 2, THE JACOBIAN      ***
C**      MATRICES ARE READ FROM FILE 3.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IFILE1,IFILE2,IFILE3,MV,MVL,M222,N,NAB,NK,
     &          RL,RNDU(1),UR1,UR2,UR3,IERR
      DOUBLE PRECISION   ABT(1),DF(1),DU(N,NK),DW(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I IN  I  COEFFICIENTS OF THE DIFFERENCE-FORMULA FOR
C        I      I     I  THE T-DERIVATIVE           ARRAY : ABT(NAB)
C--------I------I-----I------------------------------------------------
C DF     I  DP  I  -  I  WORKARRAY FOR THE DISCR.-ERROR OF LENGTH MV
C--------I------I-----I------------------------------------------------
C DU     I  DP  I  -  I  WORKARRAY FOR THE GLOBAL-ERROR OF LENGTH M
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY FOR THE PROFILES AND THE JACOBIANS
C        I      I     I  OF LENGTH M
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT-NUMBERS
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF
C        I      I     I  THE DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBIANS
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NAB    I  I   I IN  I  NUMBER OF COEFFICIENTS IN ABT
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C RNDU   I  I   I IN  I  RECORD-NUMBERS FOR THE PROFILES DU
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IE,IK,IN,IOS,J,NDU,NV,PFE,RNDF,RNJ
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     --------------------
C
      IN = N / MV
      IF(N-IN*MV.GT.0) IN=IN+1
C
C***  COMPUTE THE FIX PART OF THE GLOBAL ERROR
C
      NDU = NAB - 1
      CALL FDS027(ABT(2),IFILE1,0,MV,MVL,N,NDU,NK,RL,
     &            RNDU(2),0,DW,DU,UR1,0)
C
C***  READ THE ERROR ON THE LEVEL OF EQUATION FROM FILE 2
C     AND THE JACOBIAN MATRICES PUT FROM FILE 3 IN PARTS OF
C     LENGTH MV, ADD THE GLOBAL ERROR AND WRITE THE COMPLETE
C     ERROR ON FILE 2.
C
      RNDF = 1
      RNJ  = 1
      NV   = MV
      DO 350 J=1,IN
         IF(J.EQ.IN) NV=N-(IN-1)*MV
         IA = (J - 1) * MV
         DO 300 IE=1,NK
            CALL FDS317(IFILE2,IOS,RNDF,RL,PFE,DF,NV,IERR,UR2)
            DO 250 IK=1,NK
               RNJ = RNJ + M222 - 1
               CALL FDS317(IFILE3,IOS,RNJ,RL,PFE,DW,NV,IERR,UR3)
               DO 200 I=1,NV
                  DF(I) = DF(I) - DW(I) * DU(I+IA,IK)
  200          CONTINUE
  250       CONTINUE
            RNDF = RNDF - 1
            CALL FDS318(IFILE2,IOS,RNDF,RL,PFE,DF,NV,IERR,UR2)
  300    CONTINUE
  350 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB32----------------------------------------------------
      E    N    D
C:::9     ,,,,,FDSB51.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSB51(DFT,DFTI,DFTMAX,DFTEPS,DW,FABT,IDOKU,IERR,
     &           IFILE1,IFILE2,IN,LMAX,LOT1,LOUT,MV,MVL,M222,N,NK,NOT,
     &           NOTMAX,NOTNEW,NTMAX,RL,RN1,U1,U2,UR1,UR2)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 5 1   DETERMINES THE NEW ORDER OF CONSISTENCY IN   ***
C**      INITIAL-VALUE-DIRECTION. THE T-DISCR.-ERROR DETERMINES     ***
C**      THE NEW ORDER. AN OPTIMAL ORDER IS EQUIVALENT TO MINIMUM   ***
C**      DISCR.-ERROR.                                              ***
C***     THIS SUBROUTINE USES THE ERROR-FORMULAE OF FDS007, THE     ***
C**      NUMBER OF PROFILES NEEDED FOR ORDER NOT IS NOT+2.          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IDOKU,IERR,IFILE1,IFILE2,IN,LOUT,MV,MVL,M222,N,NK,NOT,
     &          NOTMAX,NOTNEW,NTMAX,RL,RN1(1),UR1,UR2
      DOUBLE PRECISION   DFT(NK),DFTI(NK),DFTMAX,DFTEPS,DW(N),
     &                   FABT(NTMAX,NOTMAX),U1(N,NK),U2(N,NK)
      LOGICAL   LMAX, LOT1
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DFT    I  DP  I I/O I  MAXIMUM OF THE T-DISCR.-ERROR FOR EACH
C        I      I     I  EQUATION.
C        I      I     I  INPUT  : ERROR FOR ACTUAL ORDER NOT
C        I      I     I  OUTPUT : ERROR FOR NEW ORDER NOTNEW
C        I      I     I  ARRAY  : DFT(NK)
C--------I------I-----I------------------------------------------------
C DFTI   I  DP  I  -  I  WORKARRAY FOR THE ERROR-MAXIMA
C        I      I     I  ARRAY : DFTI(NK)
C--------I------I-----I------------------------------------------------
C DFTMAX I  DP  I -/O I  IF LMAX = TRUE, MAXIMUM OF THE T-DISCR.-ERROR
C        I      I     I  FOR ORDER NOTNEW
C--------I------I-----I------------------------------------------------
C DFTEPS I  DP  I IN  I  LOWER BOUND FOR DFT
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY FOR FDSB31       ARRAY : DW(N)
C--------I------I-----I------------------------------------------------
C FABT   I  DP  I IN  I  FORMULAE FOR THE DISCR.-ERROR
C        I      I     I  ARRAY : FABT(NTMAX,NOTMAX)
C--------I------I-----I------------------------------------------------
C IDOKU  I  I   I IN  I  CONTROL OF THE OUTPUT
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C IFILE1 I  I   I IN  I  UNIT-NUMBER (FILE WITH PROFILES)
C--------I------I-----I------------------------------------------------
C IFILE2 I  I   I IN  I  UNIT-NUMBER (FILE WITH JACOBIANS)
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  NUMBER OF MV-PARTS
C--------I------I-----I------------------------------------------------
C LMAX   I  L   I IN  I  IF LMAX = TRUE THE MAXIMUM OVER ALL COMPONENTS
C        I      I     I  DETERMINES THE NEW ORDER, ELSE THE CRITERION
C        I      I     I  IS CHECKED FOR EVERY EQUATION
C--------I------I-----I------------------------------------------------
C LOT1   I  L   I IN  I  IF LOT1 = TRUE THE ORDERS FROM 1 TO NOT-1 ARE
C        I      I     I  TESTED, ELSE ONLY NOT-1 IS TESTED AS LOWER
C        I      I     I  ORDER
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT NUMBER OF OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C MVL    I  I   I IN  I  MAXIMUM VECTOR-LENGTH
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NOT    I  I   I IN  I  ACTUAL ORDER OF CONSISTENCY
C--------I------I-----I------------------------------------------------
C NOTMAX I  I   I IN  I  MAXIMUM ORDER IN IV-DIRECTION
C--------I------I-----I------------------------------------------------
C NOTNEW I  I   I OUT I  NEW ORDER FOR THE NEXT STEP
C--------I------I-----I------------------------------------------------
C NTMAX  I  I   I IN  I  MAXIMUM NUMBER OF AVAILABLE PROFILES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH
C--------I------I-----I------------------------------------------------
C RN1    I  I   I IN  I  RECORD NUMBERS FOR THE LAST PROFILES
C        I      I     I  RN(1) IS THE RECORD OF THE ACTUAL PROFILE
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY FOR FDSB31       ARRAY : U1(N,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I  -  I  WORKARRAY FOR FDSB31       ARRAY : U2(N,NK)
C--------I------I-----I------------------------------------------------
C UR1,2  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   IK, IOT, NOTMIN, NPFT
      DOUBLE PRECISION   DFTIM, FDS101
      LOGICAL   LMIN, LPLUS
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IF(LMAX) DFTMAX = FDS101(NK,DFT,DFTEPS)
      NOTNEW = NOT
C
C***  CHECK LOWER ORDER
C
      IF(NOT.EQ.1) GO TO 150
      IF(LOT1) THEN
         NOTMIN = 1
      ELSE
         NOTMIN = NOT - 1
      ENDIF
C
C***  CHECK LOWER ORDERS STARTING WITH NOT-1 DOWN TO NOTMIN
C
      DO 120 IOT=NOT-1,NOTMIN,-1
C
C***     COMPUTE DISCR.-ERROR FOR ORDER IOT
C
         NPFT = IOT + 2
         CALL FDSB31(U1,DFTEPS,DFTI,U2,FABT(1,IOT),IERR,IFILE1,
     &        IFILE2,0,IN,.FALSE.,MV,MVL,M222,N,NK,NPFT,DW,RL,
     &        RN1,0,UR1,UR2,0)
         IF(IDOKU.GE.1)  WRITE(LOUT,1000) IOT,(IK,DFTI(IK),IK=1,NK)
         IF(LMAX) THEN
            DFTIM = FDS101(NK,DFTI,DFTEPS)
            LMIN  = .FALSE.
            IF(DFTIM.LT.DFTMAX) THEN
               LMIN   = .TRUE.
               DFTMAX = DFTIM
            ENDIF
         ELSE
            LMIN = .FALSE.
            DO 100 IK=1,NK
               IF(DFTI(IK).LT.DFT(IK)) LMIN = .TRUE.
  100       CONTINUE
         ENDIF
            IF(LMIN) THEN
C
C***           REDUCE ORDER TO IOT
C
               NOTNEW = IOT
               DO 110 IK=1,NK
                  DFT(IK) = DFTI(IK)
  110          CONTINUE
            ENDIF
  120 CONTINUE
C
C***  CHECK UPPER ORDER
C
  150 IF(NOTMAX.LE.NOT.OR.NOTNEW.LT.NOT) GO TO 200
C
C***  COMPUTE DISCR.-ERROR FOR ORDER NOT+1
C
      NPFT = NOT +3
      IOT = NOT + 1
      CALL FDSB31(U1,DFTEPS,DFTI,U2,FABT(1,IOT),IERR,IFILE1,
     &     IFILE2,0,IN,.FALSE.,MV,MVL,M222,N,NK,NPFT,DW,RL,
     &     RN1,0,UR1,UR2,0)
      IF(IDOKU.GE.1)  WRITE(LOUT,1000) IOT,(IK,DFTI(IK),IK=1,NK)
      IF(LMAX) THEN
         DFTIM = FDS101(NK,DFTI,DFTEPS)
         LPLUS = .FALSE.
         IF(DFTIM.LE.DFTMAX) THEN
            LPLUS  = .TRUE.
            DFTMAX = DFTIM
         ENDIF
      ELSE
         LPLUS = .TRUE.
         DO 160 IK=1,NK
            IF(DFT(IK).LT.DFTI(IK)) LPLUS = .FALSE.
  160    CONTINUE
      ENDIF
      IF(LPLUS) THEN
C
C***     RAISE ORDER TO NOT+1
C
         NOTNEW = NOT+1
         DO 170 IK=1,NK
            DFT(IK) = DFTI(IK)
  170    CONTINUE
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ERROR ESTIMATE FOR THE ORDER NOT=',I4/
     &       (I5,'.  T-ERROR:',G10.2))
  200 R E T U R N
C-----END OF FDSB51----------------------------------------------------
      E    N    D
C:::10    ,,,,,FDSB52.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSB52(DFT,DFX,EPS,H,HMIN,HMAX,IST,LMAX,NK,NOT,TOLLE)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 5 2   DETERMINES THE NEW STEPSIZE IN INITIAL-      ***
C**      VALUE-DIRECTION.                                           ***
C**      (HNEW = (HOLD * DFX / (3 * DFT)) ** (1 / NOT))             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IST, NK, NOT
      DOUBLE PRECISION      DFT(NK),DFX(NK),EPS,H,HMIN,HMAX,TOLLE
      LOGICAL   LMAX
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DFT    I  DP  I IN  I  DISCR-ERROR IN INITIAL-VALUE-DIRECTION
C        I      I     I  ARRAY : DFT(NK)
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I IN  I  DISCR-ERROR IN BOUNDARY-VALUE-DIRECTION
C        I      I     I  ARRAY : DFX(NK)
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C H      I  DP  I I/O I  IN  : OLD STEPSIZE
C        I      I     I  OUT : NEW STEPSIZE
C        I      I     I  H MAY BE NEGATIVE
C--------I------I-----I------------------------------------------------
C HMIN   I  DP  I IN  I  HMIN <= ABS(H) <= HMAX
C HMAX   I      I     I
C--------I------I-----I------------------------------------------------
C IST    I  I   I IN  I  IST = 1, 2, 3 DETERMINES THE MAXIMUM VARIATION
C        I      I     I  OF H (FAKMIN, FAKMAX)
C--------I------I-----I------------------------------------------------
C LMAX   I  L   I IN  I  IF LMAX = TRUE THE MAXIMUM OF THE ERROR OVER
C        I      I     I  ALL EQUATIONS IS USED FOR THE STEP SIZE
C        I      I     I  CONTROL, ELSE SEPARATE CONTROL FOR EACH
C        I      I     I  EQUATION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C NOT    I  I   I IN  I  ORDER OF CONSISTENCY
C--------I------I-----I------------------------------------------------
C TOLLE  I  DP  I IN  I  TOLERANCE ON THE LEVEL OF EQUATION
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   IK, ISIG
      DOUBLE PRECISION   DFFT,DFFX,EXP,FAK,FAKK,FAKMAX,FAKMIN,FDS101,
     &          ZERO,ONE,TWO,THREE,TEN,HUND,HALF,P1,P4
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO=0.0, ONE=1.0, TWO=2.0, THREE=3.0, TEN=10.0,
     &            HUND=100.0, HALF=0.5, P1=0.1, P4=0.0001)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      GO TO(10,20,30) IST
   10 FAKMIN = P4
      FAKMAX = HUND
      GO TO 40
   20 FAKMIN = P1
      FAKMAX = TEN
      GO TO 40
   30 FAKMIN = HALF
      FAKMAX = TWO
   40 FAK = FAKMAX
      EXP = ONE / NOT
      IF(LMAX) THEN
C
C***  VARIATION-FACTOR FOR THE MAXIMUM ERROR OVER ALL COMPONENTS
C
         DFFT = FDS101(NK,DFT,EPS)
         DFFX = FDS101(NK,DFX,TOLLE)
         FAKK = (DFFX / (THREE * DFFT)) ** EXP
         IF(FAKK.LT.FAK) FAK = FAKK
      ELSE
C
C***  MINIMUM VARIATION-FACTOR FOR ALL COMPONENTS
C
      DO 50 IK=1,NK
         DFFT = MAX(DFT(IK),EPS)
         DFFX = MAX(DFX(IK),TOLLE)
         FAKK = (DFFX / (THREE * DFFT)) ** EXP
         IF(FAKK.LT.FAK) FAK = FAKK
   50 CONTINUE
      ENDIF
      IF(FAK.LT.FAKMIN) FAK = FAKMIN
C
C***  COMPUTE NEW STEPSIZE
C
      H = H * FAK
C
C***  CHECK MINIMUM AND MAXIMUM STEPSIZE
      ISIG = 1
      IF(H.LT.ZERO) ISIG = - 1
      IF(ABS(H).GT.HMAX) H = ISIG * HMAX
      IF(ABS(H).LT.HMIN) H = ISIG * HMIN
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB52----------------------------------------------------
      E    N    D
C:::11    ,,,,,FDSB70.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSB70 (N,NK,M,MP,NOT,MV,RL,RNU,IFILE,UR,AIP,
     &                   DW,ST,STA,STI,STIA,T,TOUT,UI)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S B 7 0  INTERPOLATES THE SOLUTION ON A USER-DEFINED   ***
C**      POINT TOUT. THE COEFFICIENTS OF THE INTERPOLATION FORMULA  ***
C**      FOR ORDER NOT ARE COMPUTED AND FDS027 IS CALLED FOR THE    ***
C**      EVALUATION OF THE FORMULA.
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NK,M,MP,NOT,MV,RL,RNU(1),IFILE,UR
C**                                                                 ***
      DOUBLE PRECISION  AIP(1),DW(1),ST(MP,MP),STA(MP,MP),STI(MP,MP),
     &         STIA(MP,MP),T(1),TOUT,UI(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  NUMBER OF AVAILABLE PROFILES IN T-DIRECTION
C--------I------I-----I------------------------------------------------
C MP     I  I   I IN  I  MAXIMUM NUMBER OF PROFILES IN T-DIRECTION
C--------I------I-----I------------------------------------------------
C NOT    I  I   I IN  I  ORDER OF CONSISTENCY FOR THE DIFFERENCE
C        I      I     I  FORMULAE
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE FILE RECORD
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C RNU    I  I   I IN  I  RECORD NUMBERS FOR THE SOLUTION PROFILES
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBER OF THE SOLUTION FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLE
C--------I------I-----I------------------------------------------------
C AIP    I  DP  I  -  I  WORKARRAY FOR THE INTERPOLATION FORMULA
C        I      I     I  ARRAY: AIP(MP)
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY FOR THE EVALUATION OF THE FORMULA
C        I      I     I  ARRAY: DW(N*NK)
C--------I------I-----I------------------------------------------------
C ST,STA I  DP  I IN  I  ARRAYS WITH THE SCHEME OF THE DEVIDED
C        I      I     I  DIFFERENCES
C        I      I     I  ARRAYS: ST(MP,MP), STA(MP,MP)
C--------I------I-----I------------------------------------------------
C STI,   I  DP  I  -  I  WORKARRAYS FOR THE SCHEME OF THE DEVIDED
C STIA   I      I     I  DIFFERENCES FOR T = TOUT
C        I      I     I  ARRAYS: STI(MP,MP), STIA(MP,MP)
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  T-COORDINATES FOR THE AVAILABLE SOLUTION
C        I      I     I  PROFILES
C--------I------I-----I------------------------------------------------
C TOUT   I  DP  I IN  I  T-COORDINATE WHERE THE SOLUTION HAS TO BE
C        I      I     I  INTERPOLATED
C--------I------I-----I------------------------------------------------
C UI     I  DP  I OUT I  INTERPOLATED SOLUTION
C        I      I     I  ARRAY: UI(N,NK)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, I1, J, NIP, NIP1, MVL
C**                                                                 ***
      DOUBLE PRECISION     ZERO, ONE
C**
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER (ZERO=0.0 , ONE=1.0 , MVL=65535)
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  INITIALIZE THE SCHEME OF THE DIVIDED DIFFERENCES
C
      IF(M.LT.3) GO TO 20
      DO 10 I=2,M-1
      DO 10 J=1,I
         STIA(J+1,I) = ST(J,I)
   10 CONTINUE
   20 DO 30 I=1,M-1
         STIA(1,I) = ZERO
   30 CONTINUE
      STIA(2,1) = ONE
      DO 40 I=1,M
      DO 40 J=1,M
         STI(J,I) = ZERO
   40 CONTINUE
C
C***  COMPUTE THE SCHEME OF THE DIVIDED DIFFERENCES
C
      STI(1,1) = ONE
      DO 50 I=2,M
      I1 = I - 1
      DO 50 J=1,I
         STI(J,I) = (STI(J,I1) - STIA(J,I1)) / (TOUT - T(I1))
   50 CONTINUE
C
C***  FORMULA FOR THE INTERPOLATION
C
      NIP  = NOT + 1
      NIP1 = NIP + 1
      DO 60 I=1,NIP
         AIP(I) = -STI(I+1,NIP1) / STI(1,NIP1)
   60 CONTINUE
C
C***  EVALUATION OF THE INTERPOLATION FORMULA
C
      CALL FDS027(AIP,IFILE,0,MV,MVL,N,NIP,NK,RL,RNU,0,DW,UI,UR,0)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSB70----------------------------------------------------
      E    N    D
C:::12    ,,,,,FDSC01.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSC01(IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,U1,U2,
     &                  IND,IERR,FDSU01,FDSU02,FDSU03,FDSU04,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 0 1    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 3-DIMENSIONAL ELLIPTIC DIFFERENTIAL***
C**      EQUATIONS IN A RECTANGULAR DOMAIN WITH PRESCRIBED GRID AND ***
C**      ORDER. ADDITIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSC01. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1)
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(30)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ+5+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       ARRAY : LINFO(10+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(15)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NZ*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I I/O I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  ESTIMATE FOR THE RELATIVE ERROR
C        I      I     I  ARRAY : U2(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  II1,II2,II3,II4,II5,II6,II7,II8,II9,II10,II11,II12,IDUM,
     &         IDOKU,IN,IMM,IDMAX,IOS,LOUT,MNX,MNY,MNZ,MV,MAXIT,MDW,
     &         MIW,M,MOX,MOY,MOZ,MLF,M222,MT,M1,M2,M3,M10,M20,NCTRX,
     &         NCTRY,NCTRZ,NK,NX,NY,NZ,NOX,NOY,NOZ,N,RL,RL4,RLW,
     &         RN,UR(10),I,IBC(6),NOXX,NOYY,NOZZ,NOM
      DOUBLE PRECISION  TOL, ZERO, EPS, DFX(100), FDS001, A
      LOGICAL   LSTART, LX, LY, LZ, LRST
      EXTERNAL  FDS317,FDS318,
     &          FDS460,FDSD10,FDSD20,
     &          FDSC30,FDSD40
      CHARACTER TNAM*6,STA*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LSTART = LINFO(1)
      LX     = LINFO(2)
      LY     = LINFO(3)
      LZ     = LINFO(4)
      LRST   = LINFO(5)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MNZ    = IINFO(4)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      NOZ    = IINFO(13)
      NOM    = IINFO(18)
      DO 10 I=1,6
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      NZ = MNZ
      IF(LZ) NZ = NZ - 1
      N = NX * NY * NZ
      M = N * NK
      MOX = NOX + 4
      MOY = NOY + 4
      MOZ = NOZ + 4
      MLF = 2 * MAX(MOX,MOY,MOZ) - 1
      RL =  MV
      RL4 =  MAX(NX*NY,NY*NZ,NZ*NX)
      IN = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222 = 7
      MT   = 1
      IMM = MNX + MNY + MNZ + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(4)  = NZ
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(7)  = MNZ
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .FALSE.
      LINFO(5) = .FALSE.
C
      DINFO(IMM - 1) = ZERO
      DINFO(IMM)     = ZERO
C
      IERR = 0
C
      EPS = FDS001(A)
      TNAM = 'FDSC01'
C$$$  CALL FDS888(TNAM,NK,NX,NY,NZ,NOX,NOY,NOZ,MV)
C
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 8*NK + (3+8*NK)*MV
      M20 = 1 + NK + (10 + 7 * NK) * MV
      M1  = MAX(M10,M20,M+6*MV)
      M2  = 3 * MV
      M3  = MAX(NX*NY,NY*NZ,NZ*NX,MAX(MNX,MNY,MNZ)*MLF)
      CALL FDST02(LOUT,IFILE,2,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      M1 = 0
      IF(LX) M1 = M1 + 1
      IF(LY) M1 = M1 + 1
      IF(LZ) M1 = M1 + 1
      IF(M1.GT.2) THEN
         IERR = 1
         WRITE(6,1005)
      ENDIF
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      WRITE(6,1030)
      CALL FDST01(NZ,NOZ,DINFO(MNX+MNY+1),IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  OPEN TEMPORARY FILES
C
      STA='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STA='OLD'
      ENDIF
      RLW = RL
      CALL FDS300(IFILE(2) ,'FDS2',STA,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(3) ,'FDS3',STA,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STA,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(5) ,'FDS5',STA,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(6) ,'FDS6',STA,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(7) ,'FDS7',STA,'DIRECT',RLW,IOS,RN,UR(7))
      IF(IOS.NE.0) IERR=2
      RL  = RLW
      CALL FDS300(IFILE(8) ,'FDS8',STA,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STA,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STA,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9),LOUT,IERR)
      IF(IERR.EQ.399) GOTO 600
      IF(IERR.EQ.2) GOTO 600
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
      WRITE(LOUT,1040) NX,NY,NZ,NOX,NOY,NOZ,NK,EPS,MV
C
C***  COMPUTE THE DIFFERENCEFORMULAE FOR THE MATRIX
C
      IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY,NOZ)) THEN
          NOXX = NOM
          NOYY = NOM
          NOZZ = NOM
          WRITE(LOUT,1050) NOM
      ELSE
          NOXX = NOX
          NOYY = NOY
          NOZZ = NOZ
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(5),LZ,MNZ,NOZZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
      IINFO(19) = NCTRZ
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
      CALL FDSC12(IINFO,MNX,MNY,MNZ,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),
     &     DW(II11),DW(II12),IFILE(2),UR(2),LX,LY,LZ,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY.OR.NOZ.NE.NOZZ) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(5),LZ,MNZ,NOZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      ENDIF
C
C***  INITIAL SOLUTION FOR THE NEWTON-ITERATION
C
      IF((LX.OR.LY.OR.LZ).AND.LSTART) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS OF THE
C        INITIAL SOLUTION AND WRITE ON FILE 3
C
         CALL FDS437(MNX,MNY,MNZ,NX,NY,NZ,NK,U1,U2)
         RN = 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      ELSE
         II1 = 1
         II2 = II1 + MV * NK
         II3 = II2 + MV * NK
         II4 = II3 + MV * NK
         II5 = II4 + MV
         II6 = II5 + MV
         CALL FDSC13(M,NX,NY,NZ,NK,MV,IFILE(3),RL,UR(3),ZERO,
     &        DINFO(1),DINFO(MNX+1),DINFO(MNX+MNY+1),DW(II1),
     &        DW(II2),DW(II3),DW(II4),DW(II5),DW(II6),U1,U2,
     &        LSTART,LX,LY,LZ,FDSU02,IERR)
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  NEWTON-ITERATION
C
      CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST,MAXIT,LOUT,IND,IERR,
     &     FDSD10,FDSD20,FDSC30,FDSD40,FDSLIN,FDS460,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 500
C
C***  COMPUTATION OF THE ERROR OF THE SOLUTION
C
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,
     &     IW,MIW,DW,MDW,EPS,LOUT,IDUM,IERR,FDSLIN)
  500 RN = 1
      IF(LX.OR.LY.OR.LZ) THEN
C
C***  ADD THE RIGHT ENDS IN THE PERIODIC DIRECTIONS.
C     THE VALUES ARE TAKEN FROM THE LEFT END.
C
         CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U1)
         RN = 3 * IN * NK + 1
         CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U2)
      ELSE
         CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         RN = 3 * IN * NK + 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      ENDIF
  600 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSC01  -  VERSION FOR THE SOLUTION OF A',
     &       ' 3-DIMENSIONAL ELLIPTIC'/12X,'PDE SYSTEM WITH',
     &       ' PRESCRIBED GRID AND ORDER'/' ',70('*')/' ')
 1005 FORMAT(' 3 PERIODIC DIRECTIONS ARE NOT ALLOWED.'/
     &       ' THERE MUST EXIST AT LEAST ONE NONPERIODIC',
     &       ' DIRECTION.')
 1010 FORMAT(' TEST OF THE INPUT PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT PARAMETERS IN Y-DIRECTION')
 1030 FORMAT(' TEST OF THE INPUT PARAMETERS IN Z-DIRECTION')
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,3I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',3I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
C
      R E T U R N
C-----END OF FDSC01----------------------------------------------------
      E    N    D
C:::13    ,,,,,FDSC02.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC02(IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,U1,U2,
     &                  IND,IERR,FDSU01,FDSU02,FDSU03,FDSU04,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 0 2    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 3-DIMENSIONAL ELLIPTIC DIFFERENTIAL***
C**      EQUATIONS IN A RECTANGULAR DOMAIN WITH SELFADAPTED GRID AND***
C**      ORDER. ADDITIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSC02. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1)
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(36)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(3*NXMAX+5+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       ARRAY : LINFO(10+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NZ*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I I/O I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(NXMAX,NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  ESTIMATE FOR THE RELATIVE ERROR
C        I      I     I  ARRAY : U2(NXMAX,NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  II1,II2,II3,II4,II5,II6,II7,II8,II9,II10,II11,II12,IDUM,
     &         IDOKU,IN,IMM,IDMAX,IOPT,IOS,LOUT,MNX,MNY,MNZ,MV,MAXIT,
     &         MDI,MDW,MIW,M,MOX,MOY,MOZ,NXMAX,MLF,M222,MT,M1,M2,M3,
     &         M10,M20,NCTRX,NCTRY,NCTRZ,NK,NX,NY,NZ,NOX,NOY,NOZ,RN3,
     &         N,RL,RL4,RLW,RN,UR(10),I,IBC(6),NOXX,NOYY,NOZZ,NOM,
     &         ID,IY,IZ,IMMOLD,RN4,PFE,NXN,NYN,NZN
      DOUBLE PRECISION     
     & TOL,ZERO,EPS,DFX(100),FDS001,FDS101,A,DUMAX,DUOLD,
     &         TWO,R01,HALF
      LOGICAL   LSTART, LX, LY, LZ, LRST, LOPT
      EXTERNAL  FDS317,FDS318,FDS460,
     &          FDSD10,FDSD20,FDSC30,
     &          FDSD40
      CHARACTER TNAM*6,STA*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0,TWO=2.0,R01=0.1,HALF=0.5 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LSTART = LINFO(1)
      LX     = LINFO(2)
      LY     = LINFO(3)
      LZ     = LINFO(4)
      LRST   = LINFO(5)
      LOPT   = LINFO(9)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MNZ    = IINFO(4)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      NOZ    = IINFO(13)
      MOX    = IINFO(14)
      MOY    = IINFO(15)
      MOZ    = IINFO(16)
      NXMAX  = IINFO(17)
      NOM    = IINFO(18)
*VOCL LOOP,SCALAR
      DO 10 I=1,6
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      NZ = MNZ
      IF(LZ) NZ = NZ - 1
      N = NX * NY * NZ
      M = N * NK
      MOX = MAX(NOX,MOX) + 4
      MOY = MAX(NOY,MOY) + 4
      MOZ = MAX(NOZ,MOZ) + 4
      MLF = 2 * MAX(MOX,MOY,MOZ) - 1
      RL  =  MV
      RL4 = NXMAX * NXMAX
      IN  = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222  = 7
      MT    = 1
      IMM   = MNX + MNY + MNZ + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(4)  = NZ
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(7)  = MNZ
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
      IINFO(26) = LOUT
      IINFO(28) = NXMAX
      IINFO(31) = MOX
      IINFO(32) = MOY
      IINFO(33) = MOZ
      IINFO(34) = NOX
      IINFO(35) = NOY
      IINFO(36) = NOZ
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .FALSE.
      LINFO(5) = .FALSE.
      LINFO(9) = .TRUE.
C
      IOPT     = 0
C
      DINFO(IMM - 1) = ZERO
      DINFO(IMM)     = ZERO
C
      IERR = 0
C
      EPS = FDS001(A)
      TNAM = 'FDSC02'
C$$$  CALL FDS888(TNAM,NK,NX,NY,NZ,NOX,NOY,NOZ,MV)
C
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 8*NK + (3+8*NK)*MV
      M20 = 1 + NK + (10 + 7 * NK) * MV
      M1  = MAX(M10,M20,M+6*MV)
      M2  = 3 * MV
      M3  = MAX(NXMAX*NXMAX,NXMAX*MLF)
      CALL FDST02(LOUT,IFILE,1,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      M1 = 0
      IF(LX) M1 = M1 + 1
      IF(LY) M1 = M1 + 1
      IF(LZ) M1 = M1 + 1
      IF(M1.GT.2) THEN
         IERR = 1
         WRITE(6,1005)
      ENDIF
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      WRITE(6,1030)
      CALL FDST01(NZ,NOZ,DINFO(MNX+MNY+1),IERR)
      IF(NXMAX.LT.MAX(MNX,MNY,MNZ)) THEN
         IERR = 1
         WRITE(6,1035) NXMAX,MNX,MNY,MNZ
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  OPEN TEMPORARY FILES
C
      STA='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STA='OLD'
      ENDIF
      CALL FDS300(IFILE(1) ,'FDS1',STA,'SEQUENTIAL',RLW,IOS,RN,UR(1))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(2) ,'FDS2',STA,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(3) ,'FDS3',STA,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STA,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(5) ,'FDS5',STA,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(6) ,'FDS6',STA,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(7) ,'FDS7',STA,'DIRECT',RLW,IOS,RN,UR(7))
      RL   = RLW
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(8) ,'FDS8',STA,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STA,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STA,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9),LOUT,IERR)
      IF(IERR.EQ.399) GOTO 600
      IF(IERR.EQ.2) GOTO 600
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
      WRITE(LOUT,1040) NX,NY,NZ,NOX,NOY,NOZ,NK,TOL,EPS,MV
C
C***  COMPUTE THE DIFFERENCEFORMULAE FOR THE MATRIX
C
  120 IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY,NOZ)) THEN
          NOXX = NOM
          NOYY = NOM
          NOZZ = NOM
          WRITE(LOUT,1050) NOM
      ELSE
          NOXX = NOX
          NOYY = NOY
          NOZZ = NOZ
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(5),LZ,MNZ,NOZZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
      IINFO(19) = NCTRZ
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
      CALL FDSC12(IINFO,MNX,MNY,MNZ,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),
     &     DW(II11),DW(II12),IFILE(2),UR(2),LX,LY,LZ,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY.OR.NOZ.NE.NOZZ) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(5),LZ,MNZ,NOZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      ENDIF
C
C***  INITIAL SOLUTION FOR THE NEWTON-ITERATION
C
      IF(IOPT.GT.0) GO TO 200
      IF(LSTART) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS AND PACK THE
C        VECTOR OF THE INITIAL SOLUTION AND WRITE ON FILE 3
C
         CALL FDS437(NXMAX,NXMAX,NXMAX,NX,NY,NZ,NK,U1,U2)
         RN = 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      ELSE
         II1 = 1
         II2 = II1 + MV * NK
         II3 = II2 + MV * NK
         II4 = II3 + MV * NK
         II5 = II4 + MV
         II6 = II5 + MV
         CALL FDSC13(M,NX,NY,NZ,NK,MV,IFILE(3),RL,UR(3),ZERO,
     &        DINFO(1),DINFO(MNX+1),DINFO(MNX+MNY+1),DW(II1),
     &        DW(II2),DW(II3),DW(II4),DW(II5),DW(II6),U1,U2,
     &        LSTART,LX,LY,LZ,FDSU02,IERR)
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  NEWTON-ITERATION
C
  200 CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST,MAXIT,LOUT,IND,IERR,
     &     FDSD10,FDSD20,FDSC30,FDSD40,FDSLIN,FDS460,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 500
C
C***  COMPUTATION OF THE ERROR OF THE SOLUTION
C
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,
     &     IW,MIW,DW,MDW,EPS,LOUT,IDUM,IERR,FDSLIN)
      IF(IERR.NE.0.OR.IDUM.NE.1) GO TO 500
C
      RN3 = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
C
C***  COMPARE THE MAXIMUM RELATIVE ERROR WITH THE GIVEN TOLERANCE
C
      DUMAX = FDS101(M,DW,ZERO)
      IF(DUMAX.LE.TOL.AND..NOT.(LOPT.AND.DUMAX.LT.R01*TOL)) THEN
         WRITE(LOUT,1061) DUMAX,TOL
C        ***  SOLUTION ACCEPTED. ***
         GO TO 550
      ENDIF
      IF(IOPT.EQ.0)  GO TO 300
      IF(DUOLD.GT.TOL.AND.DUMAX.GT.TWO*DUOLD .OR.
     &      DUOLD.LT.R01*TOL.AND.DUMAX.LT.HALF*DUOLD)  THEN
         WRITE(LOUT,1062) TOL,DUMAX,DUOLD
C        ***  SOLUTION OF OLD OPTIMIZATION STEP IS BETTER. ***
         GO TO 650
      ENDIF
  300 IF(IOPT.GE.4) THEN
         WRITE(LOUT,1063) DUMAX,TOL
C        ***  MAXIMUM NUMBER OF OPTIMIZATION STEPS. ***
         GO TO 550
      ENDIF
      WRITE(LOUT,1064) DUMAX,TOL
C
C***  SAVE THE COMPUTED SOLUTION TOGETHER WITH THE ERROR ESTIMATE
C     AND THE INFORMATION VECTORS ON FILE 1
C
      MDI = MNX+MNY+MNZ+5+2*NK
      CALL FDS305(IFILE(1),IOS,RN,UR(1))
      PFE = 1
      CALL FDS308(IFILE(1),IOS,RN,PFE,IINFO,36,UR(1))
      CALL FDS310(IFILE(1),IOS,RN,PFE,DINFO,MDI,UR(1))
      RN3 = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
      CALL FDS310(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      RN3 = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
      CALL FDS310(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      IF(IOS.NE.0) THEN
         IERR = IFILE(1)*10000+310
         GO TO 550
      ENDIF
      IOPT = IOPT + 1
C
C***  CONTROL OF THE ORDERS IN BV-DIRECTION
C
      CALL FDSC51(IINFO,DINFO,LINFO,IBC,ILIN,LLIN,IFILE,UR,U1,N,NK,
     *            U2,IW,MIW,DW,MDW,EPS,TOL,IERR,FDSLIN)
      IF(IERR.NE.0) GO TO 650
C
C***  COMPUTATION OF A NEW NONEQUIDISTANT 3-D GRID
C
      CALL FDSC52(IINFO,DINFO,LINFO,IW,DW,U1,U2,NXN,NYN,NZN,
     *            .FALSE.,.TRUE.,EPS,TOL,IFILE,UR,IERR)
      IF(IERR.NE.0) GO TO 650
      M1 = NK*NXN*NYN*NZN + 6*MV
      IF (MDW.LT.M1) THEN
        IERR = 1
        WRITE(LOUT,1065) MDW,M1
        GO TO 650
      END IF
C
C***  INTERPOLATION OF THE SOLUTION INTO THE NEW GRID
C
      RN = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U1)
C
      NOX = IINFO(34)+1
      NOY = IINFO(35)+1
      NOZ = IINFO(36)+1
C
C***  READ NEW GRID FROM FILE 4
C
      RN4 = 1
      CALL FDS317(IFILE(4),IOS,RN4,RL4,PFE,DW(1),NXN,IDUM,UR(4))
      IY = 1 + NXN
      CALL FDS317(IFILE(4),IOS,RN4,RL4,PFE,DW(IY),NYN,IDUM,UR(4))
      IZ = IY + NYN
      CALL FDS317(IFILE(4),IOS,RN4,RL4,PFE,DW(IZ),NZN,IDUM,UR(4))
      ID = IZ + NZN
      M1 = MDW - NXN - NYN - NZN
C
C***  CALL THE INTERPOLATION-SUBROUTINE (ORDER NOX+1)
C
      CALL FDSC70(DW(ID),IW,M1,MIW,NK,MNX,MNY,MNZ,NXN,NYN,NZN,NOX,NOY,
     &            NOZ,DINFO(1),DINFO(1+MNX),DINFO(1+MNX+MNY),DW(1),
     &            DW(IY),DW(IZ),U1,U2,IERR)
      IF(IERR.NE.0) GO TO 650
C
C***  RE-ORGANIZE INFORMATION-VECTORS FOR THE NEXT SOLUTION STEP
C
      IMMOLD = IMM
      MNX    = NXN
      MNY    = NYN
      MNZ    = NZN
      NX     = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      NZ = MNZ
      IF(LZ) NZ = NZ - 1
      N  = NX * NY * NZ
      M  = N * NK
      IN = N / MV
      IF(N-IN*MV.GT.0) IN = IN + 1
      IMM = MNX + MNY + MNZ + 2
C
      M1 = 5 + 2 * NK
      IF(IMM.GT.IMMOLD) THEN
         DO 410 I=M1,1,-1
            DINFO(IMM-2+I) = DINFO(IMMOLD-2+I)
  410    CONTINUE
      ELSEIF(IMM.LT.IMMOLD) THEN
         DO 420 I=1,M1
            DINFO(IMM-2+I) = DINFO(IMMOLD-2+I)
  420    CONTINUE
      ENDIF
C
      M1 = MNX + MNY + MNZ
      DO 430 I = 1,M1
         DINFO(I) = DW(I)
  430 CONTINUE
C
      IINFO( 2) = NX
      IINFO( 3) = NY
      IINFO( 4) = NZ
      IINFO( 5) = MNX
      IINFO( 6) = MNY
      IINFO( 7) = MNZ
      IINFO( 9) = N
      IINFO(10) = M
      IINFO(13) = IN
      IINFO(16) = IMM
C
      ILIN(3) = M
      ILIN(4) = 2 * M - 1
C
      DINFO(IMM-1) = ZERO
      DINFO(IMM  ) = ZERO
      NOX  = NOX - 1
      NOY  = NOY - 1
      NOZ  = NOZ - 1
C
      WRITE(LOUT,1070) IOPT,NX,NY,NZ,NOX,NOY,NOZ,TOL
C
C***  INITIAL SOLUTION FOR THE NEXT ITERATION
C
      CALL FDS437(MNX,MNY,MNZ,NX,NY,NZ,NK,U2,U1)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      DUOLD = DUMAX
C
      GO TO 120
C
  500 IF(IOPT.GT.0) GO TO 650
  550 RN = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS439(NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX,DW,U1)
      RN = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS439(NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX,DW,U2)
      GO TO 900
  600 IF(IOPT.EQ.0) GO TO 900
  650 CALL FDS305(IFILE(1),IOS,RN,UR(1))
      PFE = 1
C
C***  READ COMPUTED SOLUTION TOGETHER WITH THE ERROR ESTIMATE
C     AND THE INFORMATION VECTORS FROM FILE 1
C
      CALL FDS307(IFILE(1),IOS,RN,PFE,IINFO,36,UR(1))
      NX   = IINFO(2)
      NY   = IINFO(3)
      NZ   = IINFO(4)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      MNZ  = IINFO(7)
      N    = IINFO(9)
      M    = IINFO(10)
      NOX  = IINFO(34)
      NOY  = IINFO(35)
      NOZ  = IINFO(36)
      MDI  = MNX+MNY+MNZ+5+2*NK
C
      CALL FDS309(IFILE(1),IOS,RN,PFE,DINFO,MDI,UR(1))
      CALL FDS309(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      CALL FDS439(NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX,DW,U1)
      CALL FDS309(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      CALL FDS439(NX,NY,NZ,NK,MNX,MNY,MNZ,NXMAX,DW,U2)
      IOPT = IOPT - 1
      DUMAX = FDS101(M,DW,ZERO)
      WRITE(LOUT,1080) IOPT,NX,NY,NZ,NOX,NOY,NOZ,DUMAX
  900 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSC02  -  VERSION FOR THE SOLUTION OF A',
     &       ' 3-DIMENSIONAL ELLIPTIC'/12X,'PDE SYSTEM WITH',
     &       ' SELF-ADAPTED GRID AND ORDER'/12X,'FOR A GIVEN TOLERANCE'
     &       /' ',70('*')/' ')
 1005 FORMAT(' 3 PERIODIC DIRECTIONS ARE NOT ALLOWED.'/
     &       ' THERE MUST EXIST AT LEAST ONE NONPERIODIC',
     &       ' DIRECTION.')
 1010 FORMAT(' TEST OF THE INPUT PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT PARAMETERS IN Y-DIRECTION')
 1030 FORMAT(' TEST OF THE INPUT PARAMETERS IN Z-DIRECTION')
 1035 FORMAT(' NXMAX =',I5,' MUST BE GREATER/EQUAL',
     &       ' NX, NY AND NZ :',3I5)
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,3I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',3I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' TOLERANCE         TOL =',G16.4/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
 1061 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &        ' **** SOLUTION ACCEPTED. ****'/' ')
 1062 FORMAT(/' TOLERANCE:                ',G15.2/
     &        ' ERROR OF THE NEW SOLUTION:',G15.2/
     &        ' ERROR OF THE OLD SOLUTION:',G15.2/
     &        ' **** OLD SOLUTION ACCEPTED. ****'/' ')
 1063 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &       ' ** MAXIMUM NUMBER OF OPTIMIZATION STEPS IS REACHED. **'/
     &       ' **** SOLUTION ACCEPTED. ****'/' ')
 1064 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &        ' **** SOLUTION NOT ACCEPTED. ****'/' ')
 1065 FORMAT(' MDW =',I8,' MUST BE GREATER/EQUAL ',I8)
 1070 FORMAT(' OPTIMIZATION STEP:',I4/' ',22('-')/
     &       ' NUMBERS OF GRID POINTS:',11X,3I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',3I10/
     &       ' TOLERANCE         TOL=',G16.4/)
 1080 FORMAT(' '/' SOLUTION OF OPTIMIZATION STEP:',I4,
     &         ' HAS BEEN LOADED.'/
     &         ' NUMBERS OF GRID POINTS:',11X,3I10/
     &         ' ORDERS OF THE DIFFERENCE FORMULAE:',3I10/
     &         ' MAXIMUM RELATIVE ERROR: ',G15.4/)
C
      R E T U R N
C-----END OF FDSC02----------------------------------------------------
      E    N    D
C:::14    ,,,,,FDSC12.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC12 (IINFO,MNX,MNY,MNZ,MLF,MV,ABX,ABXX,ABY,ABYY,
     &           ABZ,ABZZ,HX,HXX,HY,HYY,HZ,HZZ,IFILE,UR,LX,LY,LZ,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 1 2    READS THE DIFFERENCE-FORMULAE FOR THE FIRST ***
C**      AND SECOND DERIVATIVE IN THE X-,Y- AND Z- DIRECTION AND    ***
C**      CALLS SUBROUTINE FDS436 FOR EACH SORT OF BLOCK-DIAGONALS   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),MNX,MNY,MNZ,MLF,MV,IFILE,UR,IERR
      DOUBLE PRECISION  ABX(MNX,MLF),ABXX(MNX,MLF),ABY(MNY,MLF),
     &                  ABYY(MNY,MLF),ABZ(MNZ,MLF),ABZZ(MNZ,MLF),
     &                  HX(MV),HXX(MV),HY(MV),HYY(MV),HZ(MV),HZZ(MV)
      LOGICAL  LX, LY, LZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I I/O I  INFORMATION-VECTOR            ARRAY: IINFO(19)
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MNZ,MLFI      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C ABX,XX I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE X-DIRECTION
C        I      I     I  ARRAYS : ABX(MNX,MLF) , ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABY,YY I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Y-DIRECTION
C        I      I     I  ARRAYS : ABY(MNY,MLF) , ABYY(MNY,MLF)
C--------I------I-----I------------------------------------------------
C ABZ,ZZ I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Z-DIRECTION
C        I      I     I  ARRAYS : ABZ(MNZ,MLF) , ABZZ(MNZ,MLF)
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKAREAS FOR THE SORTED
C HY,HYY I      I     I  FORMULAES (MV VALUES)
C HZ,HZZ I      I     I  ARRAYS : H..(MV)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C LX,LY, I  L   I IN  I  = TRUE INDICATES, WHETHER THE DIRECTION
C LZ     I      I     I    IS PERIODIC
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  NX,NY,NZ,NCTRX,NCTRY,NCTRZ,NBDX,NBDY,NBDZ,
     &         RL,RN,IOS,PFE,IXEN,IYEN,IZEN,NH1(3),NH2
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NX     = IINFO(2)
      NY     = IINFO(3)
      NZ     = IINFO(4)
      RL     = IINFO(12)
      NCTRX  = IINFO(17)
      NCTRY  = IINFO(18)
      NCTRZ  = IINFO(19)
      NH1(1) = 0
      NH1(2) = 0
      NH1(3) = 0
C
C***  READ THE DIFFERENCE FORMULAE IN ONE DIMENSIONAL FORM.
C
      RN = 4
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABX ,MNX*MLF,IERR,UR)
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABXX,MNX*MLF,IERR,UR)
      RN = 11
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABY ,MNY*MLF,IERR,UR)
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABYY,MNY*MLF,IERR,UR)
      RN = 18
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABZ ,MNZ*MLF,IERR,UR)
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABZZ,MNZ*MLF,IERR,UR)
C
      NBDX = NCTRX-3
      NBDY = NCTRY-3
      NBDZ = NCTRZ-3
      IF(LX) NBDX=NCTRX-2
      IF(LY) NBDY=NCTRY-2
      IF(LZ) NBDZ=NCTRZ-2
      IINFO(17) = NBDX
      IINFO(18) = NBDY
      IINFO(19) = NBDZ
      IXEN = NCTRX+NBDX
      IYEN = NCTRY+NBDY
      IZEN = NCTRZ+NBDZ
      RN = 22
C
C***  UPPER BLOCK-DIAGONALS
C
C***  Z-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LZ) THEN
      NH1(3) = NCTRZ
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.FALSE.,.TRUE.,LZ,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,NBDZ,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Z-BLOCK-DIAGONALS
C
      NH1(3) = IZEN + 1
      NH2 = NZ - IZEN + NCTRZ - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.FALSE.,.TRUE.,LZ,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDZ,IERR)
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      NH1(2) = NCTRY
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,LY,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,NBDY,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Y-BLOCK-DIAGONALS
C
      NH1(2) = IYEN + 1
      NH2 = NY - IYEN + NCTRY - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,LY,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDY,IERR)
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      NH1(1) = NCTRX
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,LX,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,NBDX,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  X-BLOCK-DIAGONALS
C
      NH1(1) = IXEN + 1
      NH2 = NX - IXEN + NCTRX - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,LX,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDX,IERR)
      IF(IERR.NE.0) RETURN
C
C***  MAIN BLOCK-DIAGONALS
C
      NH1(1) = NCTRX + 1
      NH1(2) = NCTRY + 1
      NH1(3) = NCTRZ + 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .TRUE.,.TRUE.,.TRUE.,.FALSE.,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,1,IERR)
      IF(IERR.NE.0) RETURN
C
C***  LOWER BLOCK-DIAGONALS
C
C***  X-BLOCK-DIAGONALS
C
      NH1(1) = NCTRX
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,.FALSE.,LX,
     &            IFILE,RL,RN,UR,NH1,0,NBDX,IERR)
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      NH1(1) = IXEN + 1
      NH2 = NX - IXEN + NCTRX - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,.FALSE.,LX,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDX,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Y-BLOCK-DIAGONALS
C
      NH1(2) = NCTRY
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,.FALSE.,LY,
     &            IFILE,RL,RN,UR,NH1,0,NBDY,IERR)
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      NH1(2) = IYEN + 1
      NH2 = NY - IYEN + NCTRY - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,.FALSE.,LY,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDY,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Z-BLOCK-DIAGONALS
C
      NH1(3) = NCTRZ
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.FALSE.,.TRUE.,.FALSE.,LZ,
     &            IFILE,RL,RN,UR,NH1,0,NBDZ,IERR)
      IF(IERR.NE.0) RETURN
C
C***  Z-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LZ) THEN
      NH1(3) = IZEN + 1
      NH2 = NZ - IZEN + NCTRZ - 1
      CALL FDS436(ABX,ABXX,ABY,ABYY,ABZ,ABZZ,HX,HXX,HY,HYY,
     &            HZ,HZZ,NX,NY,NZ,MNX,MNY,MNZ,MLF,MV,
     &            .FALSE.,.FALSE.,.TRUE.,.FALSE.,LZ,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDZ,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSC12----------------------------------------------------
      E    N    D
C:::15    ,,,,,FDSC13.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC13 (M,NX,NY,NZ,NK,MV,IFILE3,RL,UR3,T,X,Y,Z,
     &           PA,PE,PU,PX,PY,PZ,U1,U2,LSTART,LX,LY,LZ,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 1 3    COMPUTES AND SORTS THE INITIAL VALUES FOR   ***
C**      THE NEWTON-ITERATION OF A 3-DIMENSIONAL ELLIPTIC PROBLEM.  ***
C**      THE USER CAN GIVE AN INITIAL SOLUTION IN U1 AND WITH       ***
C**      LSTART=T. FINALLY THE INITIAL VALUES ARE WRITTEN ON FILE3  ***
C**      IN PARTS OF MV VALUES. ONLY NONPERIODIC DIRECTIONS ARE     ***
C**      TAKEN FOR THE INTERPOLATION.                               ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  M, NX, NY, NZ, NK, MV, IFILE3, RL, UR3, IERR
      DOUBLE PRECISION  T, X(NX), Y(NY), Z(NZ), PA(MV,NK), PE(MV,NK),
     &       PU(MV,NK), PX(MV), PY(MV), PZ(MV), U1(M), U2(M)
      LOGICAL LSTART,LX,LY,LZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  = NX * NY * NZ * NK
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE3 I  I   I IN  I  UNIT-NUMBER OF FILE3
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH IN INTEGER WORDS
C--------I------I-----I------------------------------------------------
C UR3    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C LSTART I  L   I IN  I  IF LSTART=TRUE THE USER HAS GIVEN AN INITIAL
C        I      I     I  SOLUTION
C--------I------I-----I------------------------------------------------
C T,X,Y, I  DP  I IN  I  COORDINATES FOR THE INITIAL SOLUTION.
C Z      I      I     I  ARRAYS: X(NX),Y(NY),Z(NZ)
C--------I------I-----I------------------------------------------------
C PA,PE, I  DP  I  -  I  WORKAREAS FOR THE DEFECT ON 2 BOUNDARIES
C PU     I      I     I  ARRAYS: PA/E/U(MV,NK)
C--------I------I-----I------------------------------------------------
C PX,PY, I  DP  I  -  I  WORKAREAS FOR THE COORDINATES ON 1 BOUNDARY
C PZ     I      I     I  ARRAYS: PX/Y/Z(MV)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  WORKAREAS FOR THE INITIAL SOLUTION
C        I      I IN  I  IF ISTART=1 THE USER CAN GIVE AN
C        I      I     I  INITIAL SOLUTION IN U1(NX,NY,NZ,NK)
C        I      I     I  ARRAYS: U1/2(M)
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C LZ     I      I     I
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-DEFECT.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, IA, IK, I1, I2, I3, K, NV, RN, IRAND, IZ, MVL
      DOUBLE PRECISION FAK,ZERO,ONE
      EXTERNAL FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0,ONE=1.0,MVL=65535 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      IF(LSTART) GO TO 170
C
C***  INITIALIZATIONS
C
      K=0
  80  IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 90 I=1,NV
        U1(I+IA)=ZERO
        U2(I+IA)=ZERO
  90  CONTINUE
      IF(K.LT.M) GO TO 80
      DO 100 IK=1,NK
      DO 100 I=1,MV
        PU(I,IK)=ZERO
 100  CONTINUE
      IZ=3
      IF(LX) IZ=IZ-1
      IF(LY) IZ=IZ-1
      IF(LZ) IZ=IZ-1
      IF(IZ.EQ.0) GO TO 170
      FAK=ONE/IZ
      IF(LX) GO TO 125
C
C***  BOUNDARY X=XAN
C
      IRAND=1
      I=0
      DO 110 I3=1,NZ
      DO 110 I2=1,NY
        I=I+1
        PX(I)=X(1)
        PY(I)=Y(I2)
        PZ(I)=Z(I3)
 110  CONTINUE
C
C***  COMPUTE THE DEFECT FOR X=XAN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PA,
     &            MV,MV,NK,NY*NZ)
C
C***  BOUNDARY X=XEN
C
      IRAND=2
      DO 120 I=1,NY*NZ
        PX(I)=X(NX)
 120  CONTINUE
C
C***  COMPUTE THE DEFECT FOR X=XEN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PE,
     &            MV,MV,NK,NY*NZ)
C
C***  COMPUTE THE INTERPOLATION IN X-DIRECTION
C
      CALL FDS420(NY*NZ,NX,NK,MV,FAK,PA,PE,X,U1)
C
C***  SORTING OF U1(NY,NZ,NX,NK) IN U2(NZ,NX,NY,NK)
C
      CALL FDS421(NY,NZ*NX,NK,U1,U2)
 125  IF(LY) GO TO 145
C
C***  BOUNDARY Y=YAN
C
      IRAND=3
      I=0
      DO 130 I1=1,NX
      DO 130 I3=1,NZ
        I=I+1
        PX(I)=X(I1)
        PY(I)=Y(1)
        PZ(I)=Z(I3)
 130  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Y=YAN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PA,
     &            MV,MV,NK,NZ*NX)
C
C***  BOUNDARY Y=YEN
C
      IRAND=4
      DO 140 I=1,NZ*NX
        PY(I)=Y(NY)
 140  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Y=YEN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PE,
     &            MV,MV,NK,NZ*NX)
C
C***  COMPUTE AND ADD THE INTERPOLATION IN Y-DIRECTION
C
      CALL FDS420(NZ*NX,NY,NK,MV,FAK,PA,PE,Y,U2)
C
C***  SORTING OF U2(NZ,NX,NY,NK) IN U1(NX,NY,NZ,NK)
C
 145  CALL FDS421(NZ,NX*NY,NK,U2,U1)
      IF(LZ) GO TO 170
C
C***  BOUNDARY Z=ZAN
C
      IRAND=5
      I=0
      DO 150 I2=1,NY
      DO 150 I1=1,NX
        I=I+1
        PX(I)=X(I1)
        PY(I)=Y(I2)
        PZ(I)=Z(1)
 150  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Z=ZAN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PA,
     &            MV,MV,NK,NX*NY)
C
C***  BOUNDARY Z=ZEN
C
      IRAND=6
      DO 160 I=1,NX*NY
        PZ(I)=Z(NZ)
 160  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Z=ZEN
C
      CALL FDSU02(IRAND,T,PX,PY,PZ,PU,PU,PU,PU,PU,PU,PU,PU,PE,
     &            MV,MV,NK,NX*NY)
C
C***  COMPUTE AND ADD THE INTERPOLATION IN Z-DIRECTION
C
      CALL FDS420(NX*NY,NZ,NK,MV,FAK,PA,PE,Z,U1)
C
C***  THE INITIAL SOLUTION IS COMPLETE
C
 170  RN=1
C
C***  WRITING OF THE INITIAL SOLUTION U1 IN PARTS OF MV VALUES ON FILE3
C
      CALL FDS332(U1,NX*NY*NZ,NK,MV,IFILE3,RN,RL,UR3,FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSC13----------------------------------------------------
      E    N    D
C:::16    ,,,,,FDSC14.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSC14(N,NX,NY,NZ,NK,MNX,MNY,MNZ,MLF,MV,M222,
     &           IN,NA,NFA,NFL,FDFORM,U1,U2,U222,IFILE2,IFILE3,
     &           IFILE4,IFILE5,UR2,UR3,UR4,UR5,RL,RL4,LERR,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 1 4    COMPUTES THE FIRST AND SECOND DERIVATIVES   ***
C**      IN THE X-,Y-AND Z-DERECTION.                               ***
C**      FROM FILE 2 THE DIFFERENCE FORMULAE ARE READ.              ***
C**      FROM FILE 3 THE SOLUTION IN THE SUITING SORTING IS READ.   ***
C**      ON FILE 4 THE DERIVATIVES ON THE BOUNDARY-PLANES ARE       ***
C**      WRITTEN.                                                   ***
C**      ON FILE 5 THE DERIVATIVES FOR THE WHOLE GRID ARE WRITTEN.  ***
C**      FOR RECORD NUMBERS SEE FILE-CATALOG.                       ***
C**      IN ARRAY U222(M222,NK) THE DUMMY-VALUES OF THE DERIVATIVES ***
C**      AT GRIDPOINT (2,2,2) ARE WRITTEN.                          ***
C**      FDSC14 CAN ALSO BE USED TO COMPUTE THE ERRORS OF THE       ***
C**      DERIVATIVES. THEN FILE 4 IS NOT USED AND FILE 5 MUST HAVE  ***
C**      ANOTHER UNIT-NUMBER AS FOR COMPUTING THE DERIVATIVES.      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
C
      INTEGER  N,NX,NY,NZ,NK,MNX,MNY,MNZ,MLF,MV,M222,IN,NA(MV),
     &         NFA(MV),NFL(MV),IFILE2,IFILE3,IFILE4,IFILE5,UR2,
     &         UR3,UR4,UR5,RL,IERR,RL4
C
      LOGICAL  LERR
C
      DOUBLE PRECISION  FDFORM(MV),U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY * NZ
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-,Z-
C NZ     I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MNZ,MLFI      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  ARRAY BOUND FOR U222
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = ( NX * NY * NZ ) / MV ROUNDED UPON
C        I      I     I  THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C NA,NFA,I  I   I  -  I  INFORMATION ARRAYS FOR THE DIFFERENCE FORMULAE
C NFL    I      I     I  ARRAYS : NA(MV),NFA(MV),NFL(MV)
C--------I------I-----I------------------------------------------------
C FDFORM I  DP  I     I  ARRAY FOR THE DIFFERENCE FORMULAE
C        I      I     I  ARRAY : FDFORM(MV),
C        I      I     I  CAUTION : MV >= MAX(MNX,MNY,MNZ) * MLF
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  2 VECTORS OF LENGTH N * NK
C        I      I     I  ARRAYS : U1(N,NK) , U2(N,NK)
C--------I------I-----I------------------------------------------------
C U222   I  DP  I OUT I  DUMMY-VALUES AT GRIDPOINT (2,2,2)
C        I      I     I  ARRAY : U222(M222,NK)
C--------I------I-----I------------------------------------------------
C IFILE2,I  I   I IN  I  UNITNUMBERS
C 3,4,5  I      I     I
C--------I------I-----I------------------------------------------------
C UR2,3, I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR
C   4,5  I      I     I  PARALLEL I/O
C--------I------I-----I------------------------------------------------
C RL,RL4 I  I   I IN  I  RECORD LENGTH ( RL4 FOR FILE 4 )
C--------I------I-----I------------------------------------------------
C LERR   I  L   I IN  I  IF LERR = TRUE  THE ERRORS OF THE
C        I      I     I  DERIVATIVES HAVE TO BE COMPUTED.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER ABL,I,IK,I222,IOS,PFE,RN2,RN3,RN4,RN5
C
      EXTERNAL FDS317,FDS318
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  COMPUTATION OF THE X-DERIVATIVES
C
      I222=1
      RN2=1
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NA ,NX,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFA,NX,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFL,NX,IERR,UR2)
      IF(LERR)  RN2 = RN2 + 2
      ABL=1
      RN4=6*NK+1
      RN5=1
    5 RN3=NK*IN+1
C
C***  READ SOLUTION IN Y-Z-X-SORTING
C
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***  READ DIFFERENCE FORMULAE
C
      CALL FDS317(IFILE2,IOS,RN2,RL,PFE,FDFORM,MNX*MLF,IERR,UR2)
C
C***   COMPUTE THE DERIVATIVES FOR THE WHOLE GRID
C
      CALL FDS025(NY*NZ,NX,NK,MNX,MLF,NA,NFA,NFL,FDFORM,U1,U2)
      IF(LERR)  GOTO 25
      I222=I222+1
      I=NY*NZ+NY+2
      DO 8 IK=1,NK
    8 U222(I222,IK)=U2(I,IK)
C
C***   BOUNDARY-PLANES X = X(1) , X = X(NX)
C
      DO 10 IK=1,NK
   10 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY*NZ,IERR,UR4)
      I=(NX-1)*NY*NZ+1
      DO 20 IK=1,NK
   20 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NY*NZ,IERR,UR4)
   25 CALL FDS421(NY,NZ*NX,NK,U2,U1)
      IF(LERR)  GO TO 45
C
C***   BOUNDARY-PLANES Y = Y(1) , Y = Y(NY)
C
      DO 30 IK=1,NK
   30 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NZ*NX,IERR,UR4)
      I=(NY-1)*NZ*NX+1
      DO 40 IK=1,NK
   40 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(I,IK),NZ*NX,IERR,UR4)
   45 CALL FDS421(NZ,NX*NY,NK,U1,U2)
      IF(LERR)  GO TO 65
C
C***   BOUNDARY-PLANES Z = Z(1) , Z = Z(NZ)
C
      DO 50 IK=1,NK
   50 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NX*NY,IERR,UR4)
      I=(NZ-1)*NX*NY+1
      DO 60 IK=1,NK
   60 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NX*NY,IERR,UR4)
C
C***   WRITE THE DERIVATIVES FOR THE WHOLE GRID IN X-Y-Z-SORTING
C
   65 CALL FDS332(U2,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(ABL.EQ.1) THEN
         ABL=2
         GO TO 5
      ENDIF
C
C***  COMPUTATION OF THE Y-DERIVATIVES
C
      RN2=8
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NA ,NY,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFA,NY,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFL,NY,IERR,UR2)
      IF(LERR)  RN2 = RN2 + 2
      ABL=1
      RN4=3*6*NK+2*NK+1
  105 RN3=2*NK*IN+1
C
C***   READ SOLUTION IN Z-X-Y-SORTING
C
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***   READ DIFFERENCE FORMULAE
C
      CALL FDS317(IFILE2,IOS,RN2,RL,PFE,FDFORM,MNY*MLF,IERR,UR2)
C
C***   COMPUTE THE DERIVATIVES FOR THE WHOLE GRID
C
      CALL FDS025(NZ*NX,NY,NK,MNY,MLF,NA,NFA,NFL,FDFORM,U1,U2)
      IF(LERR)  GO TO 125
      I222=I222+1
      I=NZ*NX+NZ+2
      DO 108 IK=1,NK
  108 U222(I222,IK)=U2(I,IK)
C
C***   BOUNDARY-PLANES Y = Y(1) , Y = Y(NY)
C
      DO 110 IK=1,NK
  110 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NZ*NX,IERR,UR4)
      I=(NY-1)*NZ*NX+1
      DO 120 IK=1,NK
  120 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NZ*NX,IERR,UR4)
  125 CALL FDS421(NZ,NX*NY,NK,U2,U1)
      IF(LERR)  GO TO 145
C
C***   BOUNDARY-PLANES Z = Z(1) , Z = Z(NZ)
C
      DO 130 IK=1,NK
  130 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX*NY,IERR,UR4)
      I=(NZ-1)*NX*NY+1
      DO 140 IK=1,NK
  140 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(I,IK),NX*NY,IERR,UR4)
C
C***   WRITE THE DERIVATIVES FOR THE WHOLE GRID IN X-Y-Z-SORTING
C
  145 CALL FDS332(U1,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(LERR)  GO TO 165
      CALL FDS421(NX,NY*NZ,NK,U1,U2)
      RN4=RN4-6*NK
C
C***   BOUNDARY-PLANES X = X(1) , X = X(NX)
C
      DO 150 IK=1,NK
  150 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY*NZ,IERR,UR4)
      I=(NX-1)*NY*NZ+1
      DO 160 IK=1,NK
  160 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NY*NZ,IERR,UR4)
  165 IF(ABL.EQ.1) THEN
         ABL=2
         RN4=4*6*NK+2*NK+1
         GO TO 105
      ENDIF
C
C***  COMPUTATION OF THE Z-DERIVATIVES
C
      RN2=15
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NA ,NZ,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFA,NZ,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFL,NZ,IERR,UR2)
      IF(LERR)  RN2 = RN2 + 2
      ABL=1
      RN4=5*6*NK+4*NK+1
  205 RN3=1
C
C***   READ SOLUTION IN X-Y-Z-SORTING
C
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***   READ DIFFERENCE FORMULAE
C
      CALL FDS317(IFILE2,IOS,RN2,RL,PFE,FDFORM,MNZ*MLF,IERR,UR2)
C
C***   COMPUTE THE DERIVATIVES FOR THE WHOLE GRID
C
      CALL FDS025(NX*NY,NZ,NK,MNZ,MLF,NA,NFA,NFL,FDFORM,U1,U2)
      IF(LERR)  GO TO 225
      I222=I222+1
      I=NX*NY+NX+2
      DO 208 IK=1,NK
  208 U222(I222,IK)=U2(I,IK)
C
C***   BOUNDARY-PLANES Z =Z(1) , Z = Z(NZ)
C
      DO 210 IK=1,NK
  210 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NX*NY,IERR,UR4)
      I=(NZ-1)*NX*NY+1
      DO 220 IK=1,NK
  220 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NX*NY,IERR,UR4)
C
C***   WRITE THE DERIVATIVES FOR THE WHOLE GRID IN X-Y-Z-SORTING
C
  225 CALL FDS332(U2,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(LERR)  GO TO 265
      CALL FDS421(NX,NY*NZ,NK,U2,U1)
      RN4=RN4-6*NK
C
C***   BOUNDARY-PLANES X =X(1) , X = X(NX)
C
      DO 230 IK=1,NK
  230 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NY*NZ,IERR,UR4)
      I=(NX-1)*NY*NZ+1
      DO 240 IK=1,NK
  240 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(I,IK),NY*NZ,IERR,UR4)
      CALL FDS421(NY,NZ*NX,NK,U1,U2)
C
C***   BOUNDARY-PLANES Y =Y(1) , Y = Y(NY)
C
      DO 250 IK=1,NK
  250 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NZ*NX,IERR,UR4)
      I=(NY-1)*NZ*NX+1
      DO 260 IK=1,NK
  260 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NZ*NX,IERR,UR4)
  265 IF(ABL.EQ.1) THEN
         ABL=2
         RN4=6*6*NK+4*NK+1
         GO TO 205
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSC14----------------------------------------------------
      E    N    D
C:::17    ,,,,,FDSC30.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC30 (EPSDEF,DFX,TOLEQ,IINFO,DINFO,LINFO,
     &           IFILE,UR,U1,U2,IWORK,MIW,DWORK,MDW,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 3 0   STOPPING CRITERION FOR THE NEWTON-ITERATION. ***
C**      IN FDSC30 THE DISCRETIZATION-ERRORS ON THE LEVEL OF        ***
C**      EQUATION ARE COMPUTED AND STORED ON FILE FOR THE LATER     ***
C**      COMPUTATION OF THE ERROR OF THE SOLUTION. THE STOPPING     ***
C**      CRITERION IS COMPUTED OF THE MAXIMUM OF THE                ***
C**      DISCRETIZATION-ERROR AND THE TOLERANCE ON THE LEVEL OF     ***
C**      EQUATION.                                                  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IWORK(1),MIW,MDW,IERR
      DOUBLE PRECISION  EPSDEF,DFX(1),TOLEQ,DINFO(1),U1(1),U2(1),
     &                  DWORK(1)
      LOGICAL  LINFO(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPSDEF I  DP  I OUT I  STOPPING CRITERION FOR THE NEWTON-ITERATION
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I I/O I  MAXIMUM OF THE DISCRETISATION-ERROR ON THE
C        I      I     I  LEVEL OF EQUATION.         ARRAY : DFX(NK)
C--------I------I-----I------------------------------------------------
C TOLEQ  I  DP  I IN  I  TOLERANCE ON THE LEVEL OF EQUATION
C        I      I     I  CONTROL OF THE ORDERS, IF TOLEQ LESS THAN ZERO
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR        ARRAY : IINFO(14)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I  -  I  NOT USED
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR        ARRAY : LINFO(5)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS              ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES.     ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR COMPLETE SOLUTION
C        I      I     I  ARRAYS : U1(M) , U2(M)
C--------I------I-----I------------------------------------------------
C IWORK  I  I   I  -  I  INTEGER WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IWORK ( MIW >= 3 * MV )
C--------I------I-----I------------------------------------------------
C DWORK  I  DP  I  -  I  REAL WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DWORK  (MDW >= (12 + 4 * NK) * MV)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  NK,NX,NY,NZ,MNX,MNY,MNZ,MLF,N,MV,RL,IN,M222,
     &         II1,II2,II3,II4,II5,II6,II7,II8,II9,II10,
     &         II11,II12,II13,II14,II15,II16
      DOUBLE PRECISION  TEN, ZERO, FDS101, DFMAX
      LOGICAL  LORD
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( TEN = 10.0 , ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NK   = IINFO(1)
C
      IF(LINFO(5))  GO TO 100
C
      NX   = IINFO(2)
      NY   = IINFO(3)
      NZ   = IINFO(4)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      MNZ  = IINFO(7)
      MLF  = IINFO(8)
      N    = IINFO(9)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
C
      IF(MIW.LT.3*MV.OR.MDW.LT.(12+4*NK)*MV) THEN
         IERR = 30
         RETURN
      ENDIF
C
      II1 = 1 + M222 * NK
      II2 = 1 + MV
      II3 = II2 + MV
C
C***  COMPUTATION OF THE DISCRETIZATION-ERRORS
C
      CALL FDSC14(N,NX,NY,NZ,NK,MNX,MNY,MNZ,MLF,MV,M222,IN,
     &            IWORK(1),IWORK(II2),IWORK(II3),DWORK(II1),
     &            U1,U2,DWORK(1),IFILE(2),IFILE(3),IFILE(6),
     &            IFILE(6),UR(2),UR(3),UR(6),UR(6),RL,RL,.TRUE.,
     &            IERR)
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
      II13 = II12 + MV
      II14 = II13 + MV * NK
      II15 = II14 + MV * NK
      II16 = II15 + MV * NK
C
C***  COMPUTATION OF THE X-Y-Z-DISCRETIZATION-ERROR ON THE
C     LEVEL OF EQUATION, THE SUM AND THE MAXIMUM
C
      LORD= TOLEQ.LT.ZERO
      CALL FDSC31(N,NK,MV,M222,IN,IFILE(6),IFILE(7),IFILE(5),
     &            0,0,0,RL,UR(6),UR(7),UR(5),DWORK(II1),
     &            DWORK(II2),DWORK(II3),DWORK(II4),DWORK(II5),
     &            DWORK(II6),DWORK(II7),DWORK(II8),DWORK(II9),
     &            DWORK(II10),DWORK(II11),DWORK(II12),DWORK(II13),
     &            DWORK(II14),DWORK(II15),DWORK(II16),DFX,LORD,IERR)
C
C***  COMPUTE THE STOPPING CRITERION FOR THE NEWTON-ITERATION
C
  100 DFMAX  = FDS101(NK,DFX,ZERO)
      EPSDEF = MAX(TOLEQ,DFMAX) / TEN
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSC30----------------------------------------------------
      E    N    D
C:::18    ,,,,,FDSC31.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC31 (N,NK,MV,M222,IN,IFILE1,IFILE2,IFILE3,
     &           RA1,RA2,RA3,RL,UR1,UR2,UR3,DUX,DUXX,DUY,DUYY,
     &           DUZ,DUZZ,PUX,PUXX,PUY,PUYY,PUZ,PUZZ,DX,DY,DZ,
     &           DF,DFX,LORD,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 3 1    READS THE DISCRETIZATION-ERRORS FOR THE     ***
C**      X,XX,...,ZZ-DERIVATIVES, WHICH WERE COMPUTED IN FDSC13,    ***
C**      FROM FILE1 AND THE JACOBI-MATRICES FROM FILE 2. THEN THE   ***
C**      X-,Y-,Z-DISCRETIZATION-ERRORS ON THE LEVEL OF EQUATION,    ***
C**      THE SUM PER EQUATION AND THE MAXIMUM OVER ALL GRIDPOINTS   ***
C**      AND SOLUTION COMPONENTS ARE COMPUTED AND STORED ON FILE 3. ***
C**      FOR THE CONTROL OF THE ORDERS (LORD=TRUE ) ONLY THE SEPA-  ***
C**      RATED ERRORS ARE COMPUTED.                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NK,MV,M222,IN,IFILE1,IFILE2,IFILE3,RA1,RA2,RA3,
     &         RL,UR1,UR2,UR3,IERR
      DOUBLE PRECISION  DUX(MV),DUXX(MV),DUY(MV),DUYY(MV),DUZ(MV),
     &       DUZZ(MV),PUX(MV),PUXX(MV),PUY(MV),PUYY(MV),PUZ(MV),
     &       PUZZ(MV),DX(MV,NK),DY(MV,NK),DZ(MV,NK),DF(MV,NK),DFX(NK)
      LOGICAL  LORD
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY * NZ
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT NUMBERS
C  2,3   I      I     I
C--------I------I-----I------------------------------------------------
C RA1,   I  I   I IN  I  RA1 + 1  IS THE STARTING RECORD NUMBER ON
C 2,3    I      I     I  IFILE 1
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C UR1,   I  I   I I/O I  SYNCHRONISATION-VARIABLES
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C DUX,XX I  DP  I  -  I  WORKARRAYS FOR THE DISCRETISATION-ERRORS
C DUY,YY I      I     I  ARRAYS : DU...(MV)
C DUZ,ZZ I      I     I
C--------I------I-----I------------------------------------------------
C PUX,XX I  DP  I  -  I  WORKARRAYS FOR THE JACOBI-MATRICES
C PUY,YY I      I     I  ARRAYS : PU...(MV)
C PUZ,ZZ I      I     I
C--------I------I-----I------------------------------------------------
C DX,DY  I  DP  I  -  I  WORKARRAYS FOR THE RESULTING DISCRETIZATION-
C DZ,DF  I      I     I  ERROR ON THE LEVEL OF EQUATION.
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I OUT I  MAXIMUM OF THE DISCRETIZATION-ERROR ON THE
C        I      I     I  LEVEL OF EQUATION.         ARRAY : DFX(NK)
C--------I------I-----I------------------------------------------------
C LORD   I  I   I IN  I  CONTROL OF THE ORDERS, IF LORD=TRUE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  I,IGL,IKO,IOS,J,NV,PFE,RN1,RN2,RN3,RNX,RNY,RNZ
      DOUBLE PRECISION  ZERO, FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IKO=NK
      IF(LORD) IKO=3
*VOCL LOOP,SCALAR
      DO 10 IGL=1,IKO
         DFX(IGL) = ZERO
   10 CONTINUE
      NV  = MV
      RN3 = RA3 + 1
      RNX = RN3 + IN * NK
      RNY = RNX + IN * NK
      RNZ = RNY + IN * NK
      DO 400 J = 1,IN
      DO 100 IGL = 1,NK
      DO 100 I = 1,MV
        DX(I,IGL) = ZERO
        DY(I,IGL) = ZERO
        DZ(I,IGL) = ZERO
        DF(I,IGL) = ZERO
  100 CONTINUE
      IF(J.EQ.IN) NV = N - (IN-1) * MV
      DO 200 IKO = 1,NK
        RN1 = (IKO - 1) * IN + J + RA1
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUX ,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUXX,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUY ,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUYY,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUZ ,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUZZ,NV,IERR,UR1)
        DO 190 IGL = 1,NK
          RN2 = M222*((J-1)*NK*NK+(IGL-1)*NK+IKO-1)+2+RA2
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUX ,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUXX,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUY ,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUYY,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUZ ,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUZZ,NV,IERR,UR2)
          DO 180 I = 1,NV
            DX(I,IGL) = DX(I,IGL)-PUX(I)*DUX(I)-PUXX(I)*DUXX(I)
            DY(I,IGL) = DY(I,IGL)-PUY(I)*DUY(I)-PUYY(I)*DUYY(I)
            DZ(I,IGL) = DZ(I,IGL)-PUZ(I)*DUZ(I)-PUZZ(I)*DUZZ(I)
180       CONTINUE
190     CONTINUE
200   CONTINUE
      DO 300 IGL = 1,NK
        IF(.NOT.LORD) THEN
        DO 250 I = 1,NV
          DF(I,IGL) = DX(I,IGL)+DY(I,IGL)+DZ(I,IGL)
250     CONTINUE
        ENDIF
        IF(.NOT.LORD)
     &  CALL FDS318(IFILE3,IOS,RN3,RL,PFE,DF(1,IGL),NV,IERR,UR3)
        CALL FDS318(IFILE3,IOS,RNX,RL,PFE,DX(1,IGL),NV,IERR,UR3)
        CALL FDS318(IFILE3,IOS,RNY,RL,PFE,DY(1,IGL),NV,IERR,UR3)
        CALL FDS318(IFILE3,IOS,RNZ,RL,PFE,DZ(1,IGL),NV,IERR,UR3)
        IF(LORD) THEN
           DFX(1) = MAX(DFX(1),FDS101(NV,DX(1,IGL),ZERO))
           DFX(2) = MAX(DFX(2),FDS101(NV,DY(1,IGL),ZERO))
           DFX(3) = MAX(DFX(3),FDS101(NV,DZ(1,IGL),ZERO))
        ELSE
           DFX(IGL) = MAX(DFX(IGL),FDS101(NV,DF(1,IGL),ZERO))
        ENDIF
300   CONTINUE
400   CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSC31----------------------------------------------------
      E    N    D
C:::19    ,,,,,FDSC51.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC51 (IINFO,DINFO,LINFO,IBC,ILIN,LLIN,IFILE,UR,U1,
     &           N,NK,U2,IW,MIW,DW,MDW,EPS,TOL,IERR,FDS500)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 5 1   CONTROL OF THE ORDERS IN BV-DIRECTION        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),IBC(1),ILIN(1),IFILE(1),UR(1),N,NK,IW(1),
     &          MIW,MDW,IERR
      DOUBLE PRECISION      DINFO(1),U1(N,NK),U2(1),DW(1),EPS,TOL
      LOGICAL   LINFO(1) , LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR         ARRAY : IINFO(36)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR   ARRAY: DINFO(MNX+MNY+MNZ)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR         ARRAY : LINFO(4)
C--------I------I-----I------------------------------------------------
C IBC    I  I   I IN  I  INFORMATION-VECTOR FOR THE DIFFERENCE FORMULAE
C        I      I     I                             ARRAY : IBC(6)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*M-1)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS FOR I/O       ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES     ARRAY : UR(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY OF LENGTH N*NK
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U2     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  DESIRED RELATIVE ACCURACY FOR THE SOLUTION
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDS500 I  E   I IN  I  NAME OF THE LINSOL-MAIN-PROGRAM
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   IA,IK,IFD,IOS,IOPT,IMVM,IND,IN,IDOKU,J,M,MV,MNX,MNY,
     &          MNZ,MNEW,MOLD,MOX,MOY,MOZ,MLF,NV,NX,NY,NZ,NOX,NOY,NOZ,
     &          NCTRX,NCTRY,NCTRZ,NDNEW,NXNEW,NYNEW,NZNEW,NXOLD,NYOLD,
     &          NZOLD,NOXOLD,NOYOLD,NOZOLD,PFE,RL,RN,RN2,RN3,RND,LOUT
      DOUBLE PRECISION      
     & ANEW,AOLD,DXNEW,DYNEW,DZNEW,DXOLD,DYOLD,DZOLD,EPSDEF,
     &          EPSLIN,ONE,P1,P3,QX,QY,QZ,QNEW,RC1,RC2,RC3,RC4,RC5,
     &          THREE,TOLEQ,ZERO,FDS101,DFX(3)
      LOGICAL   LX,LY,LZ,LXOPT,LYOPT,LZOPT,LMVM
      CHARACTER *1  CTEXT
      EXTERNAL  FDS317,FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO=0.0 , ONE=1.0 , THREE=3.0 , P1=0.1 , P3=0.3 ,
     &            RC1=0.9 , RC2=1.5 , RC3=2.0 , RC4=0.9 , RC5=0.8)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  READ THE INFORMATION-VECTORS
C
      LMVM = LINFO(8)
      NX    = IINFO(2)
      NY    = IINFO(3)
      NZ    = IINFO(4)
      MNX   = IINFO(5)
      MNY   = IINFO(6)
      MNZ   = IINFO(7)
      MLF   = IINFO(8)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      IDOKU = IINFO(25)
      LOUT  = IINFO(26)
      MOX   = IINFO(31)
      MOY   = IINFO(32)
      MOZ   = IINFO(33)
      NOXOLD= IINFO(34)
      NOYOLD= IINFO(35)
      NOZOLD= IINFO(36)
C
      LX    = LINFO(2)
      LY    = LINFO(3)
      LZ    = LINFO(4)
C
      IFD   = 5
C
C***  COMPUTE THE QD-NORM SEPARATELY FOR THE THREE BV-DIRECTIONS
C
C***  READ THE X-DISCRETIZATION-ERROR ON THE LEVELS OF EQUATION
C     AND SOLUTION
C
      NV = MV
      RND = IN * NK + 1
      DO 120  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 110  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RND,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  110    CONTINUE
  120 CONTINUE
      RN3 = 4 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IERR)
      QX = FDS101(M,U2,ZERO) / FDS101(M,U1,EPS)
C
C***  READ THE Y-DISCRETIZATION-ERROR ON THE LEVELS OF EQUATION
C     AND SOLUTION
C
      NV = MV
      DO 140  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 130  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RND,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  130    CONTINUE
  140 CONTINUE
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IERR)
      QY = FDS101(M,U2,ZERO) / FDS101(M,U1,EPS)
C
C***  READ THE Z-DISCRETIZATION-ERROR ON THE LEVELS OF EQUATION
C     AND SOLUTION
C
      NV = MV
      DO 160  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 150  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RND,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  150    CONTINUE
  160 CONTINUE
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IERR)
      QZ = FDS101(M,U2,ZERO) / FDS101(M,U1,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1000)
C
C***  START OF THE OPTIMIZATION-LOOP FOR THE ORDERS IN BV-DIRECTION
C
      NOX   = 2
      NOY   = 2
      NOZ   = 2
      IOPT  = 0
      LXOPT = .FALSE.
      LYOPT = .FALSE.
      LZOPT = .FALSE.
  200 IOPT  = IOPT + 1
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE ACTUAL COMBINATION OF
C     THE ORDERS NOX, NOY, NOZ
C
      RN2 = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN2,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN2,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(5),LZ,MNZ,NOZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN2,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  COMPUTATION OF THE DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      TOLEQ = -ONE
      CALL FDSC30(EPSDEF,DFX,TOLEQ,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,
     &            IW,MIW,DW,MDW,IERR)
      IF(IERR.NE.0) GO TO 700
      IF(LXOPT.AND.LYOPT.AND.LZOPT) GO TO 400
C
      DXNEW = DFX(1) * QX
      DYNEW = DFX(2) * QY
      DZNEW = DFX(3) * QZ
C
      NXNEW = NX * (DXNEW/(P3*TOL))**(ONE/NOX)
      NXNEW = MAX(NXNEW,NOX+4)
      NYNEW = NY * (DYNEW/(P3*TOL))**(ONE/NOY)
      NYNEW = MAX(NYNEW,NOY+4)
      NZNEW = NZ * (DZNEW/(P3*TOL))**(ONE/NOZ)
      NZNEW = MAX(NZNEW,NOZ+4)
C
      IF(IOPT.EQ.1) GO TO 300
C
C***  STEPSIZE / ERROR-CONDITIONS :
C
      IF(LXOPT) GO TO 220
      IF(NXNEW.GE.NXOLD) GO TO 210
      IF(NXNEW.GT.RC1*NXOLD.AND.DXNEW.GT.RC2*DXOLD) GO TO 210
      IF(DXNEW.GT.RC3*DXOLD) GO TO 210
      GO TO 220
  210 CTEXT = 'X'
      IF(IDOKU.GE.3) WRITE(LOUT,1200) CTEXT,NOX,DXNEW,NXNEW
      NOX = NOX - 2
      NXNEW = NXOLD
      DXNEW = DXOLD
      LXOPT = .TRUE.
C
  220 IF(LYOPT) GO TO 240
      IF(NYNEW.GE.NYOLD) GO TO 230
      IF(NYNEW.GT.RC1*NYOLD.AND.DYNEW.GT.RC2*DYOLD) GO TO 230
      IF(DYNEW.GT.RC3*DYOLD) GO TO 230
      GO TO 240
  230 CTEXT = 'Y'
      IF(IDOKU.GE.3) WRITE(LOUT,1200) CTEXT,NOY,DYNEW,NYNEW
      NOY = NOY - 2
      NYNEW = NYOLD
      DYNEW = DYOLD
      LYOPT = .TRUE.
C
  240 IF(LZOPT) GO TO 300
      IF(NZNEW.GE.NZOLD) GO TO 250
      IF(NZNEW.GT.RC1*NZOLD.AND.DZNEW.GT.RC2*DZOLD) GO TO 250
      IF(DZNEW.GT.RC3*DZOLD) GO TO 250
      GO TO 300
  250 CTEXT = 'Z'
      IF(IDOKU.GE.3) WRITE(LOUT,1200) CTEXT,NOZ,DZNEW,NZNEW
      NOZ = NOZ - 2
      NZNEW = NZOLD
      DZNEW = DZOLD
      LZOPT = .TRUE.
C
C***  LINSOL-CONDITION :
C
  300 IF(LXOPT.AND.LYOPT.AND.LZOPT)  GO TO 200
      MNEW  = NK * NXNEW * NYNEW * NZNEW
      NDNEW = (2*NOX+2)*NK+(2*NOY+2*NOZ+5)*(2*NK-1)
      QNEW  = (NOX+NOY+NOZ) / THREE
      CALL FDS570(ILIN,MNEW,NK,NXNEW,NYNEW,NZNEW,NDNEW,QNEW,ANEW,IERR)
      IF(IERR.NE.0) GO TO 700
      IF(IDOKU.GE.2) WRITE(LOUT,1300) NOX,NOY,NOZ,DXNEW,DYNEW,DZNEW,
     &                                NXNEW,NYNEW,NZNEW,MNEW,ANEW
      IF(IOPT.EQ.1) GO TO 340
      IF(ANEW.GT.AOLD) GO TO 320
      IF(MNEW.GT.RC5*MOLD.AND.ANEW.GT.RC4*AOLD) GO TO 320
      GO TO 340
C
  320 IF(.NOT.LXOPT) NOX = NOX - 2
      IF(.NOT.LYOPT) NOY = NOY - 2
      IF(.NOT.LZOPT) NOZ = NOZ - 2
      LXOPT = .TRUE.
      LYOPT = .TRUE.
      LZOPT = .TRUE.
C
  340 IF(.NOT.LXOPT.AND.NOX+6.LE.MOX) THEN
         NOX = NOX + 2
      ELSE
         LXOPT = .TRUE.
      ENDIF
      IF(.NOT.LYOPT.AND.NOY+6.LE.MOY) THEN
         NOY = NOY + 2
      ELSE
         LYOPT = .TRUE.
      ENDIF
      IF(.NOT.LZOPT.AND.NOZ+6.LE.MOZ) THEN
         NOZ = NOZ + 2
      ELSE
         LZOPT = .TRUE.
      ENDIF
C
      NXOLD = NXNEW
      NYOLD = NYNEW
      NZOLD = NZNEW
      DXOLD = DXNEW
      DYOLD = DYNEW
      DZOLD = DZNEW
      MOLD = MNEW
      AOLD = ANEW
C
      GO TO 200
C
C***  COMPUTATION OF THE DISCRETIZATION-ERRORS ON THE LEVEL OF SOLUTION
C
  400 IF(IDOKU.GE.1) WRITE(LOUT,1400) NOX, NOY, NOZ
      EPSLIN   = P1
      ILIN(11) = 1
      IMVM     = ILIN(10)
C
C***  COMPUTATION OF THE X-ERROR
C
      IF(NOX.EQ.NOXOLD) GO TO 500
      NV = MV
      RN = IN * NK + 1
      DO 420 J=1,IN
         IF(J.EQ.IN) NV = N-(IN-1)*MV
         IA = 1+(J-1)*MV
         DO 410 IK=1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  410    CONTINUE
  420 CONTINUE
      CALL FDS411(N,NK,U1,U2)
      IF(IDOKU.GE.1) WRITE(LOUT,1040)
      CALL FDS500(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,UR,EPS,
     &            EPSLIN,IND,IERR)
      IMVM = IMVM + ILIN(10)
      GO TO(425,430,430,440) IND
  425 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 450
  430 IF (LMVM) THEN
         WRITE (LOUT,1032)
         WRITE (LOUT,1030)
         IERR = 611
         GO TO 700
      ELSE
         WRITE (LOUT,1032)
         WRITE (LOUT,1036)
         IND = 1
         GO TO 450
      ENDIF
  440 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR = 611
      GO TO 700
  450 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      RN3 = 4 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C***  COMPUTATION OF THE Y-ERROR
C
  500 IF(NOY.EQ.NOYOLD) GO TO 600
      NV = MV
      RN = 2 * IN * NK + 1
      DO 520 J=1,IN
         IF(J.EQ.IN) NV = N-(IN-1)*MV
         IA = 1+(J-1)*MV
         DO 510 IK=1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  510    CONTINUE
  520 CONTINUE
      CALL FDS411(N,NK,U1,U2)
      IF(IDOKU.GE.1) WRITE(LOUT,1050)
      CALL FDS500(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,UR,EPS,
     &            EPSLIN,IND,IERR)
      IMVM = IMVM + ILIN(10)
      GO TO(525,530,530,540) IND
  525 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 550
  530 IF (LMVM) THEN
         WRITE (LOUT,1032)
         WRITE (LOUT,1030)
         IERR = 612
         GO TO 700
      ELSE
         WRITE (LOUT,1032)
         WRITE (LOUT,1036)
         IND = 1
         GO TO 550
      ENDIF
  540 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR = 612
      GO TO 700
  550 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      RN3 = 5 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C***  COMPUTATION OF THE Z-ERROR
C
  600 IF(NOZ.EQ.NOZOLD) GO TO 660
      NV = MV
      RN = 3 * IN * NK + 1
      DO 620 J=1,IN
         IF(J.EQ.IN) NV = N-(IN-1)*MV
         IA = 1+(J-1)*MV
         DO 610 IK=1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  610    CONTINUE
  620 CONTINUE
      CALL FDS411(N,NK,U1,U2)
      IF(IDOKU.GE.1) WRITE(LOUT,1060)
      CALL FDS500(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,UR,EPS,
     &            EPSLIN,IND,IERR)
      IMVM = IMVM + ILIN(10)
      GO TO(625,630,630,640) IND
  625 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 650
  630 IF (LMVM) THEN
         WRITE (LOUT,1032)
         WRITE (LOUT,1030)
         IERR = 613
         GO TO 700
      ELSE
         WRITE (LOUT,1032)
         WRITE (LOUT,1036)
         IND = 1
         GO TO 650
      ENDIF
  640 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR = 613
      GO TO 700
  650 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      RN3 = 6 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C***  CONTROL OF THE ORDERS COMPLETE
C
  660 IINFO(34) = NOX
      IINFO(35) = NOY
      IINFO(36) = NOZ
  700 IF(IDOKU.GE.1.AND.IERR.EQ.0) WRITE(LOUT,1710)
      IF(IDOKU.GE.1.AND.IERR.NE.0) WRITE(LOUT,1720)
      ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' CONTROL OF THE ORDERS:'/1X,22('-')/)
 1030 FORMAT(' COMPUTATION OF THE DISCR. ERROR FAILED.')
 1031 FORMAT(' ERROR COMPUTED WITH',I6,
     &       ' MATRIX-VECTOR MULTIPLICATIONS.')
 1032 FORMAT(' LINSOL DID NOT CONVERGE WITH MVM MATRIX-',
     &       'VECTOR MULTIPLICATIONS.')
 1034 FORMAT(' ERROR IN LINSOL, IERR =',I6)
 1036 FORMAT(' COMPUTATION OF THE ERROR IS CONTINUED -'/
     &       ' BAD ESTIMATION OF THE ERROR IS POSSIBLE')
 1040 FORMAT(' COMPUTATION OF THE X-ERROR:')
 1050 FORMAT(' COMPUTATION OF THE Y-ERROR:')
 1060 FORMAT(' COMPUTATION OF THE Z-ERROR:')
 1200 FORMAT(' ',A1,'-ORDER REJECTED:',I5,10X,'ERROR: ',G15.2/33X,
     &       'GRID POINTS:',I10)
 1300 FORMAT(' ORDER COMBINATION:',3I4,'  ERRORS:     ',3G10.2/33X,
     &       'GRID POINTS:',3I10/33X,'UNKNOWNS:   ',I10/33X,
     &       'AMOUNT:     ',G10.2)
 1400 FORMAT(' OPTIMAL ORDER COMBINATION:',3I5)
 1710 FORMAT(' CONTROL OF THE ORDERS COMPLETE.'/)
 1720 FORMAT(' CONTROL OF THE ORDERS FAILED.'/)
C
C-----END OF FDSC51----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSC52.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC52(IINFO,DINFO,LINFO,IW,DW,DE,DS,NXN,NYN,NZN,
     *                  LEQ,LFAK,EPS,TOL,IFILE,UR,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 5 2   GENERATES A NONEQUIDISTANT GRIDPOINT DISTRI- ***
C**      BUTION, WHERE THE STEPSIZES ARE DETERMINED BY THE ERROR-   ***
C**      ENVELOPE AND THE TOLERANCE.                                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1984                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),IW(1),NXN,NYN,NZN,IFILE(1),UR(1),IERR
      LOGICAL  LINFO(1),LEQ,LFAK
      DOUBLE PRECISION     DINFO(1),DW(1),DE(1),DS(1),EPS,TOL
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(36)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR          ARRAY : LINFO(4)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH 4*MAX(MNX,MNY,MNZ) = 4*MX
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MAX(M,8*MX+MV)
C--------I------I-----I------------------------------------------------
C DE     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C DS     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C NXN    I  I   I OUT I  NEW NUMBER OF X-GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NYN    I  I   I OUT I  NEW NUMBER OF Y-GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NZN    I  I   I OUT I  NEW NUMBER OF Z-GRIDPOINTS
C--------I------I-----I------------------------------------------------
C LEQ    I  L   I IN  I  IF LEQ = TRUE  THE ERROR ON THE LEVEL OF
C        I      I     I  EQUATIONS IS ALSO CONSIDERED
C--------I------I-----I------------------------------------------------
C LFAK   I  L   I IN  I  IF LFAK = TRUE THE CHANGING FACTORS IN THE
C        I      I     I  STEP SIZE FUNCTION ARE CONTROLLED
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  TOLERANCE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS                  ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONIZATION VARIABLES        ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IAK,ID1,ID2,ID2E,ID3,ID4,ID5,IFE,IFF,IFS,IDOKU,
     *          II2,II3,II4,IK,IN,IDIM,IDUM,IMM,IOS,J,LOUT,M,MX,
     *          MNX,MNY,MNZ,MV,N,NK,NX,NY,NZ,NXY,NZK,NXZK,NYZK,NXYK,NV,
     *          NOX,NOY,NOZ,NXMAX,PFE,RN,RN4,RNE,RNS,RL,RL4
      LOGICAL   LX,LY,LZ
      DOUBLE PRECISION      DXFAK,ZERO,FDS101,P1,S,THREE,TOLFAC
      EXTERNAL  FDS317
      PARAMETER (ZERO=0.0, P1=0.1, THREE = 3.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      S = THREE
      TOLFAC = P1
C
C***  READ THE INFORMATION-VECTORS :
C     -----------------------------
C
      NK    = IINFO(1)
      NX    = IINFO(2)
      NY    = IINFO(3)
      NZ    = IINFO(4)
      MNX   = IINFO(5)
      MNY   = IINFO(6)
      MNZ   = IINFO(7)
      MX    = MAX(MNX,MNY,MNZ)
      N     = IINFO(9)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      IMM   = IINFO(16)
      RL4   = IINFO(24)
      IDOKU = IINFO(25)
      LOUT  = IINFO(26)
      NXMAX = IINFO(28)
      NOX   = IINFO(34)
      NOY   = IINFO(35)
      NOZ   = IINFO(36)
      LX    = LINFO(2)
      LY    = LINFO(3)
      LZ    = LINFO(4)
      NXY   = NX*NY
      NZK   = NZ*NK
      NYZK  = NY*NZK
      NXZK  = NX*NZK
      NXYK  = NXY*NK
      IFE   = 5
      IFS   = 3
      IFF   = 2
C
C***  READ THE X-ERROR ON THE LEVEL OF EQUATION
C
      IF(LEQ) THEN
         NV  = MV
         RNE = IN*NK+1
         DO 110 J=1,IN
            IF(J .EQ. IN) NV = N-(IN-1)*MV
            IA = 1+(J-1)*MV
            DO 100 IK=1,NK
               IAK = IA+(IK-1)*N
               CALL FDS317(IFILE(IFE),IOS,RNE,RL,PFE,DW(IAK),
     *                     NV,IDUM,UR(IFE))
  100       CONTINUE
  110    CONTINUE
         CALL FDS411(NX,NYZK,DW,DE)
      ENDIF
C
C***  READ THE X-ERROR ON THE LEVEL OF SOLUTION
C
      RNS = 4*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(IFS),RNS,RL,UR(IFS),
     *            FDS317,IDUM)
      CALL FDS411(NX,NYZK,DW,DS)
C
C***  COMPUTE THE ERROR-ENVELOPE
C
      IF(LEQ) THEN
         DXFAK = FDS101(N*NK,DS,ZERO)/FDS101(N*NK,DE,EPS)
         IA    = 1
         DO 120 I=1,NX
            DW(I) = MAX(FDS101(NYZK,DS(IA),ZERO),
     *                  DXFAK*FDS101(NYZK,DE(IA),ZERO))
            IA    = IA+NYZK
  120    CONTINUE
      ELSE
         IA = 1
         DO 130 I=1,NX
            DW(I) = FDS101(NYZK,DS(IA),ZERO)
            IA    = IA+NYZK
  130    CONTINUE
      ENDIF
      IF(LX) DW(MNX)=DW(1)
      II2 = 1+MX
      II3 = II2+MX
      II4 = II3+MX
      IF(LFAK) THEN
      RN  = 1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II3),
     *            MNX,IDUM,UR(IFF))
      RN  = RN+1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II4),
     *            MNX,IDUM,UR(IFF))
      ENDIF
      ID1 = 1+MX
      ID2 = ID1+MX
      ID3 = ID2+MV
      ID4 = ID3+MX
      ID5 = ID4+MX
C
C***  COMPUTE THE NEW GRID POINT DISTRIBUTION
C
      CALL FDSA51(IDIM,IW(1),IW(II2),IW(II3),IW(II4),NOX,MNX,MV,
     *            NXN,LFAK,DW(1),EPS,DW(ID1),S,TOL,TOLFAC,DINFO(1),
     *            DW(ID2),DW(ID3),DW(ID4),DW(ID5))
      IF(IDOKU .GE. 2) THEN
         WRITE(LOUT,1001)
         WRITE(LOUT,1000)  (DINFO(I),I=1,MNX)
         WRITE(LOUT,1002)
         WRITE(LOUT,1000)  (DW(I),I=1,MNX)
         WRITE(LOUT,1003)
         ID2E=ID1+MNX-1
         WRITE(LOUT,1000)  (DW(I),I=ID1,ID2E)
         IF(IDIM .EQ. 0) THEN
            WRITE(LOUT,1004) NXN
            ID2E = ID2+NXN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IF(NXN.GT.NXMAX) THEN
               WRITE(LOUT,1005) NXMAX
               IERR = 601
            ENDIF
         ELSE
            WRITE(LOUT,1005) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
      ELSE
         IF(IDIM.EQ.0.AND.NXN.GT.NXMAX) THEN
            WRITE(LOUT,1005) NXMAX
            ID2E = ID2+NXN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
         IF(IDIM.NE.0) THEN
            WRITE(LOUT,1005) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
      ENDIF
C
C***  WRITE NEW X-GRID ON FILE 4
C
      RN4=1
      CALL FDS318(IFILE(4),IOS,RN4,RL4,PFE,DW(ID2),NXN,IDUM,UR(4))
C
C***  READ THE Y-ERROR ON THE LEVEL OF EQUATION
C
      IF(LEQ) THEN
         NV  = MV
         DO 210 J=1,IN
            IF(J .EQ. IN) NV = N-(IN-1)*MV
            IA = 1+(J-1)*MV
            DO 200 IK=1,NK
               IAK = IA+(IK-1)*N
               CALL FDS317(IFILE(IFE),IOS,RNE,RL,PFE,DW(IAK),
     *                     NV,IDUM,UR(IFE))
  200       CONTINUE
  210    CONTINUE
         CALL FDS411(NXY,NZK,DW,DE)
      ENDIF
C
C***  READ THE Y-ERROR ON THE LEVEL OF SOLUTION
C
      CALL FDS332(DW,N,NK,MV,IFILE(IFS),RNS,RL,UR(IFS),
     *            FDS317,IDUM)
      CALL FDS411(NXY,NZK,DW,DS)
C
C***  COMPUTE THE ERROR-ENVELOPE
C
      IF(LEQ) THEN
         DXFAK = FDS101(N*NK,DS,ZERO)/FDS101(N*NK,DE,EPS)
         IA    = 1
         DO 220 I=1,NY
            DW(I) = MAX(FDS101(NXZK,DS(IA),ZERO),
     *                  DXFAK*FDS101(NXZK,DE(IA),ZERO))
            IA    = IA+NXZK
  220    CONTINUE
      ELSE
         IA = 1
         DO 230 I=1,NY
            DW(I) = FDS101(NXZK,DS(IA),ZERO)
            IA    = IA+NXZK
  230    CONTINUE
      ENDIF
      IF(LY) DW(MNY)=DW(1)
      IF(LFAK) THEN
      RN  = 8
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II3),
     *            MNY,IDUM,UR(IFF))
      RN  = RN+1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II4),
     *            MNY,IDUM,UR(IFF))
      ENDIF
C
C***  COMPUTE THE NEW GRID POINT DISTRIBUTION
C
      IA=1+MNX
      CALL FDSA51(IDIM,IW(1),IW(II2),IW(II3),IW(II4),NOY,MNY,MV,
     *            NYN,LFAK,DW(1),EPS,DW(ID1),S,TOL,TOLFAC,DINFO(IA),
     *            DW(ID2),DW(ID3),DW(ID4),DW(ID5))
      IF(IDOKU .GE. 2) THEN
         WRITE(LOUT,1006)
         IA=MNX
         WRITE(LOUT,1000)  (DINFO(I+IA),I=1,MNY)
         WRITE(LOUT,1002)
         WRITE(LOUT,1000)  (DW(I),I=1,MNY)
         WRITE(LOUT,1003)
         ID2E=ID1+MNY-1
         WRITE(LOUT,1000)  (DW(I),I=ID1,ID2E)
         IF(IDIM .EQ. 0) THEN
            WRITE(LOUT,1004) NYN
            ID2E = ID2+NYN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IF(NYN.GT.NXMAX) THEN
               WRITE(LOUT,1007) NXMAX
               IERR = 602
            ENDIF
         ELSE
            WRITE(LOUT,1007) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
      ELSE
         IF(IDIM.EQ.0.AND.NYN.GT.NXMAX) THEN
            WRITE(LOUT,1007) NXMAX
            ID2E = ID2+NYN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
         IF(IDIM.NE.0) THEN
            WRITE(LOUT,1007) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
      ENDIF
C
C***  WRITE NEW Y-GRID ON FILE 4
C
      CALL FDS318(IFILE(4),IOS,RN4,RL4,PFE,DW(ID2),NYN,IDUM,UR(4))
C
C***  READ THE Z-ERROR ON THE LEVEL OF EQUATION
C
      IF(LEQ) THEN
         NV  = MV
         DO 310 J=1,IN
            IF(J .EQ. IN) NV = N-(IN-1)*MV
            IA = 1+(J-1)*MV
            DO 300 IK=1,NK
               IAK = IA+(IK-1)*N
               CALL FDS317(IFILE(IFE),IOS,RNE,RL,PFE,DW(IAK),
     *                     NV,IDUM,UR(IFE))
  300       CONTINUE
  310    CONTINUE
         CALL FDS411(N,NK,DW,DE)
      ENDIF
C
C***  READ THE Z-ERROR ON THE LEVEL OF SOLUTION
C
      CALL FDS332(DW,N,NK,MV,IFILE(IFS),RNS,RL,UR(IFS),
     *            FDS317,IDUM)
      CALL FDS411(N,NK,DW,DS)
C
C***  COMPUTE THE ERROR-ENVELOPE
C
      IF(LEQ) THEN
         DXFAK = FDS101(N*NK,DS,ZERO)/FDS101(N*NK,DE,EPS)
         IA    = 1
         DO 320 I=1,NZ
            DW(I) = MAX(FDS101(NXYK,DS(IA),ZERO),
     *                  DXFAK*FDS101(NXYK,DE(IA),ZERO))
            IA    = IA+NXYK
  320    CONTINUE
      ELSE
         IA = 1
         DO 330 I=1,NZ
            DW(I) = FDS101(NXYK,DS(IA),ZERO)
            IA    = IA+NXYK
  330    CONTINUE
      ENDIF
      IF(LZ) DW(MNZ)=DW(1)
      IF(LFAK) THEN
      RN  = 15
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II3),
     *            MNZ,IDUM,UR(IFF))
      RN  = RN+1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II4),
     *            MNZ,IDUM,UR(IFF))
      ENDIF
C
C***  COMPUTE THE NEW GRID POINT DISTRIBUTION
C
      IA=1+MNX+MNY
      CALL FDSA51(IDIM,IW(1),IW(II2),IW(II3),IW(II4),NOZ,MNZ,MV,
     *            NZN,LFAK,DW(1),EPS,DW(ID1),S,TOL,TOLFAC,DINFO(IA),
     *            DW(ID2),DW(ID3),DW(ID4),DW(ID5))
      IF(IDOKU .GE. 2) THEN
         WRITE(LOUT,1008)
         IA=MNX+MNY
         WRITE(LOUT,1000)  (DINFO(I+IA),I=1,MNZ)
         WRITE(LOUT,1002)
         WRITE(LOUT,1000)  (DW(I),I=1,MNZ)
         WRITE(LOUT,1003)
         ID2E=ID1+MNZ-1
         WRITE(LOUT,1000)  (DW(I),I=ID1,ID2E)
         IF(IDIM .EQ. 0) THEN
            WRITE(LOUT,1004) NZN
            ID2E = ID2+NZN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IF(NZN.GT.NXMAX) THEN
               WRITE(LOUT,1009) NXMAX
               IERR = 603
            ENDIF
         ELSE
            WRITE(LOUT,1009) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 603
         ENDIF
      ELSE
         IF(IDIM.EQ.0.AND.NZN.GT.NXMAX) THEN
            WRITE(LOUT,1009) NXMAX
            ID2E = ID2+NZN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 603
         ENDIF
         IF(IDIM.NE.0) THEN
            WRITE(LOUT,1009) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 603
         ENDIF
      ENDIF
C
C***  WRITE NEW Z-GRID ON FILE 4
C
      CALL FDS318(IFILE(4),IOS,RN4,RL4,PFE,DW(ID2),NZN,IDUM,UR(4))
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(5G14.6)
 1001 FORMAT(/' CONTROL OF THE X-GRID:'/' ',22('-')/
     *       ' OLD X-COORDINATES:'/)
 1002 FORMAT(' ERROR ENVELOPE:'/)
 1003 FORMAT(' NEW STEP SIZE DISTRIBUTION:'/)
 1004 FORMAT(' NEW GRID:',I8,' GRID POINTS:'/)
 1005 FORMAT(' GENERATION OF NEW X-GRID FAILED.'/
     *       ' MORE THAN',I8,' GRID POINTS NEEDED:'/)
 1006 FORMAT(/' CONTROL OF THE Y-GRID:'/' ',22('-')/
     *       ' OLD Y-COORDINATES:'/)
 1007 FORMAT(' GENERATION OF NEW Y-GRID FAILED.'/
     *       ' MORE THAN',I8,' GRID POINTS NEEDED:'/)
 1008 FORMAT(/' CONTROL OF THE Z-GRID:'/' ',22('-')/
     *       ' OLD Z-COORDINATES:'/)
 1009 FORMAT(' GENERATION OF NEW Z-GRID FAILED.'/
     *       ' MORE THAN',I8,' GRID POINTS NEEDED:'/)
C
C-----END OF FDSC52----------------------------------------------------
      E    N    D
C:::20    ,,,,,FDSC70.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSC70 (DW,IW,MDW,MIW,NK,NX,NY,NZ,NXN,NYN,NZN,
     *                   NOX,NOY,NOZ,X,Y,Z,XN,YN,ZN,U,UN,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S C 7 0   INTERPOLATES NK FUNCTIONS GIVEN ON A 3-D     ***
C**      GRID IN VECTOR U(NX,NY,NZ,NK) ON A NEW 3-D GRID.           ***
C**      THE OUTPUT VECTOR IS DIMENSIONED UN(NXN,NYN,NZN,NK).       ***
C**      THE INTERPOLATION IS DONE BY DIFFERENCE FORMULAE OF        ***
C**      ORDER NOX, NOY, NOZ.                                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IER,MDW,MIW,IW(MIW),NK,NX,NY,NZ,NXN,NYN,NZN,
     *          NOX,NOY,NOZ
      DOUBLE PRECISION     
     *  DW(MDW),X(NX),Y(NY),Z(NZ),XN(NXN),YN(NYN),ZN(NZN),
     *          U(NX,NY,NZ,NK),UN(NXN,NYN,NZN,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  MDW >= (4*MOX+NXN+NYN+NZN+MNX+4)*MOX
C        I      I     I          +2*(NXN+NYN+NZN)
C        I      I     I  (WITH MOX = MAX(NOX,NOY,NOZ)+3
C        I      I     I   AND  MNX = MAX(NXN,NYN,NZN))
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  MIW >= 3*(NXN+NYN+NZN)+MOX
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF FUNCTIONS TO BE INTERPOLATED
C--------I------I-----I------------------------------------------------
C NX,NY, I  I   I IN  I  NUMBER OF GRID POINTS IN THE OLD GRID
C NZ     I      I     I
C--------I------I-----I------------------------------------------------
CNXN,NYN,I  I   I IN  I  NUMBER OF GRID POINTS IN THE NEW GRID
CNZN     I      I     I
C--------I------I-----I------------------------------------------------
CNOX,NOY,I  I   I IN  I  ORDERS OF CONSISTENCY OF THE DIFFERENCE
CNOZ     I      I     I  FORMULAE IN THE 3 DIRECTIONS
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I IN  I  COORDINATES OF THE OLD GRID
C        I      I     I  ARRAYS : X(NX), Y(NY), Z(NZ)
C--------I------I-----I------------------------------------------------
C XN,YN, I  DP  I IN  I  COORDINATES OF THE NEW GRID
C ZN     I      I     I  ARRAYS : X(NXN), Y(NYN), Z(NZN)
C--------I------I-----I------------------------------------------------
C U      I  DP  I IN  I  VECTOR OF THE FUNCTIONS GIVEN ON THE OLD GRID
C        I      I     I  ARRAY : U(NX,NY,NZ,NK)
C--------I------I-----I------------------------------------------------
C UN     I  DP  I OUT I  VECTOR OF THE INTERPOLATED VALUES ON THE NEW
C        I      I     I  GRID
C        I      I     I  ARRAY : UN(NXN,NYN,NZN,NK)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ID1,ID2,ID3,ID4,ID5,ID6,ID7,ID8,ID9,IAIPX,IAIPY,
     *         IAIPZ,IGMX,IGMY,IGMZ,IGPX,IGPY,IGPZ,ITRX,ITRY,ITRZ,
     *         NAX,NAY,NAZ,NB,NFLX,NFLY,NFLZ,NDW,NIW,MOX,MLF,MNX
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      MOX = MAX(NOX,NOY,NOZ) + 3
      MLF = MOX
      MNX = MAX(NXN,NYN,NZN)
C
      ID1   = 1
      ID2   = 1     + MOX * MOX
      ID3   = ID2   + MOX * MOX
      IAIPX = ID3   + MOX * MOX
      ID4   = IAIPX + NXN * MLF
      IGMX  = ID4   + MNX * MLF
      IGPX  = IGMX  + NXN
      ID5   = IGPX  + NXN
      ID6   = ID5   + MOX
      ID7   = ID6   + MOX
      ID8   = ID7   + MOX * MOX
      ID9   = ID8   + MOX
      IAIPY = ID9   + MOX
      IAIPZ = IAIPY + NYN * MLF
      IGMY  = IAIPZ + NZN * MLF
      IGMZ  = IGMY  + NYN
      IGPY  = IGMZ  + NZN
      IGPZ  = IGPY  + NYN
      NDW   = IGPZ  + NZN
C
      ITRX = 1
      NAX  = 1    + NXN
      NB   = NAX  + NXN
      NFLX = NB   + MOX
      ITRY = NFLX + NXN
      NAY  = ITRY + NYN
      NFLY = NAY  + NYN
      ITRZ = NFLY + NYN
      NAZ  = ITRZ + NZN
      NFLZ = NAZ  + NZN
      NIW  = NFLZ + NZN
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IER = 70
         WRITE(6,1000) NIW, NDW
         RETURN
      ENDIF
C
      CALL FDS010(DW(1),DW(ID2),DW(ID3),DW(IAIPX),DW(ID4),DW(IGMX),
     *            DW(IGPX),IW(ITRX),IW(NAX),IW(NB),IW(NFLX),NOX,NX,
     *            NXN,NXN,MOX,MLF,XN,X,DW(ID5),DW(ID6),DW(ID7),
     *            DW(ID8),DW(ID9),IER)
      IF(IER.NE.0) RETURN
C
      CALL FDS010(DW(1),DW(ID2),DW(ID3),DW(IAIPY),DW(ID4),DW(IGMY),
     *            DW(IGPY),IW(ITRY),IW(NAY),IW(NB),IW(NFLY),NOY,NY,
     *            NYN,NYN,MOX,MLF,YN,Y,DW(ID5),DW(ID6),DW(ID7),
     *            DW(ID8),DW(ID9),IER)
      IF(IER.NE.0) RETURN
C
      CALL FDS010(DW(1),DW(ID2),DW(ID3),DW(IAIPZ),DW(ID4),DW(IGMZ),
     *            DW(IGPZ),IW(ITRZ),IW(NAZ),IW(NB),IW(NFLZ),NOZ,NZ,
     *            NZN,NZN,MOX,MLF,ZN,Z,DW(ID5),DW(ID6),DW(ID7),
     *            DW(ID8),DW(ID9),IER)
      IF(IER.NE.0) RETURN
C
      CALL FDS473(DW(IAIPX),DW(IAIPY),DW(IAIPZ),DW(IGMX),DW(IGMY),
     *            DW(IGMZ),DW(IGPX),DW(IGPY),DW(IGPZ),IW(ITRX),
     *            IW(ITRY),IW(ITRZ),IW(NAX),IW(NAY),IW(NAZ),
     *            IW(NFLX),IW(NFLY),IW(NFLZ),NK,NX,NY,NZ,
     *            NXN,NYN,NZN,U,UN)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(/' *** ERROR IN FDSC70:'//
     *        '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
C
      R E T U R N
C-----END OF FDSC70----------------------------------------------------
      E    N    D
C:::21    ,,,,,FDSD01.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSD01 (IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,
     &           U1,U2,T0,TEND,DTOUT,IOUT,MAXINT,IND,IERR,
     &           FDSU01,FDSU02,FDSU03,FDSU04,FDSU05,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 0 1    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 3-DIMENSIONAL PARABOLIC DIFFEREN-  ***
C**      TIAL EQUATIONS IN A RECTANGULAR DOMAIN WITH GIVEN INITIAL  ***
C**      VALUES, PRESCRIBED GRID AND ORDER.                         ***
C**      OPTIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR          ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSD01. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR,IOUT,
     &          MAXINT
      DOUBLE PRECISION  DINFO(1),DW(1),T0,TEND,U1(1),U2(1),DTOUT
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(43)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ+10+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR        ARRAY : LINFO(14+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NZ*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  ESTIMATE FOR THE ERROR OF THE SOLUTION
C        I      I     I  ARRAY : U2(MNX,MNY,MNZ,NK)
C--------I------I-----I------------------------------------------------
C T0     I  DP  I IN  I  COORDINATE, WHERE THE INITIAL VALUES ARE GIVEN
C--------I------I-----I------------------------------------------------
C TEND   I  DP  I IN  I  END OF THE INTEGRATION-INTERVAL
C--------I------I-----I------------------------------------------------
C DTOUT  I  DP  I IN  I  T-INCREMENT FOR THE OUTPUT-CONTROL
C--------I------I-----I------------------------------------------------
C IOUT   I  I   I IN  I  OUTPUT-CONTROL
C--------I------I-----I------------------------------------------------
C MAXINT I  I   I IN  I  MAXIMUM NUMBER OF INTEGRATION STEPS
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4,5I      I     I  RAPHSON-METHOD AND THE OUTPUT OF THE RESULTS.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  II1,II2,II3,II4,II5,II6,II7,II8,II9,II10,II11,II12,
     &         IDOKU,IN,IMM,IDMAX,IOS,LOUT,MNX,MNY,MNZ,MV,MAXIT,MDW,
     &         MIW,M,MOX,MOY,MOZ,MLF,M222,MT,M1,M2,M3,M10,M20,NCTRX,
     &         NCTRY,NCTRZ,NK,NX,NY,NZ,NOX,NOY,NOZ,N,RL,RL4,RLW,RN,
     &         RNDU,RNU,MK,MOT,MP,NOT,NT,INTEG,UR(10),I,IBC(6),NOXX,
     &         NOYY,NOZZ,NOM,MOTMAX
      DOUBLE PRECISION  TOL,ZERO,EPS,DFT,DFTI,DFX,DFXN,ABT,EX,FABT,ST,
     &       STA,T,FDS001,A,H,TOUT,HMIN,HMAX
      LOGICAL   LX, LY, LZ, LGLOB, LOUTPT, LRST
      EXTERNAL  FDS315,FDS316,FDS317,FDS318,
     &          FDSC30,FDSD10,FDSD20,FDSD40
      CHARACTER  TNAM*6,STAT*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 , MP = 7 , MOT = 5 , MK = 100 )
C
      DIMENSION  DFT(MK),DFTI(MK),DFX(MK),DFXN(MK),ABT(MP),EX(MP),
     &           FABT(MP,MOT),ST(MP,MP),STA(MP,MP),RNDU(MP),RNU(MP),
     &           T(MP)
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LX     = LINFO(2)
      LY     = LINFO(3)
      LZ     = LINFO(4)
      LRST   = LINFO(5)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MNZ    = IINFO(4)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      NOZ    = IINFO(13)
      MOTMAX = IINFO(14)
      NOM    = IINFO(18)
      DO 10 I=1,6
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      NZ = MNZ
      IF(LZ) NZ = NZ - 1
      N = NX * NY * NZ
      M = N * NK
      MOX = NOX + 4
      MOY = NOY + 4
      MOZ = NOZ + 4
      MLF = 2 * MAX(MOX,MOY,MOZ) - 1
      IF(MOTMAX.LT.1.OR.MOTMAX.GT.5) MOTMAX = MOT
      RL  = MV
      RL4 = MAX(NX*NY,NY*NZ,NZ*NX)
      IN  = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222  = 8
      MT    = MV
      IMM   = MNX + MNY + MNZ + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(4)  = NZ
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(7)  = MNZ
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
      IINFO(26) = LOUT
      IINFO(27) = MAXIT
      IINFO(42) = MOTMAX
      IINFO(43) = MP
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .TRUE.
      LGLOB = LINFO(14+NK)
C
C***  INITIALIZATIONS
C
      IMM = IMM+2*NK
      EPS = FDS001(A)
      DINFO(IMM+4)   = EPS
      T(1) = T0
      IF(IOUT.LE.0) TOUT=T0+DTOUT
      RNU(1) = 1
      DO 100 RN=2,MP
         RNU(RN) = RNU(RN-1) + IN*NK
         T(RN) = 0.0
  100 CONTINUE
C
      IERR = 0
      TNAM = 'FDSD01'
C$$$  CALL FDS888(TNAM,NK,NX,NY,NZ,NOX,NOY,NOZ,MV)
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 8*NK + (3+9*NK)*MV
      M20 = (11 + 8 * NK) * MV
      M1  = MAX(M10,M20,M+6*MV)
      M2  = 3 * MV
      M3  = MAX(NX*NY,NY*NZ,NZ*NX,MAX(MNX,MNY,MNZ)*MLF)
      CALL FDST02(LOUT,IFILE,1,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      CALL FDST03(DINFO(IMM+5),DINFO(IMM+6),DINFO(IMM+7),T0,TEND,IOUT,
     &            DTOUT,EPS,IERR)
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      WRITE(6,1030)
      CALL FDST01(NZ,NOZ,DINFO(MNX+MNY+1),IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  OPEN CHECKPOINT-FILE AND TEMPORARY FILES
C
      STAT='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STAT='OLD'
      ENDIF
      RLW = RL
      CALL FDS300(IFILE(1) ,'FDS1','UNKNOWN','DIRECT',RLW,IOS,RN,UR(1))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(2) ,'FDS2',STAT,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(3) ,'FDS3',STAT,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STAT,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(5) ,'FDS5',STAT,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(6) ,'FDS6',STAT,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(7) ,'FDS7',STAT,'DIRECT',RLW,IOS,RN,UR(7))
      IF(IOS.NE.0) IERR=2
      RL = RLW
      CALL FDS300(IFILE(8) ,'FDS8',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9),LOUT,IERR)
      IF(IERR.EQ.399) GOTO 700
      IF(IERR.EQ.2) GOTO 700
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
C***  PRINT THE INPUT-PARAMETERS
C
      IF(IDOKU.GT.0) THEN
      WRITE(LOUT,1040) NX,NY,NZ,NOX,NOY,NOZ,NK,TOL,EPS,MV
      CALL FDST05(LOUT,T0,TEND,DINFO(IMM+5),DINFO(IMM+6),DINFO(IMM+7),
     &            IOUT,DTOUT,LINFO(11+NK),LINFO(12+NK),LINFO(13+NK),
     &            LINFO(14+NK))
      ENDIF
C
C***  COMPUTE THE DIFFERENCEFORMULAE IN BV-DIRECTION FOR THE MATRIX
C
      IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY,NOZ)) THEN
          NOXX = NOM
          NOYY = NOM
          NOZZ = NOM
          WRITE(LOUT,1050) NOM
      ELSE
          NOXX = NOX
          NOYY = NOY
          NOZZ = NOZ
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(5),LZ,MNZ,NOZZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
      IINFO(19) = NCTRZ
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
      CALL FDSC12(IINFO,MNX,MNY,MNZ,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),
     &     DW(II11),DW(II12),IFILE(2),UR(2),LX,LY,LZ,IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY.OR.NOZ.NE.NOZZ) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(5),LZ,MNZ,NOZ,MOZ,MLF,DINFO(MNX+MNY+1),NCTRZ,DW,
     &            MDW,IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      ENDIF
C
      IF(LRST) THEN
C
C***  CONTINUE INTEGRATION-LOOP - READ CHECKPOINT-FILE
C
      HMIN=DINFO(IMM+6)
      HMAX=DINFO(IMM+7)
      RN=(2*MP+1)*IN*NK+1
      CALL FDSB21(IFILE(1),RN,UR(1),MP,MOT,RNU,T,ST,
     &     STA,FABT,DFT,DFX,DINFO,IINFO,FDS317,FDS315,IERR)
      IF(IERR.NE.0)  GO TO 600
      DINFO(IMM+6)=HMIN
      DINFO(IMM+7)=HMAX
      WRITE(LOUT,1100) IINFO(37)
      LINFO(5)=.TRUE.
      GO TO 400
      ELSE
C
C***  INITIAL SOLUTION AT T0 FOR THE NEWTON-ITERATION
C
      IF(LX.OR.LY.OR.LZ) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS OF THE
C        INITIAL SOLUTION AND WRITE ON PARABOLIC FILE
C
         CALL FDS437(MNX,MNY,MNZ,NX,NY,NZ,NK,U1,DW)
         RN = 1
         CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         IF(LGLOB) THEN
         CALL FDS437(MNX,MNY,MNZ,NX,NY,NZ,NK,U2,DW)
         RN = MP*IN*NK+1
         CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         ENDIF
      ELSE
         RN = 1
         CALL FDS332(U1,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         IF(LGLOB) THEN
         RN = MP*IN*NK+1
         CALL FDS332(U2,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         ENDIF
      ENDIF
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  FIRST INTEGRATION-STEP
C
      CALL FDSB11(DINFO,IINFO,LINFO,ILIN,LLIN,IFILE,UR,DW,MDW,IW,MIW,
     &     U1,U2,DFT,DFX,ABT,EX,FABT,ST,STA,RNDU,RNU,T,MP,EPS,TOL,IND,
     &     IERR,FDSD10,FDSD20,FDSC30,FDSD40,FDSLIN,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 600
      GOTO 401
C
C***  INTEGRATION-LOOP
C
  400 CALL FDSB12(DINFO,IINFO,LINFO,LRST,ILIN,LLIN,IFILE,UR,DW,MDW,IW,
     &     MIW,U1,U2,DFT,DFTI,DFX,DFXN,ABT,EX,FABT,ST,STA,RNDU,RNU,T,MP,
     &     EPS,TOL,IND,IERR,FDSD10,FDSD20,FDSC30,FDSD40,FDSLIN,
     &     FDSU01,FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 600
  401 CONTINUE
C
C***  CONTROL OF THE OUTPUT
C
      INTEG=IINFO(37)
      LOUTPT=.FALSE.
      IF(IOUT.GT.0) THEN
         IF(MOD(INTEG,IOUT).EQ.0) LOUTPT=.TRUE.
      ENDIF
      IF(IOUT.LE.0.AND.T(1).GE.TOUT) LOUTPT=.TRUE.
      IF(LOUTPT) THEN
         H=DINFO(IMM+5)
         NOT=IINFO(39)
  500    IF(IOUT.EQ.-1) THEN
C
C***       INTERPOLATION OF THE SOLUTION AT T=TOUT
C
           NT = IINFO(41)
           II1 = 1+M
           II2 = II1+MP*MP
           II3 = II2+MP*MP
           CALL FDSB70(N,NK,NT,MP,NOT,MV,RL,RNU,IFILE(1),UR(1),DW(II3),
     &                 DW(1),ST,STA,DW(II1),DW(II2),T,TOUT,U2)
           CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,U2,U1)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U2)
           ENDIF
         ELSE
         IF(LX.OR.LY.OR.LZ) THEN
C
C***       ADD THE RIGHT ENDS IN THE PERIODIC DIRECTIONS.
C          THE VALUES ARE TAKEN FROM THE LEFT END.
C
           RN=RNU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U1)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS438(NX,NY,NZ,NK,MNX,MNY,MNZ,DW,U2)
           ENDIF
         ELSE
           RN=RNU(1)
           CALL FDS332(U1,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(U2,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           ENDIF
         ENDIF
         ENDIF
         IF(IOUT.GT.0) TOUT=T(1)
C
C***     CALL THE USER-SUBROUTINE FOR INFORMATION AND OUTPUT
C
         CALL FDSU05(INTEG,T(1),TOUT,TEND,H,NOT,NK,MNX,MNY,MNZ,U1,U2,
     &            DINFO(1),DINFO(MNX+1),DINFO(MNX+MNY+1),IOUT,DTOUT,
     &            DINFO,IINFO,LINFO,ILIN)
         IF(IOUT.EQ.-1) THEN
            TOUT=TOUT+DTOUT
            IF(T(1).GE.TOUT)  GO TO 500
         ENDIF
         IF(IOUT.EQ.0) THEN
  550       TOUT=TOUT+DTOUT
            IF(T(1).GE.TOUT)  GO TO 550
         ENDIF
      ENDIF
C
C***  WRITE INFORMATION ON CHECKPOINT-FILE
C
      RN=(2*MP+1)*IN*NK+1
      CALL FDSB21(IFILE(1),RN,UR(1),MP,MOT,RNU,T,
     &    ST,STA,FABT,DFT,DFX,DINFO,IINFO,FDS318,FDS316,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  CHECK THE END OF THE INTEGRATION-LOOP
C
      IF(T(1).LT.TEND.AND.(INTEG.LT.MAXINT.OR.MAXINT.EQ.0)) GO TO 400
C
C***  RUN-STATISTIC
C
  600 IF(IDOKU.GT.0) WRITE(LOUT,1600) T(1),INTEG,IINFO(38),ILIN(10)
C
C***  CLOSE CHECKPOINT-FILE
C
      CALL FDS301(IFILE(1),'FDS1','KEEP',IOS,UR(1))
      IF(IOS.NE.0)  IERR=301
C
  700 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSD01  -  VERSION FOR THE SOLUTION OF A',
     &       ' 3-DIMENSIONAL PARABOLIC'/12X,'PDE SYSTEM WITH',
     &       ' PRESCRIBED GRID AND ORDER'/' ',70('*')/' ')
 1010 FORMAT(' TEST OF THE INPUT PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT PARAMETERS IN Y-DIRECTION')
 1030 FORMAT(' TEST OF THE INPUT PARAMETERS IN Z-DIRECTION')
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,3I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',3I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' TOLERANCE:',G28.4/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
 1100 FORMAT(' '/' *** CONTINUE INTEGRATION WITH STEP:',I10)
 1600 FORMAT(' '/' ********** RUN STATISTICS *********'/
     &       ' LAST T-VALUE:',G20.4/
     &       ' TOTAL NUMBER OF INTEGRATION STEPS:',I16/
     &       ' TOTAL NUMBER OF FAILED STEPS:',I21/
     &       ' NUMBER OF MATRIX-VECTOR MULTIPLICATIONS:',I10/)
C
      R E T U R N
C-----END OF FDSD01----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::22    ,,,,,FDSD10.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD10 (DEFMAX,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,
     &                   IWORK,MIW,DWORK,MDW,FDSU01,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 1 0   COMPUTATION OF THE DEFECT.                   ***
C**      AT FIRST THE SOLUTION IS READ AND SORTED IN DIFFERENT WAYS.***
C**      THEN THE DERIVATIVES ARE COMPUTED FROM THE DIFFERENCE      ***
C**      FORMULAE. FOR THE COMPUTATION OF THE DEFECT THE SOLUTION   ***
C**      AND DERIVATIVES ARE SORTED ON TWO FILES FOR INNER GRID-    ***
C**      POINTS AND BOUNDARY POINTS. THE DEFECT IS COMPUTED IN      ***
C**      PARTS OF MV VALUES IN THE USER-SUBROUTINES FDSU01 AND      ***
C**      FDSU02. AT LAST THE BOUNDARY DEFECT IS MERGED WITH THE     ***
C**      INNER DEFECT AND WRITTEN ON FILE.                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IWORK(1),MIW,MDW,IERR
      DOUBLE PRECISION  DEFMAX,DINFO(1),U1(1),U2(1),DWORK(1)
      LOGICAL  LINFO(1)
      EXTERNAL  FDSU01 , FDSU02
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DEFMAX I  DP  I OUT I  MAXIMUM OF THE DEFECT
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : IINFO(24)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ+2)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : LINFO(4)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C        I      I     I  ARRAY : IFILE(6)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES
C        I      I     I  ARRAY : UR(6)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR COMPLETE SOLUTION
C        I      I     I  ARRAY : U1(M) , U2(M)
C--------I------I-----I------------------------------------------------
C IWORK  I  I   I  -  I  INTEGER WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IWORK  ( MIW >= 3 * MV )
C--------I------I-----I------------------------------------------------
C DWORK  I  DP  I  -  I  REAL WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DWORK
C        I      I     I  ( MDW >= M + 6 * MV )
C        I      I     I  ( MDW >= (M222+MT)*NK+(3+8*NK)*MV )
C--------I------I-----I------------------------------------------------
C FDSU01 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE INNER DEFECT
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE BOUNDARY
C        I      I     I  DEFECT
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,NX,NY,NZ,MNX,MNY,MNZ,MLF,N,M,MV,RL,RL4,IN,M222,MT,
     &         I,IX,IY,IZ,IT,II1,II2,II3,II4,II5,II6,II7,II8,
     &         II9,II10,II11,II12,I1,I2,I3,RN1,RN5
      DOUBLE PRECISION  T , ABT
      LOGICAL  PARA, LX, LY, LZ
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK   = IINFO(1)
      NX   = IINFO(2)
      NY   = IINFO(3)
      NZ   = IINFO(4)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      MNZ  = IINFO(7)
      MLF  = IINFO(8)
      N    = IINFO(9)
      M    = IINFO(10)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
      MT   = IINFO(15)
      RL4  = IINFO(24)
C
      IX   = 0
      IY   = MNX + IX
      IZ   = MNY + IY
      IT   = MNZ + IZ + 1
      T    = DINFO(IT)
      PARA = LINFO(1)
      LX   = LINFO(2)
      LY   = LINFO(3)
      LZ   = LINFO(4)
C
      IF(MIW.LT.3*MV.OR.MDW.LT.(M222+MT)*NK+(3+8*NK)*MV
     &   .OR.MDW.LT.M+6*MV) THEN
         IERR = 10
         RETURN
      ENDIF
C
      II1  = 1 + M222 * NK
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV * NK
      II6  = II5  + MT * NK
      II7  = II6  + MV * NK
      II8  = II7  + MV * NK
      II9  = II8  + MV * NK
      II10 = II9  + MV * NK
      II11 = II10 + MV * NK
C
C***     SORTING OF THE SOLUTION FOR THE COMPUTATION
C        OF THE DERIVATIVES
C
      CALL FDS432(N,NX,NY,NZ,NK,MV,M222,U1,U2,DWORK(1),IFILE(3),
     &            IFILE(4),UR(3),UR(4),RL,RL4,IERR)
      IF(IERR.NE.0) RETURN
C
C***     COMPUTATION OF THE X-,Y- AND Z-DERIVATIVES
C
      I1 = 1
      I2 = I1 + MV
      I3 = I2 + MV
      CALL FDSC14(N,NX,NY,NZ,NK,MNX,MNY,MNZ,MLF,MV,M222,IN,IWORK(I1),
     &            IWORK(I2),IWORK(I3),DWORK(II1),U1,U2,DWORK(1),
     &            IFILE(2),IFILE(3),IFILE(4),IFILE(5),UR(2),UR(3),
     &            UR(4),UR(5),RL,RL4,.FALSE.,IERR)
      IF(IERR.NE.0) RETURN
      IF(PARA)  THEN
C
C***     COMPUTATION OF THE T-DERIVATIVE
C
      ABT  = DINFO(IT+1)
      RN1  = IINFO(43)*2*IN*NK+1
      CALL FDSD14(N,NX,NY,NZ,NK,MV,M222,IN,ABT,U1,U2,DWORK(1),
     &            IFILE(1),IFILE(3),IFILE(4),IFILE(5),UR(1),
     &            UR(3),UR(4),UR(5),RN1,RL,RL4,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***     SORTING OF THE SOLUTION AND DERIVATIVES FOR THE
C        COMPUTATION OF THE INNER DEFECT.
C
      CALL FDS433(N,NK,NX,NY,NZ,MV,IN,IFILE(3),UR(3),IFILE(5),UR(5),
     &            IFILE(6),UR(6),RL,DINFO(IX+1),DINFO(IY+1),DINFO(IZ+1),
     &            DWORK(II1),DWORK(II2),DWORK(II3),DWORK(II4),
     &            DWORK(1),M222,LX,LY,LZ,IERR)
      IF(IERR.NE.0) RETURN
C
C***     COMPUTATION OF THE INNER DEFECT
C
      II12 = II11 + MV * NK
      CALL FDSD15(N,NK,MT,MV,IN,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(6),IFILE(5),
     &            UR(6),UR(5),RL,PARA,FDSU01,IERR)
      IF(IERR.NE.0) RETURN
      RN5 = IN * NK + 1
      IF(LX) GO TO 220
C
C***     DEFECT FOR BOUNDARY X = XAN
C
         I = 0
         DO 200 I3 = 1,NZ
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 200 I2 = 1,NY
            DWORK(II1+I) = DINFO(IX+1 )
            DWORK(II2+I) = DINFO(IY+I2)
            DWORK(II3+I) = DINFO(IZ+I3)
            I = I + 1
  200    CONTINUE
         CALL FDSD16(1,NY*NZ,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
C
C***     DEFECT FOR BOUNDARY X = XEN
C
         DO 210 I = 1,NY*NZ
           DWORK(II1+I-1) = DINFO(IX+NX)
  210    CONTINUE
         CALL FDSD16(2,NY*NZ,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
  220 IF(LY) GO TO 250
C
C***     DEFECT FOR BOUNDARY Y = YAN
C
         I = 0
         DO 230 I1 = 1,NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 230 I3 = 1,NZ
            DWORK(II1+I) = DINFO(IX+I1)
            DWORK(II2+I) = DINFO(IY+1 )
            DWORK(II3+I) = DINFO(IZ+I3)
            I = I + 1
  230    CONTINUE
         CALL FDSD16(3,NX*NZ,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
C
C***     DEFECT FOR BOUNDARY Y = YEN
C
         DO 240 I = 1,NX*NZ
           DWORK(II2+I-1) = DINFO(IY+NY)
  240    CONTINUE
         CALL FDSD16(4,NX*NZ,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
  250 IF(LZ) GO TO 280
C
C***     DEFECT FOR BOUNDARY Z = ZAN
C
         I = 0
         DO 260 I2 = 1,NY
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 260 I1 = 1,NX
            DWORK(II1+I) = DINFO(IX+I1)
            DWORK(II2+I) = DINFO(IY+I2)
            DWORK(II3+I) = DINFO(IZ+1 )
            I = I + 1
  260    CONTINUE
         CALL FDSD16(5,NX*NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
C
C***     DEFECT FOR BOUNDARY Z = ZEN
C
         DO 270 I = 1,NX*NY
           DWORK(II3+I-1) = DINFO(IZ+NZ)
  270    CONTINUE
         CALL FDSD16(6,NX*NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II3),DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),DWORK(II10),
     &            DWORK(II11),DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
      IF(IERR.NE.0) RETURN
C
C***     MERGE THE INNER DEFECT WITH THE BOUNDARY DEFECT
C
  280    II1 = 1
         II2 = II1 + M
         II3 = II2 + MV
         II4 = II3 + MV
         II5 = II4 + MV
         II6 = II5 + MV
         II7 = II6 + MV
         CALL FDS434(NK,NX,NY,NZ,N,MV,IN,IFILE(5),IFILE(3),UR(5),UR(3),
     &            RL,DWORK(II1),DWORK(II2),DWORK(II3),DWORK(II4),
     &            DWORK(II5),DWORK(II6),DWORK(II7),U1,DEFMAX,
     &            LX,LY,LZ,IERR)
      IF(IERR.NE.0) RETURN
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD10----------------------------------------------------
      E    N    D
C:::23    ,,,,,FDSD14.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSD14 (N,NX,NY,NZ,NK,MV,M222,IN,ABT,U1,U2,U222,
     &                   IFILE1,IFILE3,IFILE4,IFILE5,UR1,UR3,UR4,
     &                   UR5,RN1,RL,RL4,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 1 4   COMPUTES THE T-DERIVATIVE.                   ***
C**      THE FIX PART OF THE T-DERIVATIVE (COMPUTED WITH THE        ***
C**      SOLUTION AT EARLIER T-STEPS) IS READ FROM FILE 1.          ***
C**      FROM FILE 3 THE SOLUTION AT THE ACTUAL T-STEP IS READ.     ***
C**      ON FILE 4 THE DERIVATIVES ON THE BOUNDARY-PLANES ARE       ***
C**      WRITTEN. ON FILE 5 THE DERIVATIVES FOR THE WHOLE GRID ARE  ***
C**      WRITTEN.                                                   ***
C**      FOR RECORD NUMBERS SEE FILE-CATALOG.                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NX,NY,NZ,NK,MV,M222,IN,IFILE1,IFILE3,IFILE4,
     &         IFILE5,UR1,UR3,UR4,UR5,RN1,RL,RL4,IERR
      DOUBLE PRECISION  ABT,U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I IN  I  COEFFICIENT OF THE DIFFERENCE FORMULA AT
C        I      I     I  THE ACTUAL T
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  WORKARRAYS FOR THE COMPUTATION OF THE
C        I      I     I  T-DERIVATIVE.
C        I      I     I  ARRAYS : U1(N,NK) , U2(N,NK)
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSC14.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   II,IK,IOS,PFE,RN3,RN4,RN5
      EXTERNAL  FDS317, FDS318
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN3 = 1
      RN5 = 6 * NK * IN + 1
C
C***  READ THE FIX PART OF THE T-DERIVATIVE
C
      CALL FDS332(U1,N,NK,MV,IFILE1,RN1,RL,UR1,FDS317,IERR)
C
C***  READ THE ACTUAL SOLUTION
C
      CALL FDS332(U2,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***  COMPUTE THE T-DERIVATIVE
C
      CALL FDS221(N*NK,U1,U2,U1,ABT)
      IF(IERR.NE.0) RETURN
C
C***  WRITE T-DERIVATIVE ON FILE 5
C
      CALL FDS332(U1,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(IERR.NE.0) RETURN
C
C***  T-DERIVATIVE COMPLETE, SORT AND WRITE BOUNDARY VALUES ON FILE 4
C
      II = NX * NY + NX + 2
      DO 310 IK = 1,NK
 310     U222(8,IK) = U1(II,IK)
      RN4 = 46 * NK + 1
      DO 320 IK = 1,NK
 320     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX*NY,IERR,UR4)
      II = (NZ - 1) * NX * NY + 1
      DO 330 IK = 1,NK
 330     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NX*NY,IERR,UR4)
C
C***  DERIVATIVE IN Y-Z-X-SORTING
C
      CALL FDS421(NX,NY*NZ,NK,U1,U2)
      RN4 = 42 * NK + 1
      DO 340 IK = 1,NK
 340     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY*NZ,IERR,UR4)
      II = (NX - 1) * NY * NZ + 1
      DO 350 IK = 1,NK
 350     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(II,IK),NY*NZ,IERR,UR4)
C
C***  DERIVATIVE IN Z-X-Y-SORTING
C
      CALL FDS421(NY,NZ*NX,NK,U2,U1)
      DO 360 IK = 1,NK
 360     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NZ*NX,IERR,UR4)
      II = (NY - 1) * NZ * NX + 1
      DO 370 IK = 1,NK
 370     CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NZ*NX,IERR,UR4)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD14----------------------------------------------------
      E    N    D
C:::24    ,,,,,FDSD15.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD15 (N,NK,MT,MV,IN,T,X,Y,Z,U,UT,UX,UXX,UY,
     &                   UYY,UZ,UZZ,P,IFILE6,IFILE5,UR6,UR5,RL,
     &                   PARA,FDSU01,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 1 5   COMPUTES THE DEFECT FOR THE INNER GRIDPOINTS ***
C**      FROM FILE 6  NV VALUES FOR THE DEFECT-COMPUTATION ARE READ.***
C**      THESE VALUES ARE SORTED IN FDS433, SO THAT ONLY INNER      ***
C**      VALUES ARE READ AND THE USER-SUBROUTINE FDSU01 CAN COMPUTE ***
C**      THE DEFECT FOR NV INNER VALUES.                            ***
C**      THE NV DEFECT-VALUES ARE WRITTEN ON FILE 5.                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NK,MT,MV,IN,IFILE6,IFILE5,UR6,UR5,RL,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),Z(MV),U(MV,NK),UT(MT,NK),
     &                  UX(MV,NK),UXX(MV,NK),UY(MV,NK),UYY(MV,NK),
     &                  UZ(MV,NK),UZZ(MV,NK),P(MV,NK)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MT,MV  I  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  ACTUAL T-VALUE
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I  -  I  WORKARRAY FOR THE COORDINATES
C        I      I     I  ARRAYS : X(MV) , Y(MV) , Z(MV)
C--------I------I-----I------------------------------------------------
C U,UT   I  DP  I  -  I  WORKARRAYS FOR THE SOLUTION, THE DERIVATIVES
C UX,UXX I      I     I  AND THE DEFECT.
C UY,UYY I      I     I  ARRAYS : U..(MV,NK), UT(MT,NK), P(MV,NK)
C UZ,UZZ I      I     I
C P      I      I     I
C--------I------I-----I------------------------------------------------
CIFILE6,5I  I   I IN  I  UNITNUMBERS
C--------I------I-----I------------------------------------------------
C UR6,5  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PARA   I  L   I IN  I  = TRUE IF PROBLEM IS PARABOLIC
C--------I------I-----I------------------------------------------------
C FDSU01 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  INNER-DEFECT.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IK,IOS,J,NV,PFE,RN6,RN5
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN6 = 1
      RN5 = 1
      NV  = MV
      DO 100 J = 1,IN
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
C
C***  READ NV VALUES OF THE COORDINATES, THE SOLUTION AND
C     THE DERIVATIVES FROM FILE 6
C
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,X,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Y,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Z,NV,IERR,UR6)
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,U  (1,IK),NV,IERR,UR6)
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UX (1,IK),NV,IERR,UR6)
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UXX(1,IK),NV,IERR,UR6)
         DO 40 IK = 1,NK
   40    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UY (1,IK),NV,IERR,UR6)
         DO 50 IK = 1,NK
   50    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UYY(1,IK),NV,IERR,UR6)
         DO 60 IK = 1,NK
   60    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UZ (1,IK),NV,IERR,UR6)
         DO 70 IK = 1,NK
   70    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UZZ(1,IK),NV,IERR,UR6)
         IF(PARA) THEN
         DO 80 IK = 1,NK
   80    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UT (1,IK),NV,IERR,UR6)
         END IF
C
C***  COMPUTE THE DEFECT FOR NV INNER GRIDPOINTS
C
      CALL FDSU01(T,X,Y,Z,U,UT,UX,UXX,UY,UYY,UZ,UZZ,P,MT,MV,NK,NV)
C
C***  WRITE THE DEFECT ON FILE 5
C
      DO 90 IK = 1,NK
         CALL FDS318(IFILE5,IOS,RN5,RL,PFE,P(1,IK),NV,IERR,UR5)
   90 CONTINUE
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD15----------------------------------------------------
      E    N    D
C:::25    ,,,,,FDSD16.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD16 (IRAND,N,NK,MT,MV,T,X,Y,Z,U,UT,UX,UXX,UY,
     &                   UYY,UZ,UZZ,P,IFILE4,IFILE5,UR4,UR5,RL,RL4,
     &                   RN5,PARA,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 1 6   COMPUTES THE DEFECT FOR ONE BOUNDARY-PLANE.  ***
C**      FROM FILE 4  N VALUES FOR THE SOLUTION AND THE DERIVATIVES ***
C**      ARE READ. THESE VALUES ARE STORED IN THE SORTING OF THE    ***
C**      BOUNDARY-PLANE.                                            ***
C**      THE N DEFECT-VALUES ARE WRITTEN ON FILE 5.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IRAND,N,NK,MT,MV,IFILE4,IFILE5,UR4,UR5,RL,RL4,RN5,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),Z(MV),U(MV,NK),UT(MT,NK),
     &                  UX(MV,NK),UXX(MV,NK),UY(MV,NK),UYY(MV,NK),
     &                  UZ(MV,NK),UZZ(MV,NK),P(MV,NK)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IRAND  I  I   I IN  I  NUMBER OF THE BOUNDARY-PLANE.
C        I      I     I  IRAND = 1 :  X = XAN
C        I      I     I          2 :  X = XEN
C        I      I     I          3 :  Y = YAN
C        I      I     I          4 :  Y = YEN
C        I      I     I          5 :  Z = ZAN
C        I      I     I          6 :  Z = ZEN
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS WITHIN THE BOUNDARY-PLANE7
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I IN  I  COORDINATES OF THE BOUNDARY POINTS
C        I      I     I  ARRAYS : X(MV) , Y(MV) , Z(MV)
C--------I------I-----I------------------------------------------------
C RL4    I  I   I IN  I  RECORD LENGTH FOR FILE 4
C--------I------I-----I------------------------------------------------
C RN5    I  I   I IN  I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-DEFECT.
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSD15.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IK,IOS,PFE,RN4
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ THE BOUNDARY-VALUES OF THE SOLUTION AND THE
C     DERIVATIVES FROM FILE 4
C
         RN4 = (IRAND - 1) * NK + 1
         DO 10 IK=1,NK
   10    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,U  (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 20 IK=1,NK
   20    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UX (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 30 IK=1,NK
   30    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UXX(1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 40 IK=1,NK
   40    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UY (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 50 IK=1,NK
   50    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UYY(1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 60 IK=1,NK
   60    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UZ (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 70 IK=1,NK
   70    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UZZ(1,IK),N,IERR,UR4)
         IF(PARA) THEN
         RN4 = RN4 + 5 * NK
         DO 80 IK=1,NK
   80    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UT(1,IK),N,IERR,UR4)
         END IF
C
C***  COMPUTE THE BOUNDARY-DEFECT
C
      CALL FDSU02(IRAND,T,X,Y,Z,U,UT,UX,UXX,UY,UYY,UZ,UZZ,P,MT,MV,NK,N)
C
C***  WRITE THE DEFECT ON FILE 5
C
      DO 200 IK = 1,NK
         CALL FDS318(IFILE5,IOS,RN5,RL,PFE,P (1,IK),N,IERR,UR5)
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD16----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::26    ,,,,,FDSD20.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD20 (IINFO,DINFO,LINFO,IFILE,UR,DW,MDW,
     &                   FDSU03,FDSU04,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 2 0   COMPUTATION OF THE JACOBI-MATRICES.          ***
C**      IN FDSD10 THE SOLUTION AND DERIVATIVES WERE COMPUTED AND   ***
C**      STORED IN SUITING SORTINGS ON TWO FILES FOR INNER GRID-    ***
C**      POINTS AND BOUNDARY POINTS. IN FDSD20 THESE VALUES ARE     ***
C**      READ AND THE JACOBI-MATRICES ARE COMPUTED IN PARTS OF MV   ***
C**      VALUES IN THE USER-SUBROUTINES FDSU03 AND FDSU04.          ***
C**      AT LAST THE BOUNDARY VALUES ARE MERGED WITH THE INNER      ***
C**      VALUES AND ALL JACOBI-MATRICES WRITTEN ON FILE             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),MDW,IERR
      DOUBLE PRECISION  DINFO(1),DW(1)
      LOGICAL  LINFO(1)
      EXTERNAL  FDSU03 , FDSU04
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : IINFO(24)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ+1)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : LINFO(4)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C        I      I     I  ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES
C        I      I     I  ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DW  (MDW >= (1+NK)*MT+(10+7*NK)*MV)
C        I      I     I                (MDW >= 6*MV+N)
C--------I------I-----I------------------------------------------------
C FDSU03 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE INNER
C        I      I     I  JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C FDSU04 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE BOUNDARY
C        I      I     I  JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,NX,NY,NZ,N,MV,RL,IN,M222,MT,I,I1,I2,I3,IX,IY,IZ,
     &         II1,II2,II3,II4,II5,II6,II7,II8,II9,II10,II11,II12,
     &         II13,II14,II15,II16,II17,II18,II19,I222,IE,IK,INCR,
     &         NR1,NR2,NR3,NR4,NR5,NR6,RL4,RNJ,MNX,MNY,MNZ
      DOUBLE PRECISION  T
      LOGICAL  PARA, LX, LY, LZ
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK   = IINFO(1)
      NX   = IINFO(2)
      NY   = IINFO(3)
      NZ   = IINFO(4)
      MNX   = IINFO(5)
      MNY   = IINFO(6)
      MNZ   = IINFO(7)
      N    = IINFO(9)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
      MT   = IINFO(15)
      RL4  = IINFO(24)
C
      T    = DINFO(MNX+MNY+MNZ+1)
C
      PARA = LINFO(1)
      LX   = LINFO(2)
      LY   = LINFO(3)
      LZ   = LINFO(4)
C
      IF(MDW.LT.(1+NK)*MT+(10+7*NK)*MV.OR.MDW.LT.6*MV+N) THEN
         IERR = 20
         RETURN
      ENDIF
C
      IX   = 0
      IY   = MNX + IX
      IZ   = MNY + IY
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV * NK
      II6  = II5  + MT * NK
      II7  = II6  + MV * NK
      II8  = II7  + MV * NK
      II9  = II8  + MV * NK
      II10 = II9  + MV * NK
      II11 = II10 + MV * NK
      II12 = II11 + MV * NK
      II13 = II12  + MV
      II14 = II13  + MT
      II15 = II14  + MV
      II16 = II15  + MV
      II17 = II16  + MV
      II18 = II17  + MV
      II19 = II18  + MV
C
C***  COMPUTATION OF THE JACOBI-MATRICES AT INNER GRIDPOINTS
C
      CALL FDSD21(N,NK,MT,MV,IN,T,DW(II1),DW(II2),DW(II3),DW(II4),
     &            DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),
     &            DW(II11),DW(II12),DW(II13),DW(II14),DW(II15),
     &            DW(II16),DW(II17),DW(II18),DW(II19),IFILE(6),
     &            IFILE(7),UR(6),UR(7),RL,PARA,FDSU03,IERR)
      IF(IERR.NE.0) RETURN
      RNJ = 6 * M222 * NK + 1
      IF(LX) GO TO 220
C
C***     JACOBI-MATRICES FOR BOUNDARY  X = XAN
C
         I = 0
         DO 200 I3 = 1,NZ
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 200 I2 = 1,NY
            DW(II1+I) = DINFO(IX+1 )
            DW(II2+I) = DINFO(IY+I2)
            DW(II3+I) = DINFO(IZ+I3)
            I = I + 1
  200    CONTINUE
         NR1 = RNJ
         CALL FDSD22(1,NY*NZ,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
C
C***     JACOBI-MATRICES FOR BOUNDARY  X = XEN
C
         DO 210 I = 1,NY*NZ
           DW(II1+I-1) = DINFO(IX+NX)
  210    CONTINUE
         NR2 = RNJ
         CALL FDSD22(2,NY*NZ,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
  220 IF(LY) GO TO 250
C
C***     JACOBI-MATRICES FOR BOUNDARY  Y = YAN
C
         I = 0
         DO 230 I1 = 1,NX
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 230 I3 = 1,NZ
            DW(II1+I) = DINFO(IX+I1)
            DW(II2+I) = DINFO(IY+1 )
            DW(II3+I) = DINFO(IZ+I3)
            I = I + 1
  230    CONTINUE
         NR3 = RNJ
         CALL FDSD22(3,NX*NZ,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
C
C***     JACOBI-MATRICES FOR BOUNDARY  Y = YEN
C
         DO 240 I = 1,NX*NZ
           DW(II2+I-1) = DINFO(IY+NY)
  240    CONTINUE
         NR4 = RNJ
         CALL FDSD22(4,NX*NZ,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
  250 IF(LZ) GO TO 280
C
C***     JACOBI-MATRICES FOR BOUNDARY  Z = ZAN
C
         I = 0
         DO 260 I2 = 1,NY
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 260 I1 = 1,NX
            DW(II1+I) = DINFO(IX+I1)
            DW(II2+I) = DINFO(IY+I2)
            DW(II3+I) = DINFO(IZ+1 )
            I = I + 1
  260    CONTINUE
         NR5 = RNJ
         CALL FDSD22(5,NX*NY,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
C
C***     JACOBI-MATRICES FOR BOUNDARY  Z = ZEN
C
         DO 270 I = 1,NX*NY
           DW(II3+I-1) = DINFO(IZ+NZ)
  270    CONTINUE
         NR6 = RNJ
         CALL FDSD22(6,NX*NY,NK,MT,MV,T,DW(II1),DW(II2),DW(II3),
     &            DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),
     &            DW(II10),DW(II11),DW(II12),DW(II13),DW(II14),
     &            DW(II15),DW(II16),DW(II17),DW(II18),DW(II19),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,
     &            FDSU04,IERR)
         IF(IERR.NE.0) RETURN
C
C***     MERGE THE INNER VALUES OF THE JACOBI-MATRICES
C        WITH THE BOUNDARY VALUES
C
  280    RNJ = 1
         INCR = M222 * NK * NK
         II5 = II4 + MV
         II6 = II5 + MV
         II7 = II6 + MV
         DO 300 IE = 1,NK
         DO 300 IK = 1,NK
            DO 290 I222 = 1,M222
            CALL FDS435(NX,NY,NZ,MV,IFILE(7),UR(7),RNJ,INCR,
     &           IFILE(4),UR(4),NR1,NR2,NR3,NR4,NR5,NR6,RL,RL4,
     &           DW(II7),DW(II1),DW(II2),DW(II3),DW(II4),
     &           DW(II5),DW(II6),LX,LY,LZ)
  290       CONTINUE
  300    CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD20----------------------------------------------------
      E    N    D
C:::27    ,,,,,FDSD21.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD21 (N,NK,MT,MV,IN,T,X,Y,Z,U,UT,UX,UXX,UY,
     &                   UYY,UZ,UZZ,PU,PUT,PUX,PUXX,PUY,PUYY,
     &                   PUZ,PUZZ,IFILE6,IFILE7,UR6,UR7,RL,
     &                   PARA,FDSU03,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 2 1   COMPUTES THE ELEMENTS OF THE JACOBI-MATRICES ***
C**      FOR THE INNER GRIDPOINTS. FROM FILE 6 NV VALUES OF THE     ***
C**      SOLUTION AND THE DERIVATIVES ARE READ. THESE VALUES ARE    ***
C**      SORTED IN FDS433, SO THAT ONLY INNER VALUES ARE READ AND   ***
C**      THE USER-SUBROUTINE FDSU03 CAN COMPUTE THE JACOBI-MATRICES ***
C**      FOR NV INNER VALUES.                                       ***
C**      THE JACOBI-MATRICES ARE WRITTEN ON FILE 7.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  N,NK,MT,MV,IN,IFILE6,IFILE7,UR6,UR7,RL,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),Z(MV),U(MV,NK),UT(MT,NK),
     &                  UX(MV,NK),UXX(MV,NK),UY(MV,NK),UYY(MV,NK),
     &                  UZ(MV,NK),UZZ(MV,NK),PU(MV),PUT(MT),PUX(MV),
     &                  PUXX(MV),PUY(MV),PUYY(MV),PUZ(MV),PUZZ(MV)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MT,MV  I  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  ACTUAL T-VALUE
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I  -  I  WORKARRAY FOR THE COORDINATES
C        I      I     I  ARRAYS : X(MV) , Y(MV) , Z(MV)
C--------I------I-----I------------------------------------------------
C U,UT   I  DP  I  -  I  WORKARRAYS FOR THE SOLUTION AND THE
C UX,UXX I      I     I  DERIVATIVES
C UY,UYY I      I     I  ARRAYS : U..(MV,NK), UT(MT,NK)
C UZ,UZZ I      I     I
C--------I------I-----I------------------------------------------------
C PU,PUT I  DP  I  -  I  WORKARRAYS FOR THE JACOBI-MATRICES
C PUX,XX I      I     I
C PUY,YY I      I     I  ARRAYS : PU..(MV), PUT(MT)
C PUZ,ZZ I      I     I
C--------I------I-----I------------------------------------------------
CIFILE6,7I  I   I IN  I  UNITNUMBERS
C--------I------I-----I------------------------------------------------
C UR6,7  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PARA   I  L   I IN  I  = TRUE IF PROBLEM IS PARABOLIC
C--------I------I-----I------------------------------------------------
C FDSU03 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  JACOBI-MATRICES AT INNER GRIDPOINTS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IE,IK,IOS,J,NV,PFE,RN6,RN7
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN6 = 1
      RN7 = 1
      NV  = MV
      DO 200 J = 1,IN
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
C
C***  READ NV VALUES OF THE COORDINATES, THE SOLUTION AND
C     THE DERIVATIVES FROM FILE 6
C
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,X,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Y,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Z,NV,IERR,UR6)
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,U  (1,IK),NV,IERR,UR6)
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UX (1,IK),NV,IERR,UR6)
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UXX(1,IK),NV,IERR,UR6)
         DO 40 IK = 1,NK
   40    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UY (1,IK),NV,IERR,UR6)
         DO 50 IK = 1,NK
   50    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UYY(1,IK),NV,IERR,UR6)
         DO 60 IK = 1,NK
   60    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UZ (1,IK),NV,IERR,UR6)
         DO 70 IK = 1,NK
   70    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UZZ(1,IK),NV,IERR,UR6)
         IF(PARA) THEN
         DO 80 IK = 1,NK
   80    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UT (1,IK),NV,IERR,UR6)
         END IF
C
C***  COMPUTE THE JACOBI-MATRICES FOR NV INNER GRIDPOINTS
C
      DO 160 IE = 1,NK
      DO 160 IK = 1,NK
C
C***  INITIALIZE PU-ARRAYS
C
      DO 100 I = 1,MV
         PU  (I) = ZERO
         PUX (I) = ZERO
         PUXX(I) = ZERO
         PUY (I) = ZERO
         PUYY(I) = ZERO
         PUZ (I) = ZERO
         PUZZ(I) = ZERO
 100  CONTINUE
      DO 110 I = 1,MT
         PUT(I) = ZERO
 110  CONTINUE
C
C***     PARTIAL DERIVATIVES FOR EQUATION IE AND SOLUTION COMPONENT IK
C
         CALL FDSU03(IE,IK,T,X,Y,Z,U,UT,UX,UXX,UY,UYY,UZ,UZZ,PU,PUT,
     &               PUX,PUXX,PUY,PUYY,PUZ,PUZZ,MT,MV,NK,NV)
C
C***     WRITE THE JACOBI-MATRICES (IN MV PARTS) ON FILE 7
C
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PU  ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUX ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUXX,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUY ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUYY,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUZ ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUZZ,NV,IERR,UR7)
         IF(PARA) CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUT,NV,IERR,UR7)
         IF(IOS.NE.0) THEN
            IERR = 21 + IFILE7 * 10000
            RETURN
         ENDIF
 160  CONTINUE
C
 200  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD21----------------------------------------------------
      E    N    D
C:::28    ,,,,,FDSD22.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD22 (IRAND,N,NK,MT,MV,T,X,Y,Z,U,UT,UX,UXX,UY,
     &                   UYY,UZ,UZZ,PU,PUT,PUX,PUXX,PUY,PUYY,PUZ,
     &                   PUZZ,IFILE4,UR4,RL4,RNJ,PARA,
     &                   FDSU04,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 2 2   COMPUTES THE ELEMENTS OF THE JACOBI-MATRICES ***
C**      FOR ONE BOUNDARY-PLANE. FROM FILE 4  N VALUES FOR THE      ***
C**      SOLUTION AND THE DERIVATIVES ARE READ. THESE VALUES ARE    ***
C**      STORED IN THE SORTING OF THE BOUNDARY-PLANE.               ***
C**      THE JACOBI-MATRICES ARE WRITTEN ON FILE 4.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IRAND,N,NK,MT,MV,IFILE4,UR4,RL4,RNJ,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),Z(MV),U(MV,NK),UT(MT,NK),
     &                  UX(MV,NK),UXX(MV,NK),UY(MV,NK),UYY(MV,NK),
     &                  UZ(MV,NK),UZZ(MV,NK),PU(MV),PUT(MT),PUX(MV),
     &                  PUXX(MV),PUY(MV),PUYY(MV),PUZ(MV),PUZZ(MV)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IRAND  I  I   I IN  I  NUMBER OF THE BOUNDARY-PLANE.
C        I      I     I  IRAND = 1 :  X = XAN
C        I      I     I          2 :  X = XEN
C        I      I     I          3 :  Y = YAN
C        I      I     I          4 :  Y = YEN
C        I      I     I          5 :  Z = ZAN
C        I      I     I          6 :  Z = ZEN
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS WITHIN THE BOUNDARY-PLANE
C--------I------I-----I------------------------------------------------
C X,Y,Z  I  DP  I IN  I  COORDINATES OF THE BOUNDARY POINTS
C        I      I     I  ARRAYS : X(MV) , Y(MV) , Z(MV)
C--------I------I-----I------------------------------------------------
C RL4    I  I   I IN  I  RECORD LENGTH FOR FILE 4
C--------I------I-----I------------------------------------------------
C RNJ    I  I   I IN  I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C FDSU04 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSD21.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IE,IK,IOS,PFE,RN4
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ THE BOUNDARY-VALUES OF THE SOLUTION AND THE
C     DERIVATIVES FROM FILE 4
C
         RN4 = (IRAND - 1) * NK + 1
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,U  (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UX (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UXX(1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 40 IK = 1,NK
   40    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UY (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 50 IK = 1,NK
   50    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UYY(1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 60 IK = 1,NK
   60    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UZ (1,IK),N,IERR,UR4)
         RN4 = RN4 + 5 * NK
         DO 70 IK = 1,NK
   70    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UZZ(1,IK),N,IERR,UR4)
         IF(PARA) THEN
         RN4 = RN4 + 5 * NK
         DO 80 IK = 1,NK
   80    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UT(1,IK),N,IERR,UR4)
         END IF
C
C***  COMPUTE THE BOUNDARY-JACOBI-MATRICES
C
      DO 200 IE = 1,NK
      DO 200 IK = 1,NK
C
C***  INITIALIZE PU-ARRAYS
C
      DO 150 I = 1,MV
         PU  (I) = ZERO
         PUX (I) = ZERO
         PUXX(I) = ZERO
         PUY (I) = ZERO
         PUYY(I) = ZERO
         PUZ (I) = ZERO
         PUZZ(I) = ZERO
  150 CONTINUE
      DO 160 I = 1,MT
         PUT(I) = ZERO
  160 CONTINUE
C
C***     PARTIAL DERIVATIVES FOR EQUATION IE AND SOLUTION COMPONENT IK
C
         CALL FDSU04(IRAND,IE,IK,T,X,Y,Z,U,UT,UX,UXX,UY,UYY,UZ,UZZ,
     &               PU,PUT,PUX,PUXX,PUY,PUYY,PUZ,PUZZ,MT,MV,NK,N)
C
C***     WRITE THE JACOBI-MATRICES ON FILE 4
C
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PU  ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUX ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUXX,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUY ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUYY,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUZ ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUZZ,N,IERR,UR4)
         IF(PARA) CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUT,N,IERR,UR4)
         IF(IOS.NE.0) THEN
            IERR = 22 + IFILE4 * 10000
            RETURN
         ENDIF
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD22----------------------------------------------------
      E    N    D
C:::29    ,,,,,FDSD40.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD40 (EPS,IINFO,DINFO,LINFO,IFILE,UR,U1,IW,MIW,
     &                   DW,MDW,ILIN,LLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   F D S D 4 0    COMPUTATION OF THE QD-MATRIX.                  ***
C**   FOR EACH BLOCK-DIAGONAL FDSD41 IS CALLED FOR THE COMPUTATION  ***
C**   OF THE DIAGONALPARTS. FDS441 MERGES THE DIAGONALPARTS TO THE  ***
C**   DIAGONALS OF THE MATRIX AND WRITES THEM ON SEQUENTIAL FILE 8. ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IW(1),MIW,MDW,ILIN(1),IERR
      DOUBLE PRECISION  EPS,DINFO(1),U1(1),DW(1)
      LOGICAL  LINFO(1),LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR         ARRAY : IINFO(23)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+MNZ+2)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR         ARRAY : LINFO(4)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS               ARRAY : IFILE(8)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES     ARRAY : UR(8)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY FOR 1 DIAGONAL      ARRAY : U1(M)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY                     ARRAY : IW(MIW)
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IW          ( MIW >= 3 * IDMAX )
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY                     ARRAY : DW(MDW)
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DW          ( MDW >= MAX(M,14*MV)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINSOL
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I OUT I  DIAGONALSOCCUPATION         ARRAY : LLIN(MD)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,NX,NY,NZ,N,M,MV,RL,IN,M222,NBDX,NBDY,NBDZ,
     &         IDMAX,II1,II2,II3,II4,II5,II6,II7,
     &         II8,II9,II10,II11,II12,II13,II14,I,ID,IFJ,IFF,IFD,
     &         IFM,RNF,RND,MD,ND,DIAGNR,IMM,IDOKU,LOUT
      DOUBLE PRECISION   HT
      LOGICAL  PARA, LX, LY, LZ
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NK    = IINFO(1)
      NX    = IINFO(2)
      NY    = IINFO(3)
      NZ    = IINFO(4)
      N     = IINFO(9)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      M222  = IINFO(14)
      IMM   = IINFO(16)
      NBDX  = IINFO(17)
      NBDY  = IINFO(18)
      NBDZ  = IINFO(19)
      IDMAX = IINFO(23)
C
      HT    = DINFO(IMM)
C
      PARA  = LINFO(1)
      LX    = LINFO(2)
      LY    = LINFO(3)
      LZ    = LINFO(4)
C
      IF(MIW.LT.3*IDMAX.OR.MDW.LT.M.OR.MDW.LT.14*MV) THEN
         IERR = 40
         RETURN
      ENDIF
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
      II13 = II12 + MV
      II14 = II13 + MV
C
      ID  = 0
      IFJ = 7
      IFF = 2
      IFD = 6
      IFM = ILIN(7)
      RNF = 22
      RND = 1
      MD  = 2 * M - 1
C
C***  UPPER BLOCK-DIAGONALS
C
C***  Z-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LZ) THEN
      DO 110  I = 1,NBDZ
         DIAGNR = I * NX * NY * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  110 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Z-BLOCK-DIAGONALS
C
      DO 120  I = 1,NBDZ
         DIAGNR = (NZ - (NBDZ + 1 - I)) * NX * NY * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  120 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      DO 130  I = 1,NBDY
         DIAGNR = (NZ - 1) * NX * NY * NK + I * NX * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  130 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Y-BLOCK-DIAGONALS
C
      DO 140  I = 1,NBDY
         DIAGNR = (NZ-1)*NX*NY*NK+(NY-(NBDY+1-I))*NX*NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  140 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      DO 150  I = 1,NBDX
         DIAGNR = (NZ-1)*NX*NY*NK+(NY-1)*NX*NK+I*NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,.FALSE.,IERR)
  150 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  X-BLOCK-DIAGONALS
C
      DO 160  I = 1,NBDX
         DIAGNR = M - (NBDX + 1 - I) * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,.FALSE.,IERR)
  160 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  MAIN-BLOCK-DIAGONAL
C
      DIAGNR = M
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .TRUE.,PARA,.TRUE.,.TRUE.,.TRUE.,IERR)
      IF(IERR.NE.0) RETURN
C
C***  LOWER BLOCK-DIAGONALS
C
C***  X-BLOCK-DIAGONALS
C
      DO 170  I = 1,NBDX
         DIAGNR = M + I * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,.FALSE.,IERR)
  170 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      DO 180  I = 1,NBDX
         DIAGNR = M + (NX - (NBDX + 1 - I)) * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,.FALSE.,IERR)
  180 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Y-BLOCK-DIAGONALS
C
      DO 190  I = 1,NBDY
         DIAGNR = M + I * NX * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  190 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      DO 200  I = 1,NBDY
         DIAGNR = M + (NY - (NBDY + 1 - I)) * NX * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  200 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Z-BLOCK-DIAGONALS
C
      DO 210  I = 1,NBDZ
         DIAGNR = M + I * NX * NY * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  210 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  Z-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LZ) THEN
      DO 220  I = 1,NBDZ
         DIAGNR = M + (NZ - (NBDZ + 1 - I)) * NX * NY * NK
         CALL FDSD41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),DW(II5),
     &   DW(II6),DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DW(II13),DW(II14),DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  220 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  MERGE THE DIAGONALPARTS TO COMPLETE DIAGONALS
C
      CALL FDS441(M,N,NK,ID,ND,MD,IW,LLIN,IFILE(IFD),MV,RL,
     &            UR(IFD),IFILE(IFM),UR(IFM),U1,DW,ILIN,IERR)
      IF(IERR.NE.0) RETURN
C
C***  INFORMATION FOR LINSOL
      ILIN(5) = ND
      ILIN(6) = 1
C
C***  THE OTHER COMPONENTS ARE DEFINED IN THE FIDISOL-MAINPROGRAMM
C
      IDOKU = ILIN(13)
      LOUT  = ILIN(12)
      IF(IDOKU.GE.3) WRITE(LOUT,1000) ID, ND
 1000 FORMAT(1X,I7,' DIAGONAL PARTS MERGED TO',
     &         I7,' DIAGONALS. (MATRIX COMPUTATION)')
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD40----------------------------------------------------
      E    N    D
C:::30    ,,,,,FDSD41.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSD41 (EPS,D,HT,HX,HXX,HY,HYY,HZ,HZZ,PU,PUT,PUX,
     &                   PUXX,PUY,PUYY,PUZ,PUZZ,DIAGNR,ID,IDIAG,
     &                   IDMAX,IFILE1,IFILE2,IFILE3,IN,MV,M222,
     &                   N,NK,RL,RN2,RN3,UR1,UR2,UR3,LU,LUT,LUX,
     &                   LUY,LUZ,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S D 4 1  COMPUTES NK * NK DIAGONALPARTS OF ONE BLOCK-  ***
C**      DIAGONAL. FROM FILE 1 THE ELEMENTS OF THE JACOBI-MATRICES  ***
C**      ARE READ. FROM FILE 2 THE IN FDS437 SORTED COEFFICIENTS    ***
C**      OF THE DIFFERENCE FORMULAE ARE READ. THE COMPUTED          ***
C**      DIAGONALPARTS ARE WRITTEN ON FILE 3.                       ***
C**      CAUTION : THE COEFFICIENTS OF THE DIFFERENCE FORMULAE      ***
C**      FOR EACH BLOCK-DIAGONAL MUST BE SORTED IN THAT WAY,        ***
C**      THAT THEY CAN BE READ SEQUENTIELLY OUT OF FILE 2.          ***
C**      THIS SUBROUTINE CAN BE USED FOR PARABOLIC AND ELLIPTIC     ***
C**      PROBLEMS.                                                  ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  DIAGNR,ID,IDMAX,IDIAG(3,IDMAX),IFILE1,IFILE2,IFILE3,
     &         IN,MV,M222,N,NK,RL,RN2,RN3,UR1,UR2,UR3,IERR
C**                                                                 ***
      DOUBLE PRECISION  EPS,D(N),HT,HX(MV),HXX(MV),HY(MV),HYY(MV),
     &                  HZ(MV),HZZ(MV),PU(MV),PUT(MV),PUX(MV),
     &                  PUXX(MV),PUY(MV),PUYY(MV),PUZ(MV),PUZZ(MV)
C**                                                                 ***
      LOGICAL  LU, LUT, LUX, LUY, LUZ
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C D      I  DP  I  -  I  WORKARRAY FOR 1 DIAGONALPART
C        I      I     I  ARRAY : D(N)
C--------I------I-----I------------------------------------------------
C HT     I  DP  I IN  I  COEFFICIENT FOR THE T-DERIVATIVE
C        I      I     I  ( IF PROBLEM IS PARABOLIC )
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKARRAYS FOR THE SORTED DIFFERENCE FORMULAE
C HY,HYY I      I     I  ARRAY : H..( MV )
C HZ,HZZ I      I     I
C--------I------I-----I------------------------------------------------
C PU,PUT I  DP  I  -  I  WORKARRAYS FOR THE ELEMENTS OF THE JACOBI-
C PUX,XX I      I     I  MATRICES
C PUY,YY I      I     I  ARRAYS : PU..( MV )
C PUZ,ZZ I      I     I
C--------I------I-----I------------------------------------------------
C DIAGNR I  I   I IN  I  ABSOLUTE DIAGONALNUMBER OF THE DIAGONALPART
C        I      I     I  FOR IGL = IKO = 1
C--------I------I-----I------------------------------------------------
C ID     I  I   I I/O I  NUMBER OF DIAGONALPARTS
C--------I------I-----I------------------------------------------------
C IDIAG  I  I   I OUT I  INFORMATION ABOUT THE DIAGONALPARTS
C        I      I     I  ARRAY : IDIAG( 3,IDMAX )
C--------I------I-----I------------------------------------------------
C IDMAX  I  I   I IN  I  ARRAYBOUND FOR IDIAG
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT NUMBERS OF THE FILES
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = (NX * NY * NZ) / MV ROUNDED UPON THE NEXT
C        I      I     I  INTEGER
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C        I      I     I  ( ELL : M222 = 7 , PAR : M222 = 8 )
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C RN2,3  I  I   I I/O I  RECORDNUMBERS FOR FILE 2 AND FILE 3
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C LU     I  L   I IN  I  = TRUE : MAIN-BLOCK-DIAGONAL
C--------I------I-----I------------------------------------------------
C LUT    I  L   I IN  I  = TRUE : PARABOLIC MAIN-BLOCK-DIAGONAL
C--------I------I-----I------------------------------------------------
C LUX,LUYI  L   I IN  I  = TRUE : X-,Y-,Z-BLOCK-DIAGONAL
C LUZ    I      I     I
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IGL,IKO,INKRP,IOS,J,NV,PFE,RNH,RNP,RNP1
      EXTERNAL  FDS318
      DOUBLE PRECISION  ZERO, FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**** START OF CALCULATION :
C     --------------------
C
      RNP1  = 1 - M222
      INKRP = NK * NK * M222
      DO 100 I = 1,MV
         PUT(I) = ZERO
  100 CONTINUE
      IF(IN.EQ.1) THEN
C        THE DIFF.FORMULAE-COEFF. ARE READ ONLY ONCE.
         IF(LUX) THEN
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HX ,N,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HXX,N,IERR,UR2)
         END IF
         IF(LUY) THEN
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HY ,N,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HYY,N,IERR,UR2)
         END IF
         IF(LUZ) THEN
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HZ ,N,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HZZ,N,IERR,UR2)
         END IF
      END IF
C
C***  LOOP OVER NK * NK DIAGONALPARTS
C
      DO 400 IGL = 1,NK
      DO 400 IKO = 1,NK
      RNP1 = RNP1 + M222
C
C***  LOOP OVER MV-PARTS
C
      RNH = RN2
      DO 300 J = 1,IN
         IA = (J - 1) * MV
         NV = MV
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
         RNP = RNP1 + (J - 1) * INKRP
         IF(LU) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PU,NV,IERR,UR1)
         ELSE
            RNP = RNP + 1
         END IF
         IF(LUX) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUX ,NV,IERR,UR1)
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUXX,NV,IERR,UR1)
         ELSE
            RNP = RNP + 2
         END IF
         IF(LUX.AND.IN.GT.1) THEN
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HX  ,NV,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HXX ,NV,IERR,UR2)
         END IF
         IF(LUY) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUY ,NV,IERR,UR1)
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUYY,NV,IERR,UR1)
         ELSE
            RNP = RNP + 2
         END IF
         IF(LUY.AND.IN.GT.1) THEN
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HY  ,NV,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HYY ,NV,IERR,UR2)
         END IF
         IF(LUZ) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUZ ,NV,IERR,UR1)
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUZZ,NV,IERR,UR1)
         ELSE
            RNP = RNP + 2
         END IF
         IF(LUZ.AND.IN.GT.1) THEN
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HZ  ,NV,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HZZ ,NV,IERR,UR2)
         END IF
         IF(LUT) CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUT,NV,IERR,UR1)
C
         IF(.NOT.LU) GO TO 210
C
C***     COMPUTE DIAGONALPART FOR MAIN BLOCK-DIAGONAL
C
         DO 200 I = 1,NV
         D(I+IA) = PU(I)+HX(I)*PUX(I)+HXX(I)*PUXX(I)
     &            +HY(I)*PUY(I)+HYY(I)*PUYY(I)+HZ(I)*PUZ(I)
     &            +HZZ(I)*PUZZ(I)+HT*PUT(I)
  200    CONTINUE
         GO TO 300
  210    IF(.NOT. LUX) GO TO 230
C
C***     COMPUTE DIAGONALPART FOR X-BLOCK-DIAGONAL
C
         DO 220 I = 1,NV
            D(I+IA) = HX(I)*PUX(I)+HXX(I)*PUXX(I)
  220    CONTINUE
         GO TO 300
  230    IF(.NOT. LUY) GO TO 250
C
C***     COMPUTE DIAGONALPART FOR Y-BLOCK-DIAGONAL
C
         DO 240 I = 1,NV
            D(I+IA) = HY(I)*PUY(I)+HYY(I)*PUYY(I)
  240    CONTINUE
         GO TO 300
  250    IF(.NOT. LUZ) GO TO 300
C
C***     COMPUTE DIAGONALPART FOR Z-BLOCK-DIAGONAL
C
         DO 260 I = 1,NV
            D(I+IA) = HZ(I)*PUZ(I)+HZZ(I)*PUZZ(I)
  260    CONTINUE
C
  300 CONTINUE
C
C***     IS THERE ANY DIAGONALVALUE NOTEQUAL ZERO ?
C
         IF(FDS101(N,D,ZERO).LE.EPS) GO TO 400
C
C***     INFORMATION ABOUT THE DIAGONALPART
C
         ID = ID + 1
         IF(ID.GT.IDMAX) THEN
            IERR = 41
            RETURN
         ENDIF
         IDIAG(1,ID) = DIAGNR - IKO + IGL
         IDIAG(2,ID) = IGL
         IDIAG(3,ID) = RN3
C
C***     WRITE DIAGONALPART ON FILE
C
         CALL FDS331(D,N,MV,IFILE3,RN3,RL,UR3,FDS318,IERR)
         IF(IERR.NE.0) RETURN
C
  400 CONTINUE
      IF(IN.GT.1)  RN2 = RNH
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSD41 ---------------------------------------------------
      E    N    D
C:::31    ,,,,,FDSE01.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSE01(IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,U1,U2,
     &                  IND,IERR,FDSU01,FDSU02,FDSU03,FDSU04,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 0 1    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 2-DIMENSIONAL ELLIPTIC DIFFERENTIAL***
C**      EQUATIONS IN A RECTANGULAR DOMAIN WITH PRESCRIBED GRID AND ***
C**      ORDER. ADDITIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSE01. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1)
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(30)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+5+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       ARRAY : LINFO(10+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I I/O I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  ESTIMATE FOR THE RELATIVE ERROR
C        I      I     I  ARRAY : U2(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER   II1,II2,II3,II4,II5,II6,II7,II8,IDUM,I,IBC(4),
     &          IDOKU,IN,IMM,IDMAX,IOS,LOUT,MNX,MNY,MV,MAXIT,MDW,
     &          MIW,M,MOX,MOY,MLF,M222,MT,M1,M2,M3,M10,M20,NCTRX,
     &          NCTRY,NK,NX,NY,NOX,NOY,N,RL,RL4,RLW,RN,UR(10),
     &          NOM,NOXX,NOYY
      DOUBLE PRECISION      TOL, ZERO, EPS, DFX(100), FDS001, A
      LOGICAL   LSTART, LX, LY, LRST
      EXTERNAL  FDS317,FDS318,
     &          FDS460,FDSF10,FDSF20,
     &          FDSE30,FDSF40
      CHARACTER TNAM*6,STA*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LSTART = LINFO(1)
      LX     = LINFO(2)
      LY     = LINFO(3)
      LRST   = LINFO(5)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      NOM    = IINFO(18)
      DO 10 I=1,4
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      N = NX * NY
      M = N * NK
      MOX = NOX + 4
      MOY = NOY + 4
      MLF = 2 * MAX(MOX,MOY) - 1
      RL  = MV
      RL4 = MAX(NX,NY)
      IN = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222 = 5
      MT   = 1
      IMM = MNX + MNY + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .FALSE.
      LINFO(5) = .FALSE.
C
      DINFO(IMM - 1) = ZERO
      DINFO(IMM)     = ZERO
C
      IERR = 0
C
      EPS = FDS001(A)
      TNAM = 'FDSE01'
C$$$  CALL FDS888(TNAM,NK,NX,NY,0,NOX,NOY,0,MV)
C
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 6*NK + (2+6*NK)*MV
      M20 = 1+NK + (7+5*NK)*MV
      M1  = MAX(M10,M20,4*MV+M)
      M2  = 3 * MV
      M3  = MAX(NX,NY,MAX(MNX,MNY)*MLF)
      CALL FDST02(LOUT,IFILE,2,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      M1 = 0
      IF(LX) M1 = M1 + 1
      IF(LY) M1 = M1 + 1
      IF(M1.GT.1) THEN
         IERR = 1
         WRITE(6,1005)
      ENDIF
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  OPEN TEMPORARY FILES
C
      STA='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STA='OLD'
      ENDIF
      RLW = RL
      CALL FDS300(IFILE(2) ,'FDS2',STA,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(3) ,'FDS3',STA,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STA,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(5) ,'FDS5',STA,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(6) ,'FDS6',STA,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(7) ,'FDS7',STA,'DIRECT',RLW,IOS,RN,UR(7))
      IF(IOS.NE.0) IERR=2
      RL = RLW
      CALL FDS300(IFILE(8) ,'FDS8',STA,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STA,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STA,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9) ,LOUT,IERR)
      IF(IERR.EQ.399) GO TO 600
      IF(IERR.EQ.2) GO TO 600
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
      WRITE(LOUT,1040) NX,NY,NOX,NOY,NK,EPS,MV
C
C***  COMPUTE THE DIFFERENCEFORMULAE FOR THE MATRIX
C
      IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY)) THEN
          NOXX = NOM
          NOYY = NOM
          WRITE(LOUT,1050) NOM
      ELSE
          NOXX = NOX
          NOYY = NOY
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      CALL FDSE12(IINFO,MNX,MNY,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),
     &     IFILE(2),UR(2),LX,LY,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      ENDIF
C
C***  INITIAL SOLUTION FOR THE NEWTON-ITERATION
C
      IF((LX.OR.LY).AND.LSTART) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS OF THE
C        INITIAL SOLUTION AND WRITE ON FILE 3
C
         CALL FDS427(MNX,MNY,NX,NY,NK,U1,U2)
         RN = 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      ELSE
         II1 = 1
         II2 = II1 + MV * NK
         II3 = II2 + MV * NK
         II4 = II3 + MV * NK
         II5 = II4 + MV
         CALL FDSE13(M,NX,NY,NK,MV,IFILE(3),RL,UR(3),ZERO,
     &        DINFO(1),DINFO(MNX+1),DW(II1),
     &        DW(II2),DW(II3),DW(II4),DW(II5),U1,U2,
     &        LSTART,LX,LY,FDSU02,IERR)
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  NEWTON-ITERATION
C
      CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST,MAXIT,LOUT,IND,IERR,
     &     FDSF10,FDSF20,FDSE30,FDSF40,FDSLIN,FDS460,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 500
C
C***  COMPUTATION OF THE ERROR OF THE SOLUTION
C
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,
     &     IW,MIW,DW,MDW,EPS,LOUT,IDUM,IERR,FDSLIN)
  500 RN = 1
      IF(LX.OR.LY) THEN
C
C***  ADD THE RIGHT ENDS IN THE PERIODIC DIRECTIONS.
C     THE VALUES ARE TAKEN FROM THE LEFT END.
C
         CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         CALL FDS428(NX,NY,NK,MNX,MNY,DW,U1)
         RN = 3 * IN * NK + 1
         CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         CALL FDS428(NX,NY,NK,MNX,MNY,DW,U2)
      ELSE
         CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
         RN = 3 * IN * NK + 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      ENDIF
  600 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSE01  -  VERSION FOR THE SOLUTION OF A',
     &       ' 2-DIMENSIONAL ELLIPTIC'/12X,'PDE SYSTEM WITH',
     &       ' PRESCRIBED GRID AND ORDER'/' ',70('*')/' ')
 1005 FORMAT(' 2 PERIODIC DIRECTIONS ARE NOT ALLOWED.'/
     &       ' THERE MUST EXIST AT LEAST ONE NONPERIODIC',
     &       ' DIRECTION.')
 1010 FORMAT(' TEST OF THE INPUT-PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT-PARAMETERS IN Y-DIRECTION')
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,2I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',2I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
C
      R E T U R N
C-----END OF FDSE01----------------------------------------------------
      E    N    D
C:::32    ,,,,,FDSE02.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE02(IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,U1,U2,
     &                  IND,IERR,FDSU01,FDSU02,FDSU03,FDSU04,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 0 2    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 2-DIMENSIONAL ELLIPTIC DIFFERENTIAL***
C**      EQUATIONS IN A RECTANGULAR DOMAIN WITH SELFADAPTED GRID AND***
C**      ORDER. ADDITIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSE02. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR
      DOUBLE PRECISION  DINFO(1),DW(1),U1(1),U2(1)
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(35)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(2*NXMAX+5+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR       ARRAY : LINFO(10+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I I/O I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I OUT I  ESTIMATE FOR THE RELATIVE ERROR
C        I      I     I  ARRAY : U2(NXMAX,NXMAX,NK)
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4  I      I     I  RAPHSON-METHOD.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  II1,II2,II3,II4,II5,II6,II7,II8,IDUM,
     &         IDOKU,IN,IMM,IDMAX,IOPT,IOS,LOUT,MNX,MNY,MV,MAXIT,
     &         MDI,MDW,MIW,M,MOX,MOY,NXMAX,MLF,M222,MT,M1,M2,M3,
     &         M10,M20,NCTRX,NCTRY,NK,NX,NY,NOX,NOY,RN3,
     &         N,RL,RL4,RLW,RN,UR(10),I,IBC(4),NOXX,NOYY,NOM,
     &         ID,IY,IMMOLD,RN4,PFE,NXN,NYN
      DOUBLE PRECISION 
     & TOL,ZERO,EPS,DFX(100),FDS001,FDS101,A,DUMAX,DUOLD,
     &         TWO,R01,HALF
      LOGICAL   LSTART, LX, LY, LRST, LOPT
      EXTERNAL  FDS317,FDS318,FDS460,
     &          FDSF10,FDSF20,FDSE30,
     &          FDSF40
      CHARACTER TNAM*6,STA*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0,TWO=2.0,R01=0.1,HALF=0.5 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LSTART = LINFO(1)
      LX     = LINFO(2)
      LY     = LINFO(3)
      LRST   = LINFO(5)
      LOPT   = LINFO(9)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      MOX    = IINFO(14)
      MOY    = IINFO(15)
      NXMAX  = IINFO(17)
      NOM    = IINFO(18)
*VOCL LOOP,SCALAR
      DO 10 I=1,4
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      N = NX * NY
      M = N * NK
      MOX = MAX(NOX,MOX) + 4
      MOY = MAX(NOY,MOY) + 4
      MLF = 2 * MAX(MOX,MOY) - 1
      RL  =  MV
      RL4 = NXMAX
      IN  = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222  = 5
      MT    = 1
      IMM   = MNX + MNY + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
      IINFO(26) = LOUT
      IINFO(28) = NXMAX
      IINFO(31) = MOX
      IINFO(32) = MOY
      IINFO(34) = NOX
      IINFO(35) = NOY
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .FALSE.
      LINFO(5) = .FALSE.
      LINFO(9) = .TRUE.
C
      IOPT     = 0
C
      DINFO(IMM - 1) = ZERO
      DINFO(IMM)     = ZERO
C
      IERR = 0
C
      EPS = FDS001(A)
      TNAM = 'FDSE02'
C$$$  CALL FDS888(TNAM,NK,NX,NY,0,NOX,NOY,0,MV)
C
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 6*NK + (2+6*NK)*MV
      M20 = 1 + NK + (7 + 5 * NK) * MV
      M1  = MAX(M10,M20,M+4*MV)
      M2  = 3 * MV
      M3  = MAX(NXMAX,NXMAX*MLF)
      CALL FDST02(LOUT,IFILE,1,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      M1 = 0
      IF(LX) M1 = M1 + 1
      IF(LY) M1 = M1 + 1
      IF(M1.GT.1) THEN
         IERR = 1
         WRITE(6,1005)
      ENDIF
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      IF(NXMAX.LT.MAX(MNX,MNY)) THEN
         IERR = 1
         WRITE(6,1035) NXMAX,MNX,MNY
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  OPEN TEMPORARY FILES
C
      STA='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STA='OLD'
      ENDIF
      CALL FDS300(IFILE(1) ,'FDS1',STA,'SEQUENTIAL',RLW,IOS,RN,UR(1))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(2) ,'FDS2',STA,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(3) ,'FDS3',STA,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STA,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(5) ,'FDS5',STA,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(6) ,'FDS6',STA,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW  = RL
      CALL FDS300(IFILE(7) ,'FDS7',STA,'DIRECT',RLW,IOS,RN,UR(7))
      RL   = RLW
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(8) ,'FDS8',STA,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STA,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STA,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9),LOUT,IERR)
      IF(IERR.EQ.399) GO TO 600
      IF(IERR.EQ.2) GO TO 600
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
      WRITE(LOUT,1040) NX,NY,NOX,NOY,NK,TOL,EPS,MV
C
C***  COMPUTE THE DIFFERENCEFORMULAE FOR THE MATRIX
C
  120 IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY)) THEN
          NOXX = NOM
          NOYY = NOM
          WRITE(LOUT,1050) NOM
      ELSE
          NOXX = NOX
          NOYY = NOY
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      CALL FDSE12(IINFO,MNX,MNY,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),
     &     IFILE(2),UR(2),LX,LY,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 600
      ENDIF
C
C***  INITIAL SOLUTION FOR THE NEWTON-ITERATION
C
      IF(IOPT.GT.0) GO TO 200
      IF(LSTART) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS AND PACK THE
C        VECTOR OF THE INITIAL SOLUTION AND WRITE ON FILE 3
C
         CALL FDS427(NXMAX,NXMAX,NX,NY,NK,U1,U2)
         RN = 1
         CALL FDS332(U2,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      ELSE
         II1 = 1
         II2 = II1 + MV * NK
         II3 = II2 + MV * NK
         II4 = II3 + MV * NK
         II5 = II4 + MV
         CALL FDSE13(M,NX,NY,NK,MV,IFILE(3),RL,UR(3),ZERO,
     &        DINFO(1),DINFO(MNX+1),DW(II1),
     &        DW(II2),DW(II3),DW(II4),DW(II5),U1,U2,
     &        LSTART,LX,LY,FDSU02,IERR)
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  NEWTON-ITERATION
C
  200 CALL FDS200(IINFO,DINFO,LINFO,ILIN,LLIN,IFILE,UR,IW,MIW,
     &     DW,MDW,U1,U2,DFX,EPS,TOL,LRST,MAXIT,LOUT,IND,IERR,
     &     FDSF10,FDSF20,FDSE30,FDSF40,FDSLIN,FDS460,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 500
C
C***  COMPUTATION OF THE ERROR OF THE SOLUTION
C
      CALL FDSA32(IINFO,LINFO,ILIN,LLIN,IFILE,UR,U1,N,NK,U2,
     &     IW,MIW,DW,MDW,EPS,LOUT,IDUM,IERR,FDSLIN)
      IF(IERR.NE.0.OR.IDUM.NE.1) GO TO 500
C
      RN3 = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
C
C***  COMPARE THE MAXIMUM RELATIVE ERROR WITH THE GIVEN TOLERANCE
C
      DUMAX = FDS101(M,DW,ZERO)
      IF(DUMAX.LE.TOL.AND..NOT.(LOPT.AND.DUMAX.LT.R01*TOL)) THEN
         WRITE(LOUT,1061) DUMAX,TOL
C        ***  SOLUTION ACCEPTED. ***
         GO TO 550
      ENDIF
      IF(IOPT.EQ.0)  GO TO 300
      IF(DUOLD.GT.TOL.AND.DUMAX.GT.TWO*DUOLD .OR.
     &      DUOLD.LT.R01*TOL.AND.DUMAX.LT.HALF*DUOLD)  THEN
         WRITE(LOUT,1062) TOL,DUMAX,DUOLD
C        ***  SOLUTION OF OLD OPTIMIZATION STEP IS BETTER. ***
         GO TO 650
      ENDIF
  300 IF(IOPT.GE.4) THEN
         WRITE(LOUT,1063) DUMAX,TOL
C        ***  MAXIMUM NUMBER OF OPTIMIZATION STEPS. ***
         GO TO 550
      ENDIF
      WRITE(LOUT,1064) DUMAX,TOL
C
C***  SAVE THE COMPUTED SOLUTION TOGETHER WITH THE ERROR ESTIMATE
C     AND THE INFORMATION VECTORS ON FILE 1
C
      MDI = MNX+MNY+5+2*NK
      CALL FDS305(IFILE(1),IOS,RN,UR(1))
      PFE = 1
      CALL FDS308(IFILE(1),IOS,RN,PFE,IINFO,35,UR(1))
      CALL FDS310(IFILE(1),IOS,RN,PFE,DINFO,MDI,UR(1))
      RN3 = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
      CALL FDS310(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      RN3 = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IDUM)
      CALL FDS310(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      IF(IOS.NE.0) THEN
         IERR = IFILE(1)*10000+310
         GO TO 550
      ENDIF
      IOPT = IOPT + 1
C
C***  CONTROL OF THE ORDERS IN BV-DIRECTION
C
      CALL FDSE51(IINFO,DINFO,LINFO,IBC,ILIN,LLIN,IFILE,UR,U1,N,NK,
     *            U2,IW,MIW,DW,MDW,EPS,TOL,IERR,FDSLIN)
      IF(IERR.NE.0) GO TO 650
C
C***  COMPUTATION OF A NEW NONEQUIDISTANT 2-D GRID
C
      CALL FDSE52(IINFO,DINFO,LINFO,IW,DW,U1,U2,NXN,NYN,
     *            .FALSE.,.TRUE.,EPS,TOL,IFILE,UR,IERR)
      IF(IERR.NE.0) GO TO 650
      M1 = NK*NXN*NYN + 4*MV
      IF (MDW.LT.M1) THEN
        IERR = 1
        WRITE(LOUT,1065) MDW,M1
        GO TO 650
      END IF
C
C***  INTERPOLATION OF THE SOLUTION INTO THE NEW GRID
C
      RN = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS428(NX,NY,NK,MNX,MNY,DW,U1)
C
      NOX = IINFO(34)+1
      NOY = IINFO(35)+1
C
C***  READ NEW GRID FROM FILE 4
C
      RN4 = 1
      CALL FDS317(IFILE(4),IOS,RN4,RL4,PFE,DW(1),NXN,IDUM,UR(4))
      IY = 1 + NXN
      CALL FDS317(IFILE(4),IOS,RN4,RL4,PFE,DW(IY),NYN,IDUM,UR(4))
      ID = IY + NYN
      M1 = MDW - NXN - NYN
C
C***  CALL THE INTERPOLATION-SUBROUTINE (ORDER NOX+1)
C
      CALL FDSE70(DW(ID),IW,M1,MIW,NK,MNX,MNY,NXN,NYN,NOX,NOY,
     &            DINFO(1),DINFO(1+MNX),DW(1),DW(IY),U1,U2,IERR)
      IF(IERR.NE.0) GO TO 650
C
C***  RE-ORGANIZE INFORMATION-VECTORS FOR THE NEXT SOLUTION STEP
C
      IMMOLD = IMM
      MNX    = NXN
      MNY    = NYN
      NX     = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      N  = NX * NY
      M  = N * NK
      IN = N / MV
      IF(N-IN*MV.GT.0) IN = IN + 1
      IMM = MNX + MNY + 2
C
      M1 = 5 + 2 * NK
      IF(IMM.GT.IMMOLD) THEN
         DO 410 I=M1,1,-1
            DINFO(IMM-2+I) = DINFO(IMMOLD-2+I)
  410    CONTINUE
      ELSEIF(IMM.LT.IMMOLD) THEN
         DO 420 I=1,M1
            DINFO(IMM-2+I) = DINFO(IMMOLD-2+I)
  420    CONTINUE
      ENDIF
C
      M1 = MNX + MNY
      DO 430 I = 1,M1
         DINFO(I) = DW(I)
  430 CONTINUE
C
      IINFO( 2) = NX
      IINFO( 3) = NY
      IINFO( 5) = MNX
      IINFO( 6) = MNY
      IINFO( 9) = N
      IINFO(10) = M
      IINFO(13) = IN
      IINFO(16) = IMM
C
      ILIN(3) = M
      ILIN(4) = 2 * M - 1
C
      DINFO(IMM-1) = ZERO
      DINFO(IMM  ) = ZERO
      NOX  = NOX - 1
      NOY  = NOY - 1
C
      WRITE(LOUT,1070) IOPT,NX,NY,NOX,NOY,TOL
C
C***  INITIAL SOLUTION FOR THE NEXT ITERATION
C
      CALL FDS427(MNX,MNY,NX,NY,NK,U2,U1)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS318,IERR)
      DUOLD = DUMAX
C
      GO TO 120
C
  500 IF(IOPT.GT.0) GO TO 650
  550 RN = 1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS429(NX,NY,NK,MNX,MNY,NXMAX,DW,U1)
      RN = 3*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IDUM)
      CALL FDS429(NX,NY,NK,MNX,MNY,NXMAX,DW,U2)
      GO TO 900
  600 IF(IOPT.EQ.0) GO TO 900
  650 CALL FDS305(IFILE(1),IOS,RN,UR(1))
      PFE = 1
C
C***  READ COMPUTED SOLUTION TOGETHER WITH THE ERROR ESTIMATE
C     AND THE INFORMATION VECTORS FROM FILE 1
C
      CALL FDS307(IFILE(1),IOS,RN,PFE,IINFO,35,UR(1))
      NX   = IINFO(2)
      NY   = IINFO(3)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      N    = IINFO(9)
      M    = IINFO(10)
      NOX  = IINFO(34)
      NOY  = IINFO(35)
      MDI  = MNX+MNY+5+2*NK
C
      CALL FDS309(IFILE(1),IOS,RN,PFE,DINFO,MDI,UR(1))
      CALL FDS309(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      CALL FDS429(NX,NY,NK,MNX,MNY,NXMAX,DW,U1)
      CALL FDS309(IFILE(1),IOS,RN,PFE,DW,M,UR(1))
      CALL FDS429(NX,NY,NK,MNX,MNY,NXMAX,DW,U2)
      IOPT = IOPT - 1
      DUMAX = FDS101(M,DW,ZERO)
      WRITE(LOUT,1080) IOPT,NX,NY,NOX,NOY,DUMAX
  900 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSE02  -  VERSION FOR THE SOLUTION OF A',
     &       ' 2-DIMENSIONAL ELLIPTIC'/12X,'PDE-SYSTEM WITH',
     &       ' SELF-ADAPTED GRID AND ORDER'/12X,'FOR A GIVEN TOLERANCE'
     &       /' ',70('*')/' ')
 1005 FORMAT(' 2 PERIODIC DIRECTIONS ARE NOT ALLOWED.'/
     &       ' THERE MUST EXIST AT LEAST ONE NONPERIODIC',
     &       ' DIRECTION.')
 1010 FORMAT(' TEST OF THE INPUT PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT PARAMETERS IN Y-DIRECTION')
 1035 FORMAT(' NXMAX =',I5,' MUST BE GREATER/EQUAL',
     &       ' NX AND NY :',2I5)
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,2I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',2I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' TOLERANCE         TOL =',G16.4/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
 1061 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &        ' **** SOLUTION ACCEPTED. ****'/' ')
 1062 FORMAT(/' TOLERANCE:                ',G15.2/
     &        ' ERROR OF THE NEW SOLUTION:',G15.2/
     &        ' ERROR OF THE OLD SOLUTION:',G15.2/
     &        ' **** OLD SOLUTION ACCEPTED. ****'/' ')
 1063 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &       ' ** MAXIMUM NUMBER OF OPTIMIZATION STEPS IS REACHED. **'/
     &       ' **** SOLUTION ACCEPTED. ****'/' ')
 1064 FORMAT(/' MAXIMUM RELATIVE ERROR:',G15.2/
     &        ' TOLERANCE:             ',G15.2/
     &        ' **** SOLUTION NOT ACCEPTED. ****'/' ')
 1065 FORMAT(' MDW =',I8,' MUST BE GREATER/EQUAL',I8)
 1070 FORMAT(' OPTIMIZATION STEP:',I4/' ',22('-')/
     &       ' NUMBERS OF GRID POINTS:',11X,2I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',2I10/
     &       ' TOLERANCE         TOL = ',G16.4/)
 1080 FORMAT(' '/' SOLUTION OF OPTIMIZATION STEP:',I4,
     &         ' HAS BEEN LOADED.'/
     &         ' NUMBERS OF GRID POINTS:',11X,2I10/
     &         ' ORDERS OF THE DIFFERENCE FORMULAE:',2I10/
     &         ' MAXIMUM RELATIVE ERROR: ',G15.4/)
C
      R E T U R N
C-----END OF FDSE02----------------------------------------------------
      E    N    D
C:::33    ,,,,,FDSE12.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE12 (IINFO,MNX,MNY,MLF,MV,ABX,ABXX,ABY,ABYY,
     &           HX,HXX,HY,HYY,IFILE,UR,LX,LY,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 1 2    READS THE DIFFERENCE-FORMULAE FOR THE FIRST ***
C**      AND SECOND DERIVATIVE IN THE X- AND Y- DIRECTION AND       ***
C**      CALLS SUBROUTINE FDS426 FOR EACH SORT OF BLOCK-DIAGONALS   ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),MNX,MNY,MLF,MV,IFILE,UR,IERR
      DOUBLE PRECISION  ABX(MNX,MLF),ABXX(MNX,MLF),ABY(MNY,MLF),
     &                  ABYY(MNY,MLF),HX(MV),HXX(MV),HY(MV),HYY(MV)
      LOGICAL  LX, LY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I I/O I  INFORMATION-VECTOR            ARRAY: IINFO(18)
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MLF    I      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C ABX,XX I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE X-DIRECTION
C        I      I     I  ARRAYS : ABX(MNX,MLF) , ABXX(MNX,MLF)
C--------I------I-----I------------------------------------------------
C ABY,YY I  DP  I  -  I  DIFFERENCE-FORMULAE IN THE Y-DIRECTION
C        I      I     I  ARRAYS : ABY(MNY,MLF) , ABYY(MNY,MLF)
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKAREAS FOR THE SORTED
C HY,HYY I      I     I  FORMULAES (MV VALUES)
C        I      I     I  ARRAYS : H..(MV)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBER OF FILE
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  FOR PARALLEL I/O-ACTIVITY
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  = TRUE INDICATES, WHETHER THE DIRECTION
C        I      I     I    IS PERIODIC
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  NX,NY,NCTRX,NCTRY,NBDX,NBDY,RL,
     &         RN,IOS,PFE,IXEN,IYEN,NH1(2),NH2
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NX     = IINFO(2)
      NY     = IINFO(3)
      RL     = IINFO(12)
      NCTRX  = IINFO(17)
      NCTRY  = IINFO(18)
      NH1(1)=0
      NH1(2)=0
C
C***  READ THE DIFFERENCE FORMULAE IN ONE DIMENSIONAL FORM.
C
      RN = 4
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABX ,MNX*MLF,IERR,UR)
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABXX,MNX*MLF,IERR,UR)
      RN = 11
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABY ,MNY*MLF,IERR,UR)
      CALL FDS317(IFILE,IOS,RN,RL,PFE,ABYY,MNY*MLF,IERR,UR)
C
      NBDX = NCTRX-3
      NBDY = NCTRY-3
      IF(LX) NBDX=NCTRX-2
      IF(LY) NBDY=NCTRY-2
      IINFO(17) = NBDX
      IINFO(18) = NBDY
      IXEN = NCTRX+NBDX
      IYEN = NCTRY+NBDY
      RN = 15
C
C***  UPPER BLOCK-DIAGONALS
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      NH1(2) = NCTRY
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .FALSE.,.TRUE.,LY,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,NBDY,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Y-BLOCK-DIAGONALS
C
      NH1(2) = IYEN + 1
      NH2 = NY - IYEN + NCTRY - 1
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .FALSE.,.TRUE.,LY,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDY,IERR)
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      NH1(1) = NCTRX
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .TRUE.,.FALSE.,LX,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,NBDX,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  X-BLOCK-DIAGONALS
C
      NH1(1) = IXEN + 1
      NH2 = NX - IXEN + NCTRX - 1
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .TRUE.,.FALSE.,LX,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDX,IERR)
      IF(IERR.NE.0) RETURN
C
C***  MAIN BLOCK-DIAGONALS
C
      NH1(1) = NCTRX + 1
      NH1(2) = NCTRY + 1
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .TRUE.,.TRUE.,.FALSE.,.FALSE.,
     &            IFILE,RL,RN,UR,NH1,0,1,IERR)
      IF(IERR.NE.0) RETURN
C
C***  LOWER BLOCK-DIAGONALS
C
C***  X-BLOCK-DIAGONALS
C
      NH1(1) = NCTRX
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,LX,
     &            IFILE,RL,RN,UR,NH1,0,NBDX,IERR)
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      NH1(1) = IXEN + 1
      NH2 = NX - IXEN + NCTRX - 1
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .TRUE.,.FALSE.,.FALSE.,LX,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDX,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***  Y-BLOCK-DIAGONALS
C
      NH1(2) = NCTRY
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,LY,
     &            IFILE,RL,RN,UR,NH1,0,NBDY,IERR)
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      NH1(2) = IYEN + 1
      NH2 = NY - IYEN + NCTRY - 1
      CALL FDS426(ABX,ABXX,ABY,ABYY,HX,HXX,HY,HYY,
     &            NX,NY,MNX,MNY,MLF,MV,
     &            .FALSE.,.TRUE.,.FALSE.,LY,
     &            IFILE,RL,RN,UR,NH1,NH2,NBDY,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSE12----------------------------------------------------
      E    N    D
C:::34    ,,,,,FDSE13.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE13 (M,NX,NY,NK,MV,IFILE3,RL,UR3,T,X,Y,
     &           PA,PE,PU,PX,PY,U1,U2,LSTART,LX,LY,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 1 3    COMPUTES AND SORTS THE INITIAL VALUES FOR   ***
C**      THE NEWTON-ITERATION OF A 2-DIMENSIONAL ELLIPTIC PROBLEM.  ***
C**      THE USER CAN GIVE AN INITIAL SOLUTION IN U1 AND WITH       ***
C**      LSTART=T. FINALLY THE INITIAL VALUES ARE WRITTEN ON FILE3  ***
C**      IN PARTS OF MV VALUES. ONLY NONPERIODIC DIRECTIONS ARE     ***
C**      TAKEN FOR THE INTERPOLATION.                               ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  M, NX, NY, NK, MV, IFILE3, RL, UR3, IERR
      DOUBLE PRECISION  T, X(NX), Y(NY), PA(MV,NK), PE(MV,NK),
     &       PU(MV,NK), PX(MV), PY(MV), U1(M), U2(M)
      LOGICAL LSTART,LX,LY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C M      I  I   I IN  I  = NX * NY * NK
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C IFILE3 I  I   I IN  I  UNIT-NUMBER OF FILE3
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD-LENGTH IN INTEGER WORDS
C--------I------I-----I------------------------------------------------
C UR3    I  I   I I/O I  SYNCHRONISATION-VARIABLE FOR PARALLEL I/O
C--------I------I-----I------------------------------------------------
C LSTART I  L   I IN  I  IF LSTART=TRUE THE USER HAS GIVEN AN INITIAL
C        I      I     I  SOLUTION
C--------I------I-----I------------------------------------------------
C T,X,Y  I  DP  I IN  I  COORDINATES FOR THE INITIAL SOLUTION.
C        I      I     I  ARRAYS: X(NX),Y(NY)
C--------I------I-----I------------------------------------------------
C PA,PE, I  DP  I  -  I  WORKAREAS FOR THE DEFECT ON 2 BOUNDARIES
C PU     I      I     I  ARRAYS: PA/E/U(MV,NK)
C--------I------I-----I------------------------------------------------
C PX,PY  I  DP  I  -  I  WORKAREAS FOR THE COORDINATES ON 1 BOUNDARY
C        I      I     I  ARRAYS: PX/Y(MV)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  WORKAREAS FOR THE INITIAL SOLUTION
C        I      I IN  I  IF LSTART=TRUE  THE USER CAN GIVE AN
C        I      I     I  INITIAL SOLUTION IN U1(NX,NY,NK)
C        I      I     I  ARRAYS: U1/2(M)
C--------I------I-----I------------------------------------------------
C LX,LY  I  L   I IN  I  =TRUE INDICATES A PERIODIC DIRECTION
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-DEFECT.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER I, IA, IK, K, MVL, NV, RN, IRAND, IZ
      DOUBLE PRECISION FAK,ZERO,ONE
      EXTERNAL FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO=0.0,ONE=1.0,MVL=65535 )
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      IF(LSTART) GO TO 170
C
C***  INITIALIZATIONS
C
      K=0
  80  IA=K
      NV=MIN(M-K,MVL)
      K=K+NV
      DO 90 I=1,NV
        U1(I+IA)=ZERO
        U2(I+IA)=ZERO
  90  CONTINUE
      IF(K.LT.M) GO TO 80
      DO 100 IK=1,NK
      DO 100 I=1,MV
        PU(I,IK)=ZERO
 100  CONTINUE
      IZ=2
      IF(LX) IZ=IZ-1
      IF(LY) IZ=IZ-1
      IF(IZ.EQ.0) GO TO 170
      FAK=ONE/IZ
      IF(LX) GO TO 125
C
C***  BOUNDARY X=XAN
C
      IRAND=1
      DO 110 I=1,NY
        PX(I)=X(1)
        PY(I)=Y(I)
 110  CONTINUE
C
C***  COMPUTE THE DEFECT FOR X=XAN
C
      CALL FDSU02(IRAND,T,PX,PY,PU,PU,PU,PU,PU,PU,PA,MV,MV,NK,NY)
C
C***  BOUNDARY X=XEN
C
      IRAND=2
      DO 120 I=1,NY
        PX(I)=X(NX)
 120  CONTINUE
C
C***  COMPUTE THE DEFECT FOR X=XEN
C
      CALL FDSU02(IRAND,T,PX,PY,PU,PU,PU,PU,PU,PU,PE,MV,MV,NK,NY)
C
C***  COMPUTE THE INTERPOLATION IN X-DIRECTION
C
      CALL FDS420(NY,NX,NK,MV,FAK,PA,PE,X,U2)
C
C***  SORTING OF U2(NY,NX,NK) IN U1(NX,NY,NK)
C
      CALL FDS421(NY,NX,NK,U2,U1)
 125  IF(LY) GO TO 170
C
C***  BOUNDARY Y=YAN
C
      IRAND=3
      DO 130 I=1,NX
        PX(I)=X(I)
        PY(I)=Y(1)
 130  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Y=YAN
C
      CALL FDSU02(IRAND,T,PX,PY,PU,PU,PU,PU,PU,PU,PA,MV,MV,NK,NX)
C
C***  BOUNDARY Y=YEN
C
      IRAND=4
      DO 140 I=1,NX
        PY(I)=Y(NY)
 140  CONTINUE
C
C***  COMPUTE THE DEFECT FOR Y=YEN
C
      CALL FDSU02(IRAND,T,PX,PY,PU,PU,PU,PU,PU,PU,PE,MV,MV,NK,NX)
C
C***  COMPUTE AND ADD THE INTERPOLATION IN Y-DIRECTION
C
      CALL FDS420(NX,NY,NK,MV,FAK,PA,PE,Y,U1)
C
C***  THE INITIAL SOLUTION IS COMPLETE
C
 170  RN=1
C
C***  WRITING OF THE INITIAL SOLUTION U1 IN PARTS OF MV VALUES ON FILE3
C
      CALL FDS332(U1,NX*NY,NK,MV,IFILE3,RN,RL,UR3,FDS318,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSE13----------------------------------------------------
      E    N    D
C:::35    ,,,,,FDSE14.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSE14(N,NX,NY,NK,MNX,MNY,MLF,MV,M222,
     &           IN,NA,NFA,NFL,FDFORM,U1,U2,U222,IFILE2,IFILE3,
     &           IFILE4,IFILE5,UR2,UR3,UR4,UR5,RL,RL4,LERR,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 1 4    COMPUTES THE FIRST AND SECOND DERIVATIVES   ***
C**      IN THE X-AND Y-DIRECTION.                                  ***
C**      FROM FILE 2 THE DIFFERENCE FORMULAE ARE READ.              ***
C**      FROM FILE 3 THE SOLUTION IN THE SUITING SORTING IS READ.   ***
C**      ON FILE 4 THE DERIVATIVES ON THE BOUNDARY-LINES ARE        ***
C**      WRITTEN.                                                   ***
C**      ON FILE 5 THE DERIVATIVES FOR THE WHOLE GRID ARE WRITTEN.  ***
C**      FOR RECORD NUMBERS SEE FILE-CATALOG.                       ***
C**      IN ARRAY U222(M222,NK) THE DUMMY-VALUES OF THE DERIVATIVES ***
C**      AT GRIDPOINT (2,2) ARE WRITTEN.                            ***
C**      FDSE14 CAN ALSO BE USED TO COMPUTE THE ERRORS OF THE       ***
C**      DERIVATIVES. THEN FILE 4 IS NOT USED AND FILE 5 MUST HAVE  ***
C**      ANOTHER UNIT-NUMBER AS FOR COMPUTING THE DERIVATIVES.      ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
C
      INTEGER  N,NX,NY,NK,MNX,MNY,MLF,MV,M222,IN,NA(MV),NFA(MV),RL4,
     &    NFL(MV),IFILE2,IFILE3,IFILE4,IFILE5,UR2,UR3,UR4,UR5,RL,IERR
C
      LOGICAL  LERR
C
      DOUBLE PRECISION  FDFORM(MV),U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID-POINTS IN THE X-,Y-
C        I      I     I  DIRECTION
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MNX,MNYI  I   I IN  I  ARRAY BOUNDS FOR THE DIFFERENCE FORMULAE
C MLF    I      I     I
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  ARRAY BOUND FOR U222
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = ( NX * NY ) / MV ROUNDED UPON
C        I      I     I  THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C NA,NFA,I  I   I  -  I  INFORMATION ARRAYS FOR THE DIFFERENCE FORMULAE
C NFL    I      I     I  ARRAYS : NA(MV),NFA(MV),NFL(MV)
C--------I------I-----I------------------------------------------------
C FDFORM I  DP  I     I  ARRAY FOR THE DIFFERENCE FORMULAE
C        I      I     I  ARRAY : FDFORM(MV),
C        I      I     I  CAUTION : MV >= MAX(MNX,MNY) * MLF
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  2 VECTORS OF LENGTH N * NK
C        I      I     I  ARRAYS : U1(N,NK) , U2(N,NK)
C--------I------I-----I------------------------------------------------
C U222   I  DP  I OUT I  DUMMY-VALUES AT GRIDPOINT (2,2)
C        I      I     I  ARRAY : U222(M222,NK)
C--------I------I-----I------------------------------------------------
C IFILE2,I  I   I IN  I  UNITNUMBERS
C 3,4,5  I      I     I
C--------I------I-----I------------------------------------------------
C UR2,3, I  I   I I/O I  SYNCHRONISATION-VARIABLES FOR
C   4,5  I      I     I  PARALLEL I/O
C--------I------I-----I------------------------------------------------
C RL,RL4 I  I   I IN  I  RECORD LENGTH   (RL4 FOR FILE 4)
C--------I------I-----I------------------------------------------------
C LERR   I  L   I IN  I  IF LERR = TRUE  THE ERRORS OF THE
C        I      I     I  DERIVATIVES HAVE TO BE COMPUTED.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C
      INTEGER ABL,I,IK,I222,IOS,PFE,RN2,RN3,RN4,RN5
C
      EXTERNAL FDS317,FDS318
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  COMPUTATION OF THE X-DERIVATIVES
C
      I222=1
      RN2=1
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NA ,NX,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFA,NX,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFL,NX,IERR,UR2)
      IF(LERR)  RN2 = RN2 + 2
      ABL=1
      RN4=4*NK+1
      RN5=1
    5 RN3=NK*IN+1
C
C***  READ SOLUTION IN Y-X-SORTING
C
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***  READ DIFFERENCE FORMULAE
C
      CALL FDS317(IFILE2,IOS,RN2,RL,PFE,FDFORM,MNX*MLF,IERR,UR2)
C
C***   COMPUTE THE DERIVATIVES FOR THE WHOLE GRID
C
      CALL FDS025(NY,NX,NK,MNX,MLF,NA,NFA,NFL,FDFORM,U1,U2)
      IF(LERR)  GOTO 25
      I222=I222+1
      I=NY+2
      DO 8 IK=1,NK
    8 U222(I222,IK)=U2(I,IK)
C
C***   BOUNDARY-LINES X = X(1) , X = X(NX)
C
      DO 10 IK=1,NK
   10 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY,IERR,UR4)
      I=(NX-1)*NY+1
      DO 20 IK=1,NK
   20 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NY,IERR,UR4)
   25 CALL FDS421(NY,NX,NK,U2,U1)
      IF(LERR)  GO TO 65
C
C***   BOUNDARY-LINES Y = Y(1) , Y = Y(NY)
C
      DO 30 IK=1,NK
   30 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX,IERR,UR4)
      I=(NY-1)*NX+1
      DO 40 IK=1,NK
   40 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(I,IK),NX,IERR,UR4)
C
C***   WRITE THE DERIVATIVES FOR THE WHOLE GRID IN X-Y-SORTING
C
   65 CALL FDS332(U1,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(ABL.EQ.1) THEN
         ABL=2
         GO TO 5
      ENDIF
C
C***  COMPUTATION OF THE Y-DERIVATIVES
C
      RN2=8
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NA ,NY,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFA,NY,IERR,UR2)
      CALL FDS315(IFILE2,IOS,RN2,RL,PFE,NFL,NY,IERR,UR2)
      IF(LERR)  RN2 = RN2 + 2
      ABL=1
      RN4=3*4*NK+2*NK+1
  105 RN3=1
C
C***   READ SOLUTION IN X-Y-SORTING
C
      CALL FDS332(U1,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***   READ DIFFERENCE FORMULAE
C
      CALL FDS317(IFILE2,IOS,RN2,RL,PFE,FDFORM,MNY*MLF,IERR,UR2)
C
C***   COMPUTE THE DERIVATIVES FOR THE WHOLE GRID
C
      CALL FDS025(NX,NY,NK,MNY,MLF,NA,NFA,NFL,FDFORM,U1,U2)
      IF(LERR)  GO TO 145
      I222=I222+1
      I=NX+2
      DO 108 IK=1,NK
  108 U222(I222,IK)=U2(I,IK)
C
C***   BOUNDARY-LINES Y = Y(1) , Y = Y(NY)
C
      DO 110 IK=1,NK
  110 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NX,IERR,UR4)
      I=(NY-1)*NX+1
      DO 120 IK=1,NK
  120 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(I,IK),NX,IERR,UR4)
C
C***   WRITE THE DERIVATIVES FOR THE WHOLE GRID IN X-Y-SORTING
C
  145 CALL FDS332(U2,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(LERR)  GO TO 165
      CALL FDS421(NX,NY,NK,U2,U1)
      RN4=RN4-4*NK
C
C***   BOUNDARY-LINES X = X(1) , X = X(NX)
C
      DO 150 IK=1,NK
  150 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NY,IERR,UR4)
      I=(NX-1)*NY+1
      DO 160 IK=1,NK
  160 CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(I,IK),NY,IERR,UR4)
  165 IF(ABL.EQ.1) THEN
         ABL=2
         RN4=4*4*NK+2*NK+1
         GO TO 105
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSE14----------------------------------------------------
      E    N    D
C:::36    ,,,,,FDSE30.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE30 (EPSDEF,DFX,TOLEQ,IINFO,DINFO,LINFO,
     &           IFILE,UR,U1,U2,IWORK,MIW,DWORK,MDW,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 3 0   STOPPING CRITERION FOR THE NEWTON-ITERATION. ***
C**      IN FDSE30 THE DISCRETIZATION-ERRORS ON THE LEVEL OF        ***
C**      EQUATION ARE COMPUTED AND STORED ON FILE FOR THE LATER     ***
C**      COMPUTATION OF THE ERROR OF THE SOLUTION. THE STOPPING     ***
C**      CRITERION IS COMPUTED OF THE MAXIMUM OF THE                ***
C**      DISCRETIZATION-ERROR AND THE TOLERANCE ON THE LEVEL OF     ***
C**      EQUATION.                                                  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IWORK(1),MIW,MDW,IERR
      DOUBLE PRECISION  EPSDEF,DFX(1),TOLEQ,DINFO(1),U1(1),U2(1),
     &                  DWORK(1)
      LOGICAL  LINFO(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPSDEF I  DP  I OUT I  STOPPING CRITERION FOR THE NEWTON-ITERATION
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I I/O I  MAXIMUM OF THE DISCRETISATION-ERROR ON THE
C        I      I     I  LEVEL OF EQUATION.         ARRAY : DFX(NK)
C--------I------I-----I------------------------------------------------
C TOLEQ  I  DP  I IN  I  TOLERANCE ON THE LEVEL OF EQUATION.
C        I      I     I  CONTROL OF THE ORDERS, IF TOLEQ LESS THAN ZERO
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR        ARRAY : IINFO(14)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I  -  I  NOT USED
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR        ARRAY : LINFO(5)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS              ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES.     ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR COMPLETE SOLUTION
C        I      I     I  ARRAYS : U1(M) , U2(M)
C--------I------I-----I------------------------------------------------
C IWORK  I  I   I  -  I  INTEGER WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IWORK ( MIW >= 3 * MV )
C--------I------I-----I------------------------------------------------
C DWORK  I  DP  I  -  I  REAL WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DWORK  (MDW >= (8 + 3 * NK) * MV)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  NK,NX,NY,MNX,MNY,MLF,N,MV,RL,IN,M222,
     &         II1,II2,II3,II4,II7,II8,II9,II10,II13,II14,II16
      DOUBLE PRECISION  TEN, ZERO, FDS101, DFMAX
      LOGICAL  LORD
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( TEN = 10.0 , ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NK   = IINFO(1)
C
      IF(LINFO(5))  GO TO 100
C
      NX   = IINFO(2)
      NY   = IINFO(3)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      MLF  = IINFO(8)
      N    = IINFO(9)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
C
      IF(MIW.LT.3*MV.OR.MDW.LT.(8+3*NK)*MV) THEN
         IERR = 30
         RETURN
      ENDIF
C
      II1 = 1 + M222 * NK
      II2 = 1 + MV
      II3 = II2 + MV
C
C***  COMPUTATION OF THE DISCRETIZATION-ERRORS
C
      CALL FDSE14(N,NX,NY,NK,MNX,MNY,MLF,MV,M222,IN,
     &            IWORK(1),IWORK(II2),IWORK(II3),DWORK(II1),
     &            U1,U2,DWORK(1),IFILE(2),IFILE(3),IFILE(6),
     &            IFILE(6),UR(2),UR(3),UR(6),UR(6),RL,RL,.TRUE.,
     &            IERR)
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II7  = II4  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II13 = II10 + MV
      II14 = II13 + MV * NK
      II16 = II14 + MV * NK
C
C***  COMPUTATION OF THE X-Y-DISCRETIZATION-ERROR ON THE
C     LEVEL OF EQUATION, THE SUM AND THE MAXIMUM
C
      LORD = TOLEQ .LT. ZERO
      CALL FDSE31(N,NK,MV,M222,IN,IFILE(6),IFILE(7),IFILE(5),
     &            0,0,0,RL,UR(6),UR(7),UR(5),DWORK(II1),
     &            DWORK(II2),DWORK(II3),DWORK(II4),DWORK(II7),
     &            DWORK(II8),DWORK(II9),DWORK(II10),DWORK(II13),
     &            DWORK(II14),DWORK(II16),DFX,LORD,IERR)
C
C***  COMPUTE THE STOPPING CRITERION FOR THE NEWTON-ITERATION
C
  100 DFMAX  = FDS101(NK,DFX,ZERO)
      EPSDEF = MAX(TOLEQ,DFMAX) / TEN
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSE30----------------------------------------------------
      E    N    D
C:::37    ,,,,,FDSE31.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE31 (N,NK,MV,M222,IN,IFILE1,IFILE2,IFILE3,
     &           RA1,RA2,RA3,RL,UR1,UR2,UR3,DUX,DUXX,DUY,DUYY,
     &           PUX,PUXX,PUY,PUYY,DX,DY,DF,DFX,LORD,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 3 1    READS THE DISCRETIZATION-ERRORS FOR THE     ***
C**      X,XX,Y,YY-DERIVATIVES, WHICH WERE COMPUTED IN FDSE14,      ***
C**      FROM FILE1 AND THE JACOBI-MATRICES FROM FILE 2. THEN THE   ***
C**      X-,Y-DISCRETIZATION-ERRORS ON THE LEVEL OF EQUATION,       ***
C**      THE SUM PER EQUATION AND THE MAXIMUM OVER ALL GRIDPOINTS   ***
C**      AND SOLUTION COMPONENTS ARE COMPUTED AND STORED ON FILE 3. ***
C**      FOR THE CONTROL OF THE ORDERS (LORD = TRUE) ONLY THE       ***
C**      SEPARATED ERRORS ARE COMPUTED.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N,NK,MV,M222,IN,IFILE1,IFILE2,IFILE3,RA1,RA2,RA3,
     &         RL,UR1,UR2,UR3,IERR
      DOUBLE PRECISION  DUX(MV),DUXX(MV),DUY(MV),DUYY(MV),
     &       PUX(MV),PUXX(MV),PUY(MV),PUYY(MV),
     &       DX(MV,NK),DY(MV,NK),DF(MV,NK),DFX(NK)
      LOGICAL  LORD
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  = NX * NY
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT NUMBERS
C  2,3   I      I     I
C--------I------I-----I------------------------------------------------
C RA1,   I  I   I IN  I  RA1 + 1  IS THE STARTING RECORD NUMBER ON
C 2,3    I      I     I  IFILE 1
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C UR1,   I  I   I I/O I  SYNCHRONISATION-VARIABLES
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C DUX,XX I  DP  I  -  I  WORKARRAYS FOR THE DISCRETISATION-ERRORS
C DUY,YY I      I     I  ARRAYS : DU...(MV)
C--------I------I-----I------------------------------------------------
C PUX,XX I  DP  I  -  I  WORKARRAYS FOR THE JACOBI-MATRICES
C PUY,YY I      I     I  ARRAYS : PU...(MV)
C--------I------I-----I------------------------------------------------
C DX,DY  I  DP  I  -  I  WORKARRAYS FOR THE RESULTING DISCRETIZATION-
C DF     I      I     I  ERROR ON THE LEVEL OF EQUATION.
C--------I------I-----I------------------------------------------------
C DFX    I  DP  I OUT I  MAXIMUM OF THE DISCRETIZATION-ERROR ON THE
C        I      I     I  LEVEL OF EQUATION.         ARRAY : DFX(NK)
C--------I------I-----I------------------------------------------------
C LORD   I  L   I IN  I  CONTROL OF THE ORDERS, IF LORD = TRUE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  I,IGL,IKO,IOS,J,NV,PFE,RN1,RN2,RN3,RNX,RNY
      DOUBLE PRECISION  ZERO , FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IKO = NK
      IF(LORD) IKO = 2
*VOCL LOOP,SCALAR
      DO 10 IGL=1,IKO
         DFX(IGL) = ZERO
   10 CONTINUE
      NV  = MV
      RN3 = RA3 + 1
      RNX = RN3 + IN * NK
      RNY = RNX + IN * NK
      DO 400 J = 1,IN
      DO 100 IGL = 1,NK
      DO 100 I = 1,MV
        DX(I,IGL) = ZERO
        DY(I,IGL) = ZERO
        DF(I,IGL) = ZERO
  100 CONTINUE
      IF(J.EQ.IN) NV = N - (IN-1) * MV
      DO 200 IKO = 1,NK
        RN1 = (IKO - 1) * IN + J + RA1
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUX ,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUXX,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUY ,NV,IERR,UR1)
        RN1 = RN1 - 1 + IN * NK
        CALL FDS317(IFILE1,IOS,RN1,RL,PFE,DUYY,NV,IERR,UR1)
        DO 190 IGL = 1,NK
          RN2 = M222*((J-1)*NK*NK+(IGL-1)*NK+IKO-1)+2+RA2
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUX ,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUXX,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUY ,NV,IERR,UR2)
          CALL FDS317(IFILE2,IOS,RN2,RL,PFE,PUYY,NV,IERR,UR2)
          DO 180 I = 1,NV
            DX(I,IGL) = DX(I,IGL)-PUX(I)*DUX(I)-PUXX(I)*DUXX(I)
            DY(I,IGL) = DY(I,IGL)-PUY(I)*DUY(I)-PUYY(I)*DUYY(I)
180       CONTINUE
190     CONTINUE
200   CONTINUE
      DO 300 IGL = 1,NK
        IF(.NOT.LORD) THEN
        DO 250 I = 1,NV
          DF(I,IGL) = DX(I,IGL)+DY(I,IGL)
250     CONTINUE
        ENDIF
        IF(.NOT.LORD)
     &  CALL FDS318(IFILE3,IOS,RN3,RL,PFE,DF(1,IGL),NV,IERR,UR3)
        CALL FDS318(IFILE3,IOS,RNX,RL,PFE,DX(1,IGL),NV,IERR,UR3)
        CALL FDS318(IFILE3,IOS,RNY,RL,PFE,DY(1,IGL),NV,IERR,UR3)
        IF(LORD) THEN
          DFX(1) = MAX(DFX(1),FDS101(NV,DX(1,IGL),ZERO))
          DFX(2) = MAX(DFX(2),FDS101(NV,DY(1,IGL),ZERO))
        ELSE
          DFX(IGL) = MAX(DFX(IGL),FDS101(NV,DF(1,IGL),ZERO))
        ENDIF
300   CONTINUE
400   CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSE31----------------------------------------------------
      E    N    D
C:::38    ,,,,,FDSE51.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE51 (IINFO,DINFO,LINFO,IBC,ILIN,LLIN,IFILE,UR,U1,
     &           N,NK,U2,IW,MIW,DW,MDW,EPS,TOL,IERR,FDS500)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 5 1   CONTROL OF THE ORDERS IN BV-DIRECTION        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),IBC(1),ILIN(1),IFILE(1),UR(1),N,NK,IW(1),
     &          MIW,MDW,IERR
      DOUBLE PRECISION      DINFO(1),U1(N,NK),U2(1),DW(1),EPS,TOL
      LOGICAL   LINFO(1) , LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR         ARRAY : IINFO(35)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR   ARRAY: DINFO(MNX+MNY)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR         ARRAY : LINFO(3)
C--------I------I-----I------------------------------------------------
C IBC    I  I   I IN  I  INFORMATION-VECTOR FOR THE DIFFERENCE FORMULAE
C        I      I     I                             ARRAY : IBC(4)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I IN  I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I IN  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*M-1)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS FOR I/O       ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES     ARRAY : UR(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY OF LENGTH N*NK
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C U2     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  DESIRED RELATIVE ACCURACY FOR THE SOLUTION
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDS500 I  E   I IN  I  NAME OF THE LINSOL-MAIN-PROGRAM
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   IA,IK,IFD,IOS,IOPT,IMVM,IND,IN,IDOKU,J,M,MV,
     &          MNX,MNY,MNEW,MOLD,MOX,MOY,MLF,NV,NX,NY,NOX,NOY,
     &          NCTRX,NCTRY,NDNEW,NXNEW,NYNEW,NXOLD,NYOLD,
     &          NOXOLD,NOYOLD,PFE,RL,RN,RN2,RN3,RND,LOUT
      DOUBLE PRECISION      ANEW,AOLD,DXNEW,DYNEW,DXOLD,DYOLD,EPSDEF,
     &          EPSLIN,ONE,P1,P3,QX,QY,QNEW,RC1,RC2,RC3,
     &          RC4,RC5,TWO,TOLEQ,ZERO,FDS101,DFX(2)
      LOGICAL   LX,LY,LXOPT,LYOPT,LMVM
      CHARACTER *1  CTEXT
      EXTERNAL  FDS317,FDS318
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  (ZERO=0.0 , ONE=1.0 , TWO=2.0 , P1=0.1 , P3=0.3 ,
     &            RC1=0.9 , RC2=1.5 , RC3=2.0 , RC4=0.9 , RC5=0.8)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  READ THE INFORMATION-VECTORS
C
      LMVM = LINFO(8)
      NX    = IINFO(2)
      NY    = IINFO(3)
      MNX   = IINFO(5)
      MNY   = IINFO(6)
      MLF   = IINFO(8)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      IDOKU = IINFO(25)
      LOUT  = IINFO(26)
      MOX   = IINFO(31)
      MOY   = IINFO(32)
      NOXOLD= IINFO(34)
      NOYOLD= IINFO(35)
C
      LX    = LINFO(2)
      LY    = LINFO(3)
C
      IFD   = 5
C
C***  COMPUTE THE QD-NORM SEPARATELY FOR THE THREE BV-DIRECTIONS
C
C***  READ THE X-DISCRETIZATION-ERROR ON THE LEVELS OF EQUATION
C     AND SOLUTION
C
      NV = MV
      RND = IN * NK + 1
      DO 120  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 110  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RND,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  110    CONTINUE
  120 CONTINUE
      RN3 = 4 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IERR)
      QX = FDS101(M,U2,ZERO) / FDS101(M,U1,EPS)
C
C***  READ THE Y-DISCRETIZATION-ERROR ON THE LEVELS OF EQUATION
C     AND SOLUTION
C
      NV = MV
      DO 140  J = 1,IN
         IF(J.EQ.IN)  NV = N - (IN - 1) * MV
         IA = 1 + (J - 1) * MV
         DO 130  IK = 1,NK
            CALL FDS317(IFILE(IFD),IOS,RND,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  130    CONTINUE
  140 CONTINUE
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS317,IERR)
      QY = FDS101(M,U2,ZERO) / FDS101(M,U1,EPS)
      IF(IDOKU.GE.1) WRITE(LOUT,1000)
C
C***  START OF THE OPTIMIZATION-LOOP FOR THE ORDERS IN BV-DIRECTION
C
      NOX   = 2
      NOY   = 2
      IOPT  = 0
      LXOPT = .FALSE.
      LYOPT = .FALSE.
  200 IOPT  = IOPT + 1
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE ACTUAL COMBINATION OF
C     THE ORDERS NOX, NOY
C
      RN2 = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN2,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN2,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  COMPUTATION OF THE DISCRETIZATION-ERROR ON THE LEVEL OF EQUATION
C
      TOLEQ = -ONE
      CALL FDSE30(EPSDEF,DFX,TOLEQ,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,
     &            IW,MIW,DW,MDW,IERR)
      IF(IERR.NE.0) GO TO 700
      IF(LXOPT.AND.LYOPT) GO TO 400
C
      DXNEW = DFX(1) * QX
      DYNEW = DFX(2) * QY
C
      NXNEW = NX * (DXNEW/(P3*TOL))**(ONE/NOX)
      NXNEW = MAX(NXNEW,NOX+4)
      NYNEW = NY * (DYNEW/(P3*TOL))**(ONE/NOY)
      NYNEW = MAX(NYNEW,NOY+4)
C
      IF(IOPT.EQ.1) GO TO 300
C
C***  STEPSIZE / ERROR-CONDITIONS :
C
      IF(LXOPT) GO TO 220
      IF(NXNEW.GE.NXOLD) GO TO 210
      IF(NXNEW.GT.RC1*NXOLD.AND.DXNEW.GT.RC2*DXOLD) GO TO 210
      IF(DXNEW.GT.RC3*DXOLD) GO TO 210
      GO TO 220
  210 CTEXT = 'X'
      IF(IDOKU.GE.3) WRITE(LOUT,1200) CTEXT,NOX,DXNEW,NXNEW
      NOX = NOX - 2
      NXNEW = NXOLD
      DXNEW = DXOLD
      LXOPT = .TRUE.
C
  220 IF(LYOPT) GO TO 300
      IF(NYNEW.GE.NYOLD) GO TO 230
      IF(NYNEW.GT.RC1*NYOLD.AND.DYNEW.GT.RC2*DYOLD) GO TO 230
      IF(DYNEW.GT.RC3*DYOLD) GO TO 230
      GO TO 300
  230 CTEXT = 'Y'
      IF(IDOKU.GE.3) WRITE(LOUT,1200) CTEXT,NOY,DYNEW,NYNEW
      NOY = NOY - 2
      NYNEW = NYOLD
      DYNEW = DYOLD
      LYOPT = .TRUE.
C
C***  LINSOL-CONDITION :
C
  300 IF(LXOPT.AND.LYOPT)  GO TO 200
      MNEW  = NK * NXNEW * NYNEW
      NDNEW = (2*NOX+2)*NK+(2*NOY+3)*(2*NK-1)
      QNEW  = (NOX+NOY) / TWO
      CALL FDS570(ILIN,MNEW,NK,NXNEW,NYNEW,0,NDNEW,QNEW,ANEW,IERR)
      IF(IERR.NE.0) GO TO 700
      IF(IDOKU.GE.2) WRITE(LOUT,1300) NOX,NOY,DXNEW,DYNEW,
     &                                NXNEW,NYNEW,MNEW,ANEW
      IF(IOPT.EQ.1) GO TO 340
      IF(ANEW.GT.AOLD) GO TO 320
      IF(MNEW.GT.RC5*MOLD.AND.ANEW.GT.RC4*AOLD) GO TO 320
      GO TO 340
C
  320 IF(.NOT.LXOPT) NOX = NOX - 2
      IF(.NOT.LYOPT) NOY = NOY - 2
      LXOPT = .TRUE.
      LYOPT = .TRUE.
C
  340 IF(.NOT.LXOPT.AND.NOX+6.LE.MOX) THEN
         NOX = NOX + 2
      ELSE
         LXOPT = .TRUE.
      ENDIF
      IF(.NOT.LYOPT.AND.NOY+6.LE.MOY) THEN
         NOY = NOY + 2
      ELSE
         LYOPT = .TRUE.
      ENDIF
C
      NXOLD = NXNEW
      NYOLD = NYNEW
      DXOLD = DXNEW
      DYOLD = DYNEW
      MOLD = MNEW
      AOLD = ANEW
C
      GO TO 200
C
C***  COMPUTATION OF THE DISCRETIZATION-ERRORS ON THE LEVEL OF SOLUTION
C
  400 IF(IDOKU.GE.1) WRITE(LOUT,1400) NOX, NOY
      EPSLIN   = P1
      ILIN(11) = 1
      IMVM     = ILIN(10)
C
C***  COMPUTATION OF THE X-ERROR
C
      IF(NOX.EQ.NOXOLD) GO TO 500
      NV = MV
      RN = IN * NK + 1
      DO 420 J=1,IN
         IF(J.EQ.IN) NV = N-(IN-1)*MV
         IA = 1+(J-1)*MV
         DO 410 IK=1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  410    CONTINUE
  420 CONTINUE
      CALL FDS411(N,NK,U1,U2)
      IF(IDOKU.GE.1) WRITE(LOUT,1040)
      CALL FDS500(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,UR,EPS,
     &            EPSLIN,IND,IERR)
      IMVM = IMVM + ILIN(10)
      GO TO(425,430,430,440) IND
  425 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 450
  430 IF (LMVM) THEN
         WRITE (LOUT,1032)
         WRITE (LOUT,1030)
         IERR = 611
         GO TO 700
      ELSE
         WRITE (LOUT,1032)
         WRITE (LOUT,1036)
         IND = 1
         GO TO 450
      ENDIF
  440 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR = 611
      GO TO 700
  450 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      RN3 = 4 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C***  COMPUTATION OF THE Y-ERROR
C
  500 IF(NOY.EQ.NOYOLD) GO TO 660
      NV = MV
      RN = 2 * IN * NK + 1
      DO 520 J=1,IN
         IF(J.EQ.IN) NV = N-(IN-1)*MV
         IA = 1+(J-1)*MV
         DO 510 IK=1,NK
            CALL FDS317(IFILE(IFD),IOS,RN,RL,PFE,U1(IA,IK),NV,
     &                  IERR,UR(IFD))
  510    CONTINUE
  520 CONTINUE
      CALL FDS411(N,NK,U1,U2)
      IF(IDOKU.GE.1) WRITE(LOUT,1050)
      CALL FDS500(ILIN,LLIN,IW,MIW,DW,MDW,U2,U1,IFILE,UR,EPS,
     &            EPSLIN,IND,IERR)
      IMVM = IMVM + ILIN(10)
      GO TO(525,530,530,540) IND
  525 IF(IDOKU.GE.1) WRITE(LOUT,1031) ILIN(10)
      GO TO 550
  530 IF (LMVM) THEN
         WRITE (LOUT,1032)
         WRITE (LOUT,1030)
         IERR = 612
         GO TO 700
      ELSE
         WRITE (LOUT,1032)
         WRITE (LOUT,1036)
         IND = 1
         GO TO 550
      ENDIF
  540 WRITE(LOUT,1034) IERR
      WRITE(LOUT,1030)
      IERR = 612
      GO TO 700
  550 CALL FDS411(NK,N,U1,U2)
      RN = 1
      CALL FDS332(U1,N,NK,MV,IFILE(3),RN,RL,UR(3),FDS317,IERR)
      CALL FDS132(N,NK,U2,U1,DW,EPS)
      RN3 = 5 * IN * NK + 1
      CALL FDS332(U2,N,NK,MV,IFILE(3),RN3,RL,UR(3),FDS318,IERR)
C
C***  CONTROL OF THE ORDERS COMPLETE
C
  660 IINFO(34) = NOX
      IINFO(35) = NOY
  700 IF(IDOKU.GE.1.AND.IERR.EQ.0) WRITE(LOUT,1710)
      IF(IDOKU.GE.1.AND.IERR.NE.0) WRITE(LOUT,1720)
      ILIN(10) = IMVM
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' CONTROL OF THE ORDERS:'/1X,22('-')/)
 1030 FORMAT(' COMPUTATION OF THE DISCR. ERROR FAILED.')
 1031 FORMAT(' ERROR COMPUTED WITH',I6,
     &       ' MATRIX-VECTOR MULTIPLICATIONS.')
 1032 FORMAT(' LINSOL DID NOT CONVERGE WITH MVM MATRIX-',
     &       'VECTOR MULTIPLICATIONS.')
 1034 FORMAT(' ERROR IN LINSOL, IERR =',I6)
 1036 FORMAT(' COMPUTATION OF THE ERROR IS CONTINUED -'/
     &       ' BAD ESTIMATION OF THE ERROR IS POSSIBLE')
 1040 FORMAT(' COMPUTATION OF THE X-ERROR:')
 1050 FORMAT(' COMPUTATION OF THE Y-ERROR:')
 1200 FORMAT(' ',A1,'-ORDER REJECTED:',I5,6X,'ERROR: ',G15.2/29X,
     &       'GRID POINTS:',I10)
 1300 FORMAT(' ORDER COMBINATION:',2I4,'  ERRORS:     ',2G10.2/29X,
     &       'GRID POINTS:',2I10/29X,'UNKNOWNS:   ',I10/29X,
     &       'AMOUNT:     ',G10.2)
 1400 FORMAT(' OPTIMAL ORDER COMBINATION:',2I5)
 1710 FORMAT(' CONTROL OF THE ORDERS COMPLETE.'/)
 1720 FORMAT(' CONTROL OF THE ORDERS FAILED.'/)
C
C-----END OF FDSE51----------------------------------------------------
      E    N    D
C'''''      ,,,,,FDSE52.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE52(IINFO,DINFO,LINFO,IW,DW,DE,DS,NXN,NYN,
     *                  LEQ,LFAK,EPS,TOL,IFILE,UR,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 5 2   GENERATES A NONEQUIDISTANT GRIDPOINT DISTRI- ***
C**      BUTION, WHERE THE STEPSIZES ARE DETERMINED BY THE ERROR-   ***
C**      ENVELOPE AND THE TOLERANCE.                                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),IW(1),NXN,NYN,IFILE(1),UR(1),IERR
      LOGICAL  LINFO(1),LEQ,LFAK
      DOUBLE PRECISION     DINFO(1),DW(1),DE(1),DS(1),EPS,TOL
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(35)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR          ARRAY : LINFO(3)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH 4*MAX(MNX,MNY) = 4*MX
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MAX(M,8*MX+MV)
C--------I------I-----I------------------------------------------------
C DE     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C DS     I  DP  I  -  I  WORKARRAY OF LENGTH M
C--------I------I-----I------------------------------------------------
C NXN    I  I   I OUT I  NEW NUMBER OF X-GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NYN    I  I   I OUT I  NEW NUMBER OF Y-GRIDPOINTS
C--------I------I-----I------------------------------------------------
C LEQ    I  L   I IN  I  IF LEQ = TRUE  THE ERROR ON THE LEVEL OF
C        I      I     I  EQUATIONS IS ALSO CONSIDERED
C--------I------I-----I------------------------------------------------
C LFAK   I  L   I IN  I  IF LFAK = TRUE THE CHANGING FACTORS IN THE
C        I      I     I  STEP SIZE FUNCTION ARE CONTROLLED
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I IN  I  TOLERANCE
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS                  ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONIZATION VARIABLES        ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IAK,ID1,ID2,ID2E,ID3,ID4,ID5,IFE,IFF,IFS,IDOKU,
     *          II2,II3,II4,IK,IN,IDIM,IDUM,IMM,IOS,J,LOUT,M,MX,
     *          MNX,MNY,MV,N,NK,NX,NY,NXK,NYK,NV,NOX,NOY,NXMAX,
     *          PFE,RN,RN4,RNE,RNS,RL,RL4
      LOGICAL   LX,LY
      DOUBLE PRECISION      DXFAK,ZERO,FDS101,P3,S,THREE,TOLFAC
      EXTERNAL  FDS317
      PARAMETER (ZERO=0.0, P3=0.3, THREE=3.0)
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      S = THREE
      TOLFAC = P3
C
C***  READ THE INFORMATION-VECTORS :
C     -----------------------------
C
      NK    = IINFO(1)
      NX    = IINFO(2)
      NY    = IINFO(3)
      MNX   = IINFO(5)
      MNY   = IINFO(6)
      MX    = MAX(MNX,MNY)
      N     = IINFO(9)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      IMM   = IINFO(16)
      RL4   = IINFO(24)
      IDOKU = IINFO(25)
      LOUT  = IINFO(26)
      NXMAX = IINFO(28)
      NOX   = IINFO(34)
      NOY   = IINFO(35)
      LX    = LINFO(2)
      LY    = LINFO(3)
      NXK   = NX*NK
      NYK   = NY*NK
      IFE   = 5
      IFS   = 3
      IFF   = 2
C
C***  READ THE X-ERROR ON THE LEVEL OF EQUATION
C
      IF(LEQ) THEN
         NV  = MV
         RNE = IN*NK+1
         DO 110 J=1,IN
            IF(J .EQ. IN) NV = N-(IN-1)*MV
            IA = 1+(J-1)*MV
            DO 100 IK=1,NK
               IAK = IA+(IK-1)*N
               CALL FDS317(IFILE(IFE),IOS,RNE,RL,PFE,DW(IAK),
     *                     NV,IDUM,UR(IFE))
  100       CONTINUE
  110    CONTINUE
         CALL FDS411(NX,NYK,DW,DE)
      ENDIF
C
C***  READ THE X-ERROR ON THE LEVEL OF SOLUTION
C
      RNS = 4*IN*NK+1
      CALL FDS332(DW,N,NK,MV,IFILE(IFS),RNS,RL,UR(IFS),
     *            FDS317,IDUM)
      CALL FDS411(NX,NYK,DW,DS)
C
C***  COMPUTE THE ERROR-ENVELOPE
C
      IF(LEQ) THEN
         DXFAK = FDS101(N*NK,DS,ZERO)/FDS101(N*NK,DE,EPS)
         IA    = 1
         DO 120 I=1,NX
            DW(I) = MAX(FDS101(NYK,DS(IA),ZERO),
     *                  DXFAK*FDS101(NYK,DE(IA),ZERO))
            IA    = IA+NYK
  120    CONTINUE
      ELSE
         IA = 1
         DO 130 I=1,NX
            DW(I) = FDS101(NYK,DS(IA),ZERO)
            IA    = IA+NYK
  130    CONTINUE
      ENDIF
      IF(LX) DW(MNX)=DW(1)
      II2 = 1+MX
      II3 = II2+MX
      II4 = II3+MX
      IF(LFAK) THEN
      RN  = 1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II3),
     *            MNX,IDUM,UR(IFF))
      RN  = RN+1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II4),
     *            MNX,IDUM,UR(IFF))
      ENDIF
      ID1 = 1+MX
      ID2 = ID1+MX
      ID3 = ID2+MV
      ID4 = ID3+MX
      ID5 = ID4+MX
C
C***  COMPUTE THE NEW GRID POINT DISTRIBUTION
C
      CALL FDSA51(IDIM,IW(1),IW(II2),IW(II3),IW(II4),NOX,MNX,MV,
     *            NXN,LFAK,DW(1),EPS,DW(ID1),S,TOL,TOLFAC,DINFO(1),
     *            DW(ID2),DW(ID3),DW(ID4),DW(ID5))
      IF(IDOKU .GE. 2) THEN
         WRITE(LOUT,1001)
         WRITE(LOUT,1000)  (DINFO(I),I=1,MNX)
         WRITE(LOUT,1002)
         WRITE(LOUT,1000)  (DW(I),I=1,MNX)
         WRITE(LOUT,1003)
         ID2E=ID1+MNX-1
         WRITE(LOUT,1000)  (DW(I),I=ID1,ID2E)
         IF(IDIM .EQ. 0) THEN
            WRITE(LOUT,1004) NXN
            ID2E = ID2+NXN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IF(NXN.GT.NXMAX) THEN
               WRITE(LOUT,1005) NXMAX
               IERR = 601
            ENDIF
         ELSE
            WRITE(LOUT,1005) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
      ELSE
         IF(IDIM.EQ.0.AND.NXN.GT.NXMAX) THEN
            WRITE(LOUT,1005) NXMAX
            ID2E = ID2+NXN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
         IF(IDIM.NE.0) THEN
            WRITE(LOUT,1005) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 601
         ENDIF
      ENDIF
C
C***  WRITE NEW X-GRID ON FILE 4
C
      RN4=1
      CALL FDS318(IFILE(4),IOS,RN4,RL4,PFE,DW(ID2),NXN,IDUM,UR(4))
C
C***  READ THE Y-ERROR ON THE LEVEL OF EQUATION
C
      IF(LEQ) THEN
         NV  = MV
         DO 210 J=1,IN
            IF(J .EQ. IN) NV = N-(IN-1)*MV
            IA = 1+(J-1)*MV
            DO 200 IK=1,NK
               IAK = IA+(IK-1)*N
               CALL FDS317(IFILE(IFE),IOS,RNE,RL,PFE,DW(IAK),
     *                     NV,IDUM,UR(IFE))
  200       CONTINUE
  210    CONTINUE
         CALL FDS411(N,NK,DW,DE)
      ENDIF
C
C***  READ THE Y-ERROR ON THE LEVEL OF SOLUTION
C
      CALL FDS332(DW,N,NK,MV,IFILE(IFS),RNS,RL,UR(IFS),
     *            FDS317,IDUM)
      CALL FDS411(N,NK,DW,DS)
C
C***  COMPUTE THE ERROR-ENVELOPE
C
      IF(LEQ) THEN
         DXFAK = FDS101(N*NK,DS,ZERO)/FDS101(N*NK,DE,EPS)
         IA    = 1
         DO 220 I=1,NY
            DW(I) = MAX(FDS101(NXK,DS(IA),ZERO),
     *                  DXFAK*FDS101(NXK,DE(IA),ZERO))
            IA    = IA+NXK
  220    CONTINUE
      ELSE
         IA = 1
         DO 230 I=1,NY
            DW(I) = FDS101(NXK,DS(IA),ZERO)
            IA    = IA+NXK
  230    CONTINUE
      ENDIF
      IF(LY) DW(MNY)=DW(1)
      IF(LFAK) THEN
      RN  = 8
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II3),
     *            MNY,IDUM,UR(IFF))
      RN  = RN+1
      CALL FDS315(IFILE(IFF),IOS,RN,RL,PFE,IW(II4),
     *            MNY,IDUM,UR(IFF))
      ENDIF
C
C***  COMPUTE THE NEW GRID POINT DISTRIBUTION
C
      IA=1+MNX
      CALL FDSA51(IDIM,IW(1),IW(II2),IW(II3),IW(II4),NOY,MNY,MV,
     *            NYN,LFAK,DW(1),EPS,DW(ID1),S,TOL,TOLFAC,DINFO(IA),
     *            DW(ID2),DW(ID3),DW(ID4),DW(ID5))
      IF(IDOKU .GE. 2) THEN
         WRITE(LOUT,1006)
         IA=MNX
         WRITE(LOUT,1000)  (DINFO(I+IA),I=1,MNY)
         WRITE(LOUT,1002)
         WRITE(LOUT,1000)  (DW(I),I=1,MNY)
         WRITE(LOUT,1003)
         ID2E=ID1+MNY-1
         WRITE(LOUT,1000)  (DW(I),I=ID1,ID2E)
         IF(IDIM .EQ. 0) THEN
            WRITE(LOUT,1004) NYN
            ID2E = ID2+NYN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IF(NYN.GT.NXMAX) THEN
               WRITE(LOUT,1007) NXMAX
               IERR = 602
            ENDIF
         ELSE
            WRITE(LOUT,1007) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
      ELSE
         IF(IDIM.EQ.0.AND.NYN.GT.NXMAX) THEN
            WRITE(LOUT,1007) NXMAX
            ID2E = ID2+NYN-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
         IF(IDIM.NE.0) THEN
            WRITE(LOUT,1007) MV
            ID2E = ID3-1
            WRITE(LOUT,1000)  (DW(I),I=ID2,ID2E)
            IERR = 602
         ENDIF
      ENDIF
C
C***  WRITE NEW Y-GRID ON FILE 4
C
      CALL FDS318(IFILE(4),IOS,RN4,RL4,PFE,DW(ID2),NYN,IDUM,UR(4))
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(5G14.6)
 1001 FORMAT(/' CONTROL OF THE X-GRID:'/' ',22('-')/
     *       ' OLD X-COORDINATES:'/)
 1002 FORMAT(' ERROR ENVELOPE:'/)
 1003 FORMAT(' NEW STEP SIZE DISTRIBUTION:'/)
 1004 FORMAT(' NEW GRID:',I8,' GRID POINTS:'/)
 1005 FORMAT(' GENERATION OF NEW X-GRID FAILED.'/
     *       ' MORE THAN',I8,' GRID POINTS NEEDED:'/)
 1006 FORMAT(/' CONTROL OF THE Y-GRID:'/' ',22('-')/
     *       ' OLD Y-COORDINATES:'/)
 1007 FORMAT(' GENERATION OF NEW Y-GRID FAILED.'/
     *       ' MORE THAN',I8,' GRID POINTS NEEDED:'/)
C
C-----END OF FDSE52----------------------------------------------------
      E    N    D
C:::39    ,,,,,FDSE70.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSE70 (DW,IW,MDW,MIW,NK,NX,NY,NXN,NYN,
     *                   NOX,NOY,X,Y,XN,YN,U,UN,IER)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S E 7 0   INTERPOLATES NK FUNCTIONS GIVEN ON A 2-D     ***
C**      GRID IN VECTOR U(NX,NY,NK) ON A NEW 2-D GRID.              ***
C**      THE OUTPUT VECTOR IS DIMENSIONED UN(NXN,NYN,NK).           ***
C**      THE INTERPOLATION IS DONE BY DIFFERENCE FORMULAE OF        ***
C**      ORDER NOX, NOY.                                            ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER - INSTRUCTION HAS THE AIM,             ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER * 1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IER,MDW,MIW,IW(MIW),NK,NX,NY,NXN,NYN,NOX,NOY
      DOUBLE PRECISION      DW(MDW),X(NX),Y(NY),XN(NXN),YN(NYN),
     *          U(NX,NY,NK),UN(NXN,NYN,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  MDW >= (4*MOX+NXN+NYN+MNX+4)*MOX
C        I      I     I          +2*(NXN+NYN)
C        I      I     I  (WITH MOX = MAX(NOX,NOY)+3
C        I      I     I   AND  MNX = MAX(NXN,NYN))
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  MIW >= 3*(NXN+NYN)+MOX
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF FUNCTIONS TO BE INTERPOLATED
C--------I------I-----I------------------------------------------------
C NX,NY  I  I   I IN  I  NUMBER OF GRID POINTS IN THE OLD GRID
C--------I------I-----I------------------------------------------------
C NXN,NYNI  I   I IN  I  NUMBER OF GRID POINTS IN THE NEW GRID
C--------I------I-----I------------------------------------------------
C NOX,NOYI  I   I IN  I  ORDERS OF CONSISTENCY OF THE DIFFERENCE
C        I      I     I  FORMULAE IN THE 2 DIRECTIONS
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I IN  I  COORDINATES OF THE OLD GRID
C        I      I     I  ARRAYS : X(NX), Y(NY)
C--------I------I-----I------------------------------------------------
C XN,YN  I  DP  I IN  I  COORDINATES OF THE NEW GRID
C        I      I     I  ARRAYS : X(NXN), Y(NYN)
C--------I------I-----I------------------------------------------------
C U      I  DP  I IN  I  VECTOR OF THE FUNCTIONS GIVEN ON THE OLD GRID
C        I      I     I  ARRAY : U(NX,NY,NK)
C--------I------I-----I------------------------------------------------
C UN     I  DP  I OUT I  VECTOR OF THE INTERPOLATED VALUES ON THE NEW
C        I      I     I  GRID
C        I      I     I  ARRAY : UN(NXN,NYN,NK)
C--------I------I-----I------------------------------------------------
C IER    I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  ID2,ID3,ID4,ID5,ID6,ID7,ID8,ID9,
     *         IAIPX,IAIPY,IGMX,IGMY,IGPX,IGPY,ITRX,ITRY,
     *         NAX,NAY,NB,NFLX,NFLY,NDW,NIW,MOX,MLF,MNX
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      MOX = MAX(NOX,NOY) + 3
      MLF = MOX
      MNX = MAX(NXN,NYN)
C
      ID2   = 1     + MOX * MOX
      ID3   = ID2   + MOX * MOX
      IAIPX = ID3   + MOX * MOX
      ID4   = IAIPX + NXN * MLF
      IGMX  = ID4   + MNX * MLF
      IGPX  = IGMX  + NXN
      ID5   = IGPX  + NXN
      ID6   = ID5   + MOX
      ID7   = ID6   + MOX
      ID8   = ID7   + MOX * MOX
      ID9   = ID8   + MOX
      IAIPY = ID9   + MOX
      IGMY  = IAIPY + NYN * MLF
      IGPY  = IGMY  + NYN
      NDW   = IGPY  + NYN
C
      ITRX = 1
      NAX  = 1    + NXN
      NB   = NAX  + NXN
      NFLX = NB   + MOX
      ITRY = NFLX + NXN
      NAY  = ITRY + NYN
      NFLY = NAY  + NYN
      NIW  = NFLY + NYN
C
      IF(MIW.LT.NIW.OR.MDW.LT.NDW) THEN
         IER = 70
         WRITE(6,1000) NIW, NDW
         RETURN
      ENDIF
C
      CALL FDS010(DW(1),DW(ID2),DW(ID3),DW(IAIPX),DW(ID4),DW(IGMX),
     *            DW(IGPX),IW(ITRX),IW(NAX),IW(NB),IW(NFLX),NOX,NX,
     *            NXN,NXN,MOX,MLF,XN,X,DW(ID5),DW(ID6),DW(ID7),
     *            DW(ID8),DW(ID9),IER)
      IF(IER.NE.0) RETURN
C
      CALL FDS010(DW(1),DW(ID2),DW(ID3),DW(IAIPY),DW(ID4),DW(IGMY),
     *            DW(IGPY),IW(ITRY),IW(NAY),IW(NB),IW(NFLY),NOY,NY,
     *            NYN,NYN,MOX,MLF,YN,Y,DW(ID5),DW(ID6),DW(ID7),
     *            DW(ID8),DW(ID9),IER)
      IF(IER.NE.0) RETURN
C
      CALL FDS472(DW(IAIPX),DW(IAIPY),DW(IGMX),DW(IGMY),
     *            DW(IGPX),DW(IGPY),IW(ITRX),IW(ITRY),
     *            IW(NAX),IW(NAY),IW(NFLX),IW(NFLY),NK,NX,NY,
     *            NXN,NYN,U,UN)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(/' *** ERROR IN FDSE70:'//
     *        '     MIW, MDW MUST BE GREATER/EQUAL:',2I10/)
C
      R E T U R N
C-----END OF FDSE70----------------------------------------------------
      E    N    D
C:::40    ,,,,,FDSF01.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSF01 (IINFO,DINFO,LINFO,ILIN,LLIN,IW,DW,IFILE,
     &           U1,U2,T0,TEND,DTOUT,IOUT,MAXINT,IND,IERR,
     &           FDSU01,FDSU02,FDSU03,FDSU04,FDSU05,FDSLIN)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 0 1    IS A PROGRAM PACKAGE FOR THE NUMERICAL      ***
C**      SOLUTION OF A SYSTEM OF 2-DIMENSIONAL PARABOLIC DIFFEREN-  ***
C**      TIAL EQUATIONS IN A RECTANGULAR DOMAIN WITH GIVEN INITIAL  ***
C**      VALUES, PRESCRIBED GRID AND ORDER.                         ***
C**      OPTIONAL AN ESTIMATE FOR THE DISCRETIZATION ERROR          ***
C**      IS COMPUTED. FOR THE SOLUTION OF THE LINEAR SYSTEM THE     ***
C**      PROGRAM PACKAGE LINSOL IS USED. SEE USER GUIDE FOR FDSF01. ***
C**      THE LINSOL-VERSION CAN BE SELECTED WITH PARAMETER FDSLIN.  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   IINFO(1),ILIN(1),IW(1),IFILE(1),IND,IERR,IOUT,
     &          MAXINT
      DOUBLE PRECISION  DINFO(1),DW(1),T0,TEND,U1(1),U2(1),DTOUT
      LOGICAL   LINFO(1), LLIN(1)
      EXTERNAL  FDSU01, FDSU02, FDSU03, FDSU04, FDSU05, FDSLIN
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR          ARRAY : IINFO(43)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+10+2*NK)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR        ARRAY : LINFO(14+NK)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINEAR SOLVER
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I  -  I  WORKARRAY FOR LINEAR SOLVER
C        I      I     I  ARRAY : LLIN(2*NX*NY*NK-1)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT NUMBERS FOR I/O
C        I      I     I  ARRAY : IFILE(10)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I IN  I  SOLUTION-VECTOR
C        I      I     I  ARRAY : U1(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C U2     I  DP  I IN  I  ESTIMATE FOR THE ERROR OF THE SOLUTION
C        I      I     I  ARRAY : U2(MNX,MNY,NK)
C--------I------I-----I------------------------------------------------
C T0     I  DP  I IN  I  COORDINATE, WHERE THE INITIAL VALUES ARE GIVEN
C--------I------I-----I------------------------------------------------
C TEND   I  DP  I IN  I  END OF THE INTEGRATION-INTERVAL
C--------I------I-----I------------------------------------------------
C DTOUT  I  DP  I IN  I  T-INCREMENT FOR THE OUTPUT-CONTROL
C--------I------I-----I------------------------------------------------
C IOUT   I  I   I IN  I  OUTPUT-CONTROL
C--------I------I-----I------------------------------------------------
C MAXINT I  I   I IN  I  MAXIMUM NUMBER OF INTEGRATION STEPS
C--------I------I-----I------------------------------------------------
C IND    I  I   I OUT I  CONVERGENCE-INDICATOR
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C FDSU01,I  E   I IN  I  NAMES OF THE USER-SUBROUTINES FOR THE NEWTON-
C 2,3,4,5I      I     I  RAPHSON-METHOD AND THE OUTPUT OF THE RESULTS.
C--------I------I-----I------------------------------------------------
C FDSLIN I  E   I IN  I  NAME OF THE LINSOL MAIN-SUBROUTINE.
C        I      I     I  (E.G. FDS500, ...)
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  II1,II2,II3,II4,II5,II6,II7,II8,I,IBC(4),
     &         IDOKU,IN,IMM,IDMAX,IOS,LOUT,MNX,MNY,MV,MAXIT,MDW,
     &         MIW,M,MOX,MOY,MLF,M222,MT,M1,M2,M3,M10,M20,NCTRX,
     &         NCTRY,NK,NX,NY,NOX,NOY,N,RL,RL4,RLW,RN,RNDU,RNU,
     &         MK,MOT,MP,NOT,NT,INTEG,UR(10),NOXX,NOYY,NOM,MOTMAX
      DOUBLE PRECISION  TOL,ZERO,EPS,DFT,DFTI,DFX,DFXN,ABT,EX,FABT,ST,
     &       STA,T,FDS001,A,H,TOUT,HMIN,HMAX
      LOGICAL   LX, LY, LGLOB, LOUTPT, LRST
      EXTERNAL  FDS315,FDS316,FDS317,FDS318,
     &          FDSE30,FDSF10,FDSF20,FDSF40
      CHARACTER  TNAM*6,STAT*7
      COMMON /FDSOUT/ LOUT
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 , MP = 7 , MOT = 5 , MK = 100 )
C
      DIMENSION  DFT(MK),DFTI(MK),DFX(MK),DFXN(MK),ABT(MP),EX(MP),
     &           FABT(MP,MOT),ST(MP,MP),STA(MP,MP),RNDU(MP),RNU(MP),
     &           T(MP)
C
C**** START OF CALCULATION :
C     ---------------------
C
C***  INFORMATION-VECTORS
C
      LX     = LINFO(2)
      LY     = LINFO(3)
      LRST   = LINFO(5)
C
      NK     = IINFO(1)
      MNX    = IINFO(2)
      MNY    = IINFO(3)
      MV     = IINFO(5)
      IDOKU  = IINFO(6)
      LOUT   = IINFO(7)
      MAXIT  = IINFO(8)
      MDW    = IINFO(9)
      MIW    = IINFO(10)
      NOX    = IINFO(11)
      NOY    = IINFO(12)
      MOTMAX = IINFO(14)
      NOM    = IINFO(18)
      DO 10 I=1,4
         IBC(I) = IINFO(18+I)
  10  CONTINUE
C
      NX = MNX
      IF(LX) NX = NX - 1
      NY = MNY
      IF(LY) NY = NY - 1
      N = NX * NY
      M = N * NK
      MOX = NOX + 4
      MOY = NOY + 4
      MLF = 2 * MAX(MOX,MOY) - 1
      IF(MOTMAX.LT.1.OR.MOTMAX.GT.5) MOTMAX = MOT
      RL  = MV
      RL4 = MAX(NX,NY)
      IN = N / MV
      IF(N - IN * MV.GT.0) IN = IN + 1
      M222 = 6
      MT   = MV
      IMM = MNX + MNY + 2
      IDMAX = MIW / 3
C
      TOL = DINFO(IMM - 1)
C
      IINFO(2)  = NX
      IINFO(3)  = NY
      IINFO(5)  = MNX
      IINFO(6)  = MNY
      IINFO(8)  = MLF
      IINFO(9)  = N
      IINFO(10) = M
      IINFO(11) = MV
      IINFO(13) = IN
      IINFO(14) = M222
      IINFO(15) = MT
      IINFO(16) = IMM
      IINFO(23) = IDMAX
      IINFO(25) = IDOKU
      IINFO(26) = LOUT
      IINFO(27) = MAXIT
      IINFO(42) = MOTMAX
      IINFO(43) = MP
C
      ILIN(3)  = M
      ILIN(4)  = 2 * M - 1
      ILIN(7)  = 8
      ILIN(8)  = 9
      ILIN(9)  = 10
      ILIN(10) = 0
      ILIN(12) = LOUT
      ILIN(13) = IDOKU
      ILIN(16) = 0
C
      LINFO(1) = .TRUE.
      LGLOB = LINFO(14+NK)
C
C***  INITIALIZATIONS
C
      IMM = IMM+2*NK
      EPS = FDS001(A)
      DINFO(IMM+4)   = EPS
      T(1) = T0
      IF(IOUT.LE.0) TOUT=T0+DTOUT
      RNU(1) = 1
      DO 100 RN=2,MP
         RNU(RN) = RNU(RN-1) + IN*NK
         T(RN) = 0.0
  100 CONTINUE
C
      IERR = 0
      TNAM = 'FDSF01'
C$$$  CALL FDS888(TNAM,NK,NX,NY,0,NOX,NOY,0,MV)
      WRITE(LOUT,1000)
      CALL FDSVER(LOUT)
C
C***  CHECK THE INPUT-PARAMETERS :
C
      M10 = 6*NK + (2+7*NK)*MV
      M20 = (8 + 6 * NK) * MV
      M1  = MAX(M10,M20,4*MV+M)
      M2  = 3 * MV
      M3  = MAX(NX,NY,MAX(MNX,MNY)*MLF)
      CALL FDST02(LOUT,IFILE,1,10,MDW,M1,MIW,M2,MV,M3,NK,TOL,EPS,IERR)
      CALL FDST03(DINFO(IMM+5),DINFO(IMM+6),DINFO(IMM+7),T0,TEND,IOUT,
     &            DTOUT,EPS,IERR)
      WRITE(6,1010)
      CALL FDST01(NX,NOX,DINFO(1),IERR)
      WRITE(6,1020)
      CALL FDST01(NY,NOY,DINFO(MNX+1),IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  OPEN CHECKPOINT-FILE AND TEMPORARY FILES
C
      STAT='SCRATCH'
      IF(IFILE(1).LT.0) THEN
         IFILE(1)= -IFILE(1)
         STAT='OLD'
      ENDIF
      RLW = RL
      CALL FDS300(IFILE(1) ,'FDS1','UNKNOWN','DIRECT',RLW,IOS,RN,UR(1))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(2) ,'FDS2',STAT,'DIRECT',RLW,IOS,RN,UR(2))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(3) ,'FDS3',STAT,'DIRECT',RLW,IOS,RN,UR(3))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(4) ,'FDS4',STAT,'DIRECT',RL4,IOS,RN,UR(4))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(5) ,'FDS5',STAT,'DIRECT',RLW,IOS,RN,UR(5))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(6) ,'FDS6',STAT,'DIRECT',RLW,IOS,RN,UR(6))
      IF(IOS.NE.0) IERR=2
      RLW = RL
      CALL FDS300(IFILE(7) ,'FDS7',STAT,'DIRECT',RLW,IOS,RN,UR(7))
      IF(IOS.NE.0) IERR=2
      RL = RLW
      CALL FDS300(IFILE(8) ,'FDS8',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(8))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(9) ,'FDS9',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(9))
      IF(IOS.NE.0) IERR=2
      CALL FDS300(IFILE(10),'FDS10',STAT,'SEQUENTIAL',RLW,IOS,RN,UR(10))
      IF(IOS.NE.0) IERR=2
      CALL FDS399(IFILE(9),LOUT,IERR)
      IF(IERR.EQ.399) GO TO 700
      IF(IERR.EQ.2) GO TO 700
C
      IINFO(12) = RL
      IINFO(24) = RL4
C
C***  PRINT THE INPUT-PARAMETERS
C
      IF(IDOKU.GT.0) THEN
      WRITE(LOUT,1040) NX,NY,NOX,NOY,NK,TOL,EPS,MV
      CALL FDST05(LOUT,T0,TEND,DINFO(IMM+5),DINFO(IMM+6),DINFO(IMM+7),
     &            IOUT,DTOUT,LINFO(11+NK),LINFO(12+NK),LINFO(13+NK),
     &            LINFO(14+NK))
      ENDIF
C
C***  COMPUTE THE DIFFERENCEFORMULAE IN BV-DIRECTION FOR THE MATRIX
C
      IF(NOM.GT.0.AND.MOD(NOM,2).EQ.0.AND.NOM.LE.MIN(NOX,NOY)) THEN
         NOXX = NOM
         NOYY = NOM
         WRITE(LOUT,1050) NOM
      ELSE
         NOXX = NOX
         NOYY = NOY
      ENDIF
C
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOXX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOYY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      IINFO(17) = NCTRX
      IINFO(18) = NCTRY
C
C***  SORTING OF THE DIFFERENCEFORMULAE
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II5  = II4  + MV
      II6  = II5  + MV
      II7  = II6  + MV
      II8  = II7  + MV
      CALL FDSE12(IINFO,MNX,MNY,MLF,MV,DW(II1),DW(II2),DW(II3),
     &     DW(II4),DW(II5),DW(II6),DW(II7),DW(II8),
     &     IFILE(2),UR(2),LX,LY,IERR)
      IF(IERR.NE.0) GO TO 700
C
C***  COMPUTE THE DIFFERENCE FORMULAE FOR THE DERIVATIVES
C
      IF ( NOX.NE.NOXX.OR.NOY.NE.NOYY) THEN
      RN = 1
      CALL FDSA12(IBC(1),LX,MNX,NOX,MOX,MLF,DINFO(1),NCTRX,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      CALL FDSA12(IBC(3),LY,MNY,NOY,MOY,MLF,DINFO(MNX+1),NCTRY,DW,MDW,
     &            IW,MIW,IFILE(2),RL,RN,UR(2),IERR)
      IF(IERR.NE.0) GO TO 700
      ENDIF
C
      IF(LRST) THEN
C
C***  CONTINUE INTEGRATION-LOOP - READ CHECKPOINT-FILE
C
      HMIN=DINFO(IMM+6)
      HMAX=DINFO(IMM+7)
      RN=(2*MP+1)*IN*NK+1
      CALL FDSB21(IFILE(1),RN,UR(1),MP,MOT,RNU,T,ST,
     &     STA,FABT,DFT,DFX,DINFO,IINFO,FDS317,FDS315,IERR)
      IF(IERR.NE.0)  GO TO 600
      DINFO(IMM+6)=HMIN
      DINFO(IMM+7)=HMAX
      WRITE(LOUT,1100) IINFO(37)
      LINFO(5)=.TRUE.
      GO TO 400
      ELSE
C
C***  INITIAL SOLUTION AT T0 FOR THE NEWTON-ITERATION
C
      IF(LX.OR.LY) THEN
C
C***     CUT THE RIGHT ENDS IN THE PERIODIC DIRECTIONS OF THE
C        INITIAL SOLUTION AND WRITE ON PARABOLIC FILE
C
         CALL FDS427(MNX,MNY,NX,NY,NK,U1,DW)
         RN = 1
         CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         IF(LGLOB) THEN
         CALL FDS427(MNX,MNY,NX,NY,NK,U2,DW)
         RN = MP*IN*NK+1
         CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         ENDIF
      ELSE
         RN = 1
         CALL FDS332(U1,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         IF(LGLOB) THEN
         RN = MP*IN*NK+1
         CALL FDS332(U2,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS318,IERR)
         ENDIF
      ENDIF
      ENDIF
      IF(IERR.NE.0) GO TO 600
C
C***  FIRST INTEGRATION-STEP
C
      CALL FDSB11(DINFO,IINFO,LINFO,ILIN,LLIN,IFILE,UR,DW,MDW,IW,MIW,
     &     U1,U2,DFT,DFX,ABT,EX,FABT,ST,STA,RNDU,RNU,T,MP,EPS,TOL,IND,
     &     IERR,FDSF10,FDSF20,FDSE30,FDSF40,FDSLIN,FDSU01,
     &     FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 600
      GOTO 401
C
C***  INTEGRATION-LOOP
C
  400 CALL FDSB12(DINFO,IINFO,LINFO,LRST,ILIN,LLIN,IFILE,UR,DW,MDW,IW,
     &     MIW,U1,U2,DFT,DFTI,DFX,DFXN,ABT,EX,FABT,ST,STA,RNDU,RNU,T,MP,
     &     EPS,TOL,IND,IERR,FDSF10,FDSF20,FDSE30,FDSF40,FDSLIN,
     &     FDSU01,FDSU02,FDSU03,FDSU04)
      IF(IERR.NE.0.OR.IND.NE.1) GO TO 600
  401 CONTINUE
C
C***  CONTROL OF THE OUTPUT
C
      INTEG=IINFO(37)
      LOUTPT=.FALSE.
      IF(IOUT.GT.0) THEN
         IF(MOD(INTEG,IOUT).EQ.0) LOUTPT=.TRUE.
      ENDIF
      IF(IOUT.LE.0.AND.T(1).GE.TOUT) LOUTPT=.TRUE.
      IF(LOUTPT) THEN
         H=DINFO(IMM+5)
         NOT=IINFO(39)
  500    IF(IOUT.EQ.-1) THEN
C
C***       INTERPOLATION OF THE SOLUTION AT T=TOUT
C
           NT = IINFO(41)
           II1 = 1+M
           II2 = II1+MP*MP
           II3 = II2+MP*MP
           CALL FDSB70(N,NK,NT,MP,NOT,MV,RL,RNU,IFILE(1),UR(1),DW(II3),
     &                 DW(1),ST,STA,DW(II1),DW(II2),T,TOUT,U2)
           CALL FDS428(NX,NY,NK,MNX,MNY,U2,U1)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS428(NX,NY,NK,MNX,MNY,DW,U2)
           ENDIF
         ELSE
         IF(LX.OR.LY) THEN
C
C***       ADD THE RIGHT ENDS IN THE PERIODIC DIRECTIONS.
C          THE VALUES ARE TAKEN FROM THE LEFT END.
C
           RN=RNU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS428(NX,NY,NK,MNX,MNY,DW,U1)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(DW,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           CALL FDS428(NX,NY,NK,MNX,MNY,DW,U2)
           ENDIF
         ELSE
           RN=RNU(1)
           CALL FDS332(U1,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           IF(LGLOB) THEN
           RN=RNDU(1)
           CALL FDS332(U2,N,NK,MV,IFILE(1),RN,RL,UR(1),FDS317,IERR)
           ENDIF
         ENDIF
         ENDIF
         IF(IOUT.GT.0) TOUT=T(1)
C
C***     CALL THE USER-SUBROUTINE FOR INFORMATION AND OUTPUT
C
         CALL FDSU05(INTEG,T(1),TOUT,TEND,H,NOT,NK,MNX,MNY,U1,U2,
     &               DINFO(1),DINFO(MNX+1),IOUT,DTOUT,
     &               DINFO,IINFO,LINFO,ILIN)
         IF(IOUT.EQ.-1) THEN
            TOUT=TOUT+DTOUT
            IF(T(1).GE.TOUT)  GO TO 500
         ENDIF
         IF(IOUT.EQ.0) THEN
  550       TOUT=TOUT+DTOUT
            IF(T(1).GE.TOUT)  GO TO 550
         ENDIF
      ENDIF
C
C***  WRITE INFORMATION ON CHECKPOINT-FILE
C
      RN=(2*MP+1)*IN*NK+1
      CALL FDSB21(IFILE(1),RN,UR(1),MP,MOT,RNU,T,
     &    ST,STA,FABT,DFT,DFX,DINFO,IINFO,FDS318,FDS316,IERR)
      IF(IERR.NE.0) GO TO 600
C
C***  CHECK THE END OF THE INTEGRATION-LOOP
C
      IF(T(1).LT.TEND.AND.(INTEG.LT.MAXINT.OR.MAXINT.EQ.0)) GO TO 400
C
C***  RUN-STATISTIC
C
  600 IF(IDOKU.GT.0) WRITE(LOUT,1600) T(1),INTEG,IINFO(38),ILIN(10)
C
C***  CLOSE CHECKPOINT-FILE
C
      CALL FDS301(IFILE(1),'FDS1','KEEP',IOS,UR(1))
      IF(IOS.NE.0)  IERR=301
C
  700 CALL FDST10(LOUT,IERR,TNAM)
C$$$  CALL FDS889(TNAM,ILIN(10),IND,IERR)
C
C
C**** END OF CALCULATION
C     ------------------
C
 1000 FORMAT(' ',70('*')/' F I D I S O L     PROGRAM PACKAGE '/
     &       ' FDSF01  -  VERSION FOR THE SOLUTION OF A',
     &       ' 2-DIMENSIONAL PARABOLIC'/12X,'PDE SYSTEM WITH',
     &       ' PRESCRIBED GRID AND ORDER'/' ',70('*')/' ')
 1010 FORMAT(' TEST OF THE INPUT PARAMETERS IN X-DIRECTION')
 1020 FORMAT(' TEST OF THE INPUT PARAMETERS IN Y-DIRECTION')
 1040 FORMAT(/' NUMBERS OF GRID POINTS:',11X,2I10/
     &       ' ORDERS OF THE DIFFERENCE FORMULAE:',2I10/
     &       ' NUMBER OF SOLUTION COMPONENTS: ',I13/
     &       ' TOLERANCE: ',G28.4/
     &       ' MACHINE CONSTANT  EPS =',G16.4/
     &       ' VALUES PER FILE RECORD:',I8)
 1050 FORMAT(/' MATRIX GENERATION WITH ORDER:',I5)
 1100 FORMAT(' '/' *** CONTINUE INTEGRATION WITH STEP:',I10)
 1600 FORMAT(' '/' ********** RUN STATISTICS *********'/
     &       ' LAST T-VALUE:',G20.4/
     &       ' TOTAL NUMBER OF INTEGRATION STEPS:',I16/
     &       ' TOTAL NUMBER OF FAILED STEPS:',I21/
     &       ' NUMBER OF MATRIX-VECTOR MULTIPLICATIONS:',I10/)
C
      R E T U R N
C-----END OF FDSF01----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::41    ,,,,,FDSF10.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF10 (DEFMAX,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,
     &                   IWORK,MIW,DWORK,MDW,FDSU01,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 1 0   COMPUTATION OF THE DEFECT.                   ***
C**      AT FIRST THE SOLUTION IS READ AND SORTED IN DIFFERENT WAYS.***
C**      THEN THE DERIVATIVES ARE COMPUTED FROM THE DIFFERENCE      ***
C**      FORMULAE. FOR THE COMPUTATION OF THE DEFECT THE SOLUTION   ***
C**      AND DERIVATIVES ARE SORTED ON TWO FILES FOR INNER GRID-    ***
C**      POINTS AND BOUNDARY POINTS. THE DEFECT IS COMPUTED IN      ***
C**      PARTS OF MV VALUES IN THE USER-SUBROUTINES FDSU01 AND      ***
C**      FDSU02. AT LAST THE BOUNDARY DEFECT IS MERGED WITH THE     ***
C**      INNER DEFECT AND WRITTEN ON FILE.                          ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IWORK(1),MIW,MDW,IERR
      DOUBLE PRECISION  DEFMAX,DINFO(1),U1(1),U2(1),DWORK(1)
      LOGICAL  LINFO(1)
      EXTERNAL  FDSU01 , FDSU02
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C DEFMAX I  DP  I OUT I  MAXIMUM OF THE DEFECT
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : IINFO(24)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+2)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : LINFO(3)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C        I      I     I  ARRAY : IFILE(6)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES
C        I      I     I  ARRAY : UR(6)
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR COMPLETE SOLUTION
C        I      I     I  ARRAY : U1(M) , U2(M)
C--------I------I-----I------------------------------------------------
C IWORK  I  I   I  -  I  INTEGER WORKARRAY OF LENGTH MIW
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IWORK  ( MIW >= 3 * MV )
C--------I------I-----I------------------------------------------------
C DWORK  I  DP  I  -  I  REAL WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DWORK
C        I      I     I  ( MDW >= M222*NK+MT*NK+(2+6*NK)*MV )
C        I      I     I  ( MDW >= M+4*MV)
C--------I------I-----I------------------------------------------------
C FDSU01 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE INNER DEFECT
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE BOUNDARY
C        I      I     I  DEFECT
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,NX,NY,MNX,MNY,MLF,N,M,MV,RL,RL4,IN,M222,MT,
     &         IX,IY,IT,II1,II2,II3,II4,II5,II6,II7,II8,II9,
     &         II12,I1,I2,I3,RN1,RN5
      DOUBLE PRECISION  T , ABT
      LOGICAL  PARA, LX, LY
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK   = IINFO(1)
      NX   = IINFO(2)
      NY   = IINFO(3)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      MLF  = IINFO(8)
      N    = IINFO(9)
      M    = IINFO(10)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
      MT   = IINFO(15)
      RL4  = IINFO(24)
C
      IX   = 0
      IY   = MNX + IX
      IT   = MNY + IY + 1
      T    = DINFO(IT)
      PARA = LINFO(1)
      LX   = LINFO(2)
      LY   = LINFO(3)
C
      IF(MIW.LT.3*MV.OR.MDW.LT.(M222+MT)*NK+(2+6*NK)*MV
     &   .OR.MDW.LT.M+4*MV) THEN
         IERR = 10
         RETURN
      ENDIF
C
      II1  = 1 + M222 * NK
      II2  = II1  + MV
      II4  = II2  + MV
      II5  = II4  + MV * NK
      II6  = II5  + MT * NK
      II7  = II6  + MV * NK
      II8  = II7  + MV * NK
      II9  = II8  + MV * NK
C
C***     SORTING OF THE SOLUTION FOR THE COMPUTATION
C        OF THE DERIVATIVES
C
      CALL FDS422(N,NX,NY,NK,MV,M222,U1,U2,DWORK(1),IFILE(3),
     &            IFILE(4),UR(3),UR(4),RL,RL4,IERR)
      IF(IERR.NE.0) RETURN
C
C***     COMPUTATION OF THE X- AND Y-DERIVATIVES
C
      I1 = 1
      I2 = I1 + MV
      I3 = I2 + MV
      CALL FDSE14(N,NX,NY,NK,MNX,MNY,MLF,MV,M222,IN,
     &            IWORK(I1),IWORK(I2),IWORK(I3),DWORK(II1),
     &            U1,U2,DWORK(1),IFILE(2),IFILE(3),IFILE(4),
     &            IFILE(5),UR(2),UR(3),UR(4),UR(5),RL,RL4,.FALSE.,IERR)
      IF(IERR.NE.0) RETURN
      IF(PARA)  THEN
C
C***     COMPUTATION OF THE T-DERIVATIVE
C
      ABT = DINFO(IT+1)
      RN1 = IINFO(43)*2*IN*NK+1
      CALL FDSF14(N,NX,NY,NK,MV,M222,IN,ABT,U1,U2,DWORK(1),
     &            IFILE(1),IFILE(3),IFILE(4),IFILE(5),UR(1),
     &            UR(3),UR(4),UR(5),RN1,RL,RL4,IERR)
      IF(IERR.NE.0) RETURN
      END IF
C
C***     SORTING OF THE SOLUTION AND DERIVATIVES FOR THE
C        COMPUTATION OF THE INNER DEFECT.
C
      CALL FDS423(N,NK,NX,NY,MV,IN,IFILE(3),UR(3),IFILE(5),UR(5),
     &            IFILE(6),UR(6),RL,DINFO(IX+1),DINFO(IY+1),
     &            DWORK(II1),DWORK(II2),DWORK(II4),
     &            DWORK(1),M222,LX,LY,IERR)
      IF(IERR.NE.0) RETURN
C
C***     COMPUTATION OF THE INNER DEFECT
C
      II12 = II9  + MV * NK
      CALL FDSF15(N,NK,MT,MV,IN,T,DWORK(II1),DWORK(II2),
     &            DWORK(II4),DWORK(II5),DWORK(II6),DWORK(II7),
     &            DWORK(II8),DWORK(II9),DWORK(II12),IFILE(6),
     &            IFILE(5),UR(6),UR(5),RL,PARA,FDSU01,IERR)
      IF(IERR.NE.0) RETURN
      RN5 = IN * NK + 1
      IF(LX) GO TO 220
C
C***     DEFECT FOR BOUNDARY X = XAN
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 200 I2 = 1,NY
            DWORK(II1+I2-1) = DINFO(IX+1 )
            DWORK(II2+I2-1) = DINFO(IY+I2)
  200    CONTINUE
         CALL FDSF16(1,NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),
     &            DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
         IF(IERR.NE.0) RETURN
C
C***     DEFECT FOR BOUNDARY X = XEN
C
         DO 210 I2 = 1,NY
           DWORK(II1+I2-1) = DINFO(IX+NX)
  210    CONTINUE
         CALL FDSF16(2,NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),
     &            DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
         IF(IERR.NE.0) RETURN
  220 IF(LY) GO TO 280
C
C***     DEFECT FOR BOUNDARY Y = YAN
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 230 I1 = 1,NX
            DWORK(II1+I1-1) = DINFO(IX+I1)
            DWORK(II2+I1-1) = DINFO(IY+1 )
  230    CONTINUE
         CALL FDSF16(3,NX,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),
     &            DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
         IF(IERR.NE.0) RETURN
C
C***     DEFECT FOR BOUNDARY Y = YEN
C
         DO 240 I1 = 1,NX
           DWORK(II2+I1-1) = DINFO(IY+NY)
  240    CONTINUE
         CALL FDSF16(4,NX,NK,MT,MV,T,DWORK(II1),DWORK(II2),
     &            DWORK(II4),DWORK(II5),DWORK(II6),
     &            DWORK(II7),DWORK(II8),DWORK(II9),
     &            DWORK(II12),IFILE(4),IFILE(5),
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)
         IF(IERR.NE.0) RETURN
C
C***     MERGE THE INNER DEFECT WITH THE BOUNDARY DEFECT
C
  280    II1 = 1
         II2 = II1 + M
         II3 = II2 + MV
         II4 = II3 + MV
         II5 = II4 + MV
         CALL FDS424(NK,NX,NY,N,MV,IN,IFILE(5),IFILE(3),UR(5),UR(3),
     &            RL,DWORK(II1),DWORK(II2),DWORK(II3),DWORK(II4),
     &            DWORK(II5),U1,DEFMAX,LX,LY,IERR)
         IF(IERR.NE.0) RETURN
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF10----------------------------------------------------
      E    N    D
C:::42    ,,,,,FDSF14.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDSF14 (N,NX,NY,NK,MV,M222,IN,ABT,U1,U2,U222,
     &                   IFILE1,IFILE3,IFILE4,IFILE5,UR1,UR3,
     &                   UR4,UR5,RN1,RL,RL4,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 1 4   COMPUTES THE T-DERIVATIVE.                   ***
C**      THE FIX PART OF THE T-DERIVATIVE (COMPUTED WITH THE        ***
C**      SOLUTION AT EARLIER T-STEPS) IS READ FROM FILE 1.          ***
C**      FROM FILE 3 THE SOLUTION AT THE ACTUAL T-STEP IS READ.     ***
C**      ON FILE 4 THE DERIVATIVES ON THE BOUNDARY-LINES ARE        ***
C**      WRITTEN. ON FILE 5 THE DERIVATIVES FOR THE WHOLE GRID ARE  ***
C**      WRITTEN.                                                   ***
C**      FOR RECORD NUMBERS SEE FILE-CATALOG.                       ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N,NX,NY,NK,MV,M222,IN,IFILE1,IFILE3,IFILE4,
     &         IFILE5,UR1,UR3,UR4,UR5,RN1,RL,RL4,IERR
      DOUBLE PRECISION  ABT,U1(N,NK),U2(N,NK),U222(M222,NK)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C ABT    I  DP  I IN  I  COEFFICIENT OF THE DIFFERENCE FORMULA AT
C        I      I     I  THE ACTUAL T
C--------I------I-----I------------------------------------------------
C U1,U2  I  DP  I  -  I  WORKARRAYS FOR THE COMPUTATION OF THE
C        I      I     I  T-DERIVATIVE.
C        I      I     I  ARRAYS : U1(N,NK) , U2(N,NK)
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSE14.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   II,IK,IOS,PFE,RN3,RN4,RN5,I
      EXTERNAL  FDS317, FDS318
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN3 = 1
      RN5 = 4 * NK *IN + 1
C
C***  READ THE FIX PART OF THE T-DERIVATIVE
C
      CALL FDS332(U1,N,NK,MV,IFILE1,RN1,RL,UR1,FDS317,IERR)
C
C***  READ THE ACTUAL SOLUTION
C
      CALL FDS332(U2,N,NK,MV,IFILE3,RN3,RL,UR3,FDS317,IERR)
C
C***  COMPUTE THE T-DERIVATIVE
C
      CALL FDS221(N*NK,U1,U2,U1,ABT)
      IF(IERR.NE.0) RETURN
C
C***  WRITE T-DERIVATIVE ON FILE 5
C
      CALL FDS332(U1,N,NK,MV,IFILE5,RN5,RL,UR5,FDS318,IERR)
      IF(IERR.NE.0) RETURN
C
C***  T-DERIVATIVE COMPLETE, SORT AND WRITE BOUNDARY VALUES ON FILE 4
C
      II = NX + 2
      DO 310 IK = 1,NK
 310     U222(6,IK) = U1(II,IK)
C     RN4 = 30 * NK + 1
      RN4 = 22 * NK + 1
      DO 320 IK = 1,NK
         CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(1,IK),NX,IERR,UR4)
 320  CONTINUE
      II = (NY - 1) * NX + 1
      DO 330 IK = 1,NK
         CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U1(II,IK),NX,IERR,UR4)
 330  CONTINUE
C
C***  DERIVATIVE IN Y-X-SORTING
C
      CALL FDS421(NX,NY,NK,U1,U2)
C     RN4 = 28 * NK + 1
      RN4 = 20 * NK + 1
      DO 340 IK = 1,NK
         CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(1,IK),NY,IERR,UR4)
 340  CONTINUE
      II = (NX - 1) * NY + 1
      DO 350 IK = 1,NK
         CALL FDS318(IFILE4,IOS,RN4,RL4,PFE,U2(II,IK),NY,IERR,UR4)
 350  CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF14----------------------------------------------------
      E    N    D
C:::43    ,,,,,FDSF15.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF15 (N,NK,MT,MV,IN,T,X,Y,U,UT,UX,UXX,UY,UYY,P,
     &                   IFILE6,IFILE5,UR6,UR5,RL,PARA,FDSU01,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 1 5   COMPUTES THE DEFECT FOR THE INNER GRIDPOINTS ***
C**      FROM FILE 6  NV VALUES FOR THE DEFECT-COMPUTATION ARE READ.***
C**      THESE VALUES ARE SORTED IN FDS423, SO THAT ONLY INNER      ***
C**      VALUES ARE READ AND THE USER-SUBROUTINE FDSU01 CAN COMPUTE ***
C**      THE DEFECT FOR NV INNER VALUES.                            ***
C**      THE NV DEFECT-VALUES ARE WRITTEN ON FILE 5.                ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N,NK,MT,MV,IN,IFILE6,IFILE5,UR6,UR5,RL,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),U(MV,NK),UT(MT,NK),UX(MV,NK),
     &                  UXX(MV,NK),UY(MV,NK),UYY(MV,NK),P(MV,NK)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MT,MV  I  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  ACTUAL T-VALUE
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I  -  I  WORKARRAY FOR THE COORDINATES
C        I      I     I  ARRAYS : X(MV) , Y(MV)
C--------I------I-----I------------------------------------------------
C U,UT   I  DP  I  -  I  WORKARRAYS FOR THE SOLUTION, THE DERIVATIVES
C UX,UXX I      I     I  AND THE DEFECT.
C UY,UYY I      I     I  ARRAYS : U..(MV,NK), UT(MT,NK), P(MV,NK)
C P      I      I     I
C--------I------I-----I------------------------------------------------
CIFILE6,5I  I   I IN  I  UNITNUMBERS
C--------I------I-----I------------------------------------------------
C UR6,5  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PARA   I  L   I IN  I  = TRUE IF PROBLEM IS PARABOLIC
C--------I------I-----I------------------------------------------------
C FDSU01 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  INNER-DEFECT.
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IK,IOS,J,NV,PFE,RN6,RN5
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN6 = 1
      RN5 = 1
      NV  = MV
      DO 100 J = 1,IN
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
C
C***  READ NV VALUES OF THE COORDINATES, THE SOLUTION AND
C     THE DERIVATIVES FROM FILE 6
C
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,X,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Y,NV,IERR,UR6)
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,U  (1,IK),NV,IERR,UR6)
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UX (1,IK),NV,IERR,UR6)
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UXX(1,IK),NV,IERR,UR6)
         DO 40 IK = 1,NK
   40    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UY (1,IK),NV,IERR,UR6)
         DO 50 IK = 1,NK
   50    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UYY(1,IK),NV,IERR,UR6)
         IF(PARA) THEN
         DO 60 IK = 1,NK
   60    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UT (1,IK),NV,IERR,UR6)
         END IF
C
C***  COMPUTE THE DEFECT FOR NV INNER GRIDPOINTS
C
      CALL FDSU01(T,X,Y,U,UT,UX,UXX,UY,UYY,P,MT,MV,NK,NV)
C
C***  WRITE THE DEFECT ON FILE 5
C
      DO 70 IK = 1,NK
         CALL FDS318(IFILE5,IOS,RN5,RL,PFE,P(1,IK),NV,IERR,UR5)
   70 CONTINUE
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF15----------------------------------------------------
      E    N    D
C:::44    ,,,,,FDSF16.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF16 (IRAND,N,NK,MT,MV,T,X,Y,U,UT,UX,UXX,UY,UYY,P,
     &               IFILE4,IFILE5,UR4,UR5,RL,RL4,RN5,PARA,FDSU02,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 1 6   COMPUTES THE DEFECT FOR ONE BOUNDARY-LINE.   ***
C**      FROM FILE 4  N VALUES FOR THE SOLUTION AND THE DERIVATIVES ***
C**      ARE READ. THESE VALUES ARE STORED IN THE SORTING OF THE    ***
C**      BOUNDARY-LINE.                                             ***
C**      THE N DEFECT-VALUES ARE WRITTEN ON FILE 5.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IRAND,N,NK,MT,MV,IFILE4,IFILE5,UR4,UR5,RL,RL4,RN5,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),U(MV,NK),UT(MT,NK),UX(MV,NK),
     &                  UXX(MV,NK),UY(MV,NK),UYY(MV,NK),P(MV,NK)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IRAND  I  I   I IN  I  NUMBER OF THE BOUNDARY-LINE.
C        I      I     I  IRAND = 1 :  X = XAN
C        I      I     I          2 :  X = XEN
C        I      I     I          3 :  Y = YAN
C        I      I     I          4 :  Y = YEN
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS WITHIN THE BOUNDARY-LINE
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I IN  I  COORDINATES OF THE BOUNDARY POINTS
C        I      I     I  ARRAYS : X(MV) , Y(MV)
C--------I------I-----I------------------------------------------------
C RL4    I  I   I IN  I  RECORD LENGTH FOR FILE 4
C--------I------I-----I------------------------------------------------
C RN5    I  I   I IN  I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C FDSU02 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-DEFECT.
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSF15.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  IK,IOS,PFE,RN4
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ THE BOUNDARY-VALUES OF THE SOLUTION AND THE
C     DERIVATIVES FROM FILE 4
C
         RN4 = (IRAND - 1) * NK + 1
         DO 10 IK=1,NK
   10    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,U  (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 20 IK=1,NK
   20    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UX (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 30 IK=1,NK
   30    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UXX(1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 40 IK=1,NK
   40    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UY (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 50 IK=1,NK
   50    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UYY(1,IK),N,IERR,UR4)
         IF(PARA) THEN
         RN4 = RN4 + 3 * NK
         DO 60 IK=1,NK
   60    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UT(1,IK),N,IERR,UR4)
         END IF
C
C***  COMPUTE THE BOUNDARY-DEFECT
C
      CALL FDSU02(IRAND,T,X,Y,U,UT,UX,UXX,UY,UYY,P,MT,MV,NK,N)
C
C***  WRITE THE DEFECT ON FILE 5
C
      DO 200 IK = 1,NK
         CALL FDS318(IFILE5,IOS,RN5,RL,PFE,P (1,IK),N,IERR,UR5)
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF16----------------------------------------------------
      E    N    D
C@PROCESS DIRECTIVE('*DIR')
C:::44    ,,,,,FDSF20.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF20 (IINFO,DINFO,LINFO,IFILE,UR,DW,MDW,
     &                   FDSU03,FDSU04,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 2 0   COMPUTATION OF THE JACOBI-MATRICES.          ***
C**      IN FDSF10 THE SOLUTION AND DERIVATIVES WERE COMPUTED AND   ***
C**      STORED IN SUITING SORTINGS ON TWO FILES FOR INNER GRID-    ***
C**      POINTS AND BOUNDARY POINTS. IN FDSF20 THESE VALUES ARE     ***
C**      READ AND THE JACOBI-MATRICES ARE COMPUTED IN PARTS OF MV   ***
C**      VALUES IN THE USER-SUBROUTINES FDSU03 AND FDSU04.          ***
C**      AT LAST THE BOUNDARY VALUES ARE MERGED WITH THE INNER      ***
C**      VALUES AND ALL JACOBI-MATRICES WRITTEN ON FILE             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),MDW,IERR
      DOUBLE PRECISION  DINFO(1),DW(1)
      LOGICAL  LINFO(1)
      EXTERNAL  FDSU03 , FDSU04
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : IINFO(24)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+1)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : LINFO(3)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS
C        I      I     I  ARRAY : IFILE(7)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES
C        I      I     I  ARRAY : UR(7)
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY OF LENGTH MDW
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DW  (MDW >= (1+NK)*MT+(7+5*NK)*MV)
C        I      I     I                (MDW >= 4*MV+N)
C--------I------I-----I------------------------------------------------
C FDSU03 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE INNER
C        I      I     I  JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C FDSU04 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE BOUNDARY
C        I      I     I  JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  NK,NX,NY,N,MV,RL,RL4,IN,M222,MT,I1,I2,IX,IY,
     &         II1,II2,II4,II5,II6,II7,II8,II9,II12,
     &         II13,II14,II15,II16,II17,I222,IE,IK,INCR,
     &         NR1,NR2,NR3,NR4,RNJ,MNX,MNY
      DOUBLE PRECISION  T
      LOGICAL  PARA, LX, LY
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NK   = IINFO(1)
      NX   = IINFO(2)
      NY   = IINFO(3)
      MNX  = IINFO(5)
      MNY  = IINFO(6)
      N    = IINFO(9)
      MV   = IINFO(11)
      RL   = IINFO(12)
      IN   = IINFO(13)
      M222 = IINFO(14)
      MT   = IINFO(15)
      RL4  = IINFO(24)
C
      T    = DINFO(MNX+MNY+1)
C
      PARA = LINFO(1)
      LX   = LINFO(2)
      LY   = LINFO(3)
C
      IF(MDW.LT.(1+NK)*MT+(7+5*NK)*MV.OR.MDW.LT.4*MV+N) THEN
         IERR = 20
         RETURN
      ENDIF
C
      IX   = 0
      IY   = MNX + IX
      II1  = 1
      II2  = II1  + MV
      II4  = II2  + MV
      II5  = II4  + MV * NK
      II6  = II5  + MT * NK
      II7  = II6  + MV * NK
      II8  = II7  + MV * NK
      II9  = II8  + MV * NK
      II12 = II9  + MV * NK
      II13 = II12  + MV
      II14 = II13  + MT
      II15 = II14  + MV
      II16 = II15  + MV
      II17 = II16  + MV
C
C***  COMPUTATION OF THE JACOBI-MATRICES AT INNER GRIDPOINTS
C
      CALL FDSF21(N,NK,MT,MV,IN,T,DW(II1),DW(II2),DW(II4),DW(II5),
     &            DW(II6),DW(II7),DW(II8),DW(II9),DW(II12),DW(II13),
     &            DW(II14),DW(II15),DW(II16),DW(II17),IFILE(6),
     &            IFILE(7),UR(6),UR(7),RL,PARA,FDSU03,IERR)
      IF(IERR.NE.0) RETURN
      RNJ = 4 * M222 * NK + 1
      IF(LX) GO TO 220
C
C***     JACOBI-MATRICES FOR BOUNDARY  X = XAN
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 200 I2 = 1,NY
            DW(II1+I2-1) = DINFO(IX+1 )
            DW(II2+I2-1) = DINFO(IY+I2)
  200    CONTINUE
         NR1 = RNJ
         CALL FDSF22(1,NY,NK,MT,MV,T,DW(II1),DW(II2),DW(II4),
     &            DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II12),
     &            DW(II13),DW(II14),DW(II15),DW(II16),DW(II17),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,FDSU04,IERR)
      IF(IERR.NE.0) RETURN
C
C***     JACOBI-MATRICES FOR BOUNDARY  X = XEN
C
         DO 210 I2 = 1,NY
           DW(II1+I2-1) = DINFO(IX+NX)
  210    CONTINUE
         NR2 = RNJ
         CALL FDSF22(2,NY,NK,MT,MV,T,DW(II1),DW(II2),DW(II4),
     &            DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II12),
     &            DW(II13),DW(II14),DW(II15),DW(II16),DW(II17),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,FDSU04,IERR)
      IF(IERR.NE.0) RETURN
  220 IF(LY) GO TO 280
C
C***     JACOBI-MATRICES FOR BOUNDARY  Y = YAN
C
C$DIR NO_RECURRENCE
C*DIR IGNORE RECRDEPS
CDIR$ IVDEP
*VOCL LOOP,NOVREC
         DO 230 I1 = 1,NX
            DW(II1+I1-1) = DINFO(IX+I1)
            DW(II2+I1-1) = DINFO(IY+1 )
  230    CONTINUE
         NR3 = RNJ
         CALL FDSF22(3,NX,NK,MT,MV,T,DW(II1),DW(II2),DW(II4),
     &            DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II12),
     &            DW(II13),DW(II14),DW(II15),DW(II16),DW(II17),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,FDSU04,IERR)
      IF(IERR.NE.0) RETURN
C
C***     JACOBI-MATRICES FOR BOUNDARY  Y = YEN
C
         DO 240 I1 = 1,NX
           DW(II2+I1-1) = DINFO(IY+NY)
  240    CONTINUE
         NR4 = RNJ
         CALL FDSF22(4,NX,NK,MT,MV,T,DW(II1),DW(II2),DW(II4),
     &            DW(II5),DW(II6),DW(II7),DW(II8),DW(II9),DW(II12),
     &            DW(II13),DW(II14),DW(II15),DW(II16),DW(II17),
     &            IFILE(4),UR(4),RL4,RNJ,PARA,FDSU04,IERR)
      IF(IERR.NE.0) RETURN
C
C***     MERGE THE INNER VALUES OF THE JACOBI-MATRICES
C        WITH THE BOUNDARY VALUES
C
  280    RNJ = 1
         INCR = M222 * NK * NK
         II5 = II4 + MV
         II6 = II5 + MV
         DO 300 IE = 1,NK
         DO 300 IK = 1,NK
            DO 290 I222 = 1,M222
            CALL FDS425(NX,NY,MV,IFILE(7),UR(7),RNJ,INCR,
     &           IFILE(4),UR(4),NR1,NR2,NR3,NR4,RL,RL4,
     &           DW(II6),DW(II1),DW(II2),DW(II4),DW(II5),LX,LY)
  290       CONTINUE
  300    CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF20----------------------------------------------------
      E    N    D
C:::45    ,,,,,FDSF21.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF21 (N,NK,MT,MV,IN,T,X,Y,U,UT,UX,UXX,UY,UYY,
     &                   PU,PUT,PUX,PUXX,PUY,PUYY,IFILE6,IFILE7,
     &                   UR6,UR7,RL,PARA,FDSU03,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 2 1   COMPUTES THE ELEMENTS OF THE JACOBI-MATRICES ***
C**      FOR THE INNER GRIDPOINTS. FROM FILE 6 NV VALUES OF THE     ***
C**      SOLUTION AND THE DERIVATIVES ARE READ. THESE VALUES ARE    ***
C**      SORTED IN FDS423, SO THAT ONLY INNER VALUES ARE READ AND   ***
C**      THE USER-SUBROUTINE FDSU03 CAN COMPUTE THE JACOBI-MATRICES ***
C**      FOR NV INNER VALUES.                                       ***
C**      THE JACOBI-MATRICES ARE WRITTEN ON FILE 7.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  N,NK,MT,MV,IN,IFILE6,IFILE7,UR6,UR7,RL,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),U(MV,NK),UT(MT,NK),UX(MV,NK),
     &                  UXX(MV,NK),UY(MV,NK),UYY(MV,NK),PU(MV),
     &                  PUT(MT),PUX(MV),PUXX(MV),PUY(MV),PUYY(MV)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C MT,MV  I  I   I IN  I  ARRAY BOUNDS
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = N / MV  ROUNDED UPON THE NEXT INTEGER
C--------I------I-----I------------------------------------------------
C T      I  DP  I IN  I  ACTUAL T-VALUE
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I  -  I  WORKARRAY FOR THE COORDINATES
C        I      I     I  ARRAYS : X(MV) , Y(MV)
C--------I------I-----I------------------------------------------------
C U,UT   I  DP  I  -  I  WORKARRAYS FOR THE SOLUTION AND THE
C UX,UXX I      I     I  DERIVATIVES
C UY,UYY I      I     I  ARRAYS : U..(MV,NK), UT(MT,NK)
C--------I------I-----I------------------------------------------------
C PU,PUT I  DP  I  -  I  WORKARRAYS FOR THE JACOBI-MATRICES
C PUX,XX I      I     I
C PUY,YY I      I     I  ARRAYS : PU..(MV), PUT(MT)
C--------I------I-----I------------------------------------------------
CIFILE6,7I  I   I IN  I  UNITNUMBERS
C--------I------I-----I------------------------------------------------
C UR6,7  I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C PARA   I  L   I IN  I  = TRUE IF PROBLEM IS PARABOLIC
C--------I------I-----I------------------------------------------------
C FDSU03 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  JACOBI-MATRICES AT INNER GRIDPOINTS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IE,IK,IOS,J,NV,PFE,RN6,RN7
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      RN6 = 1
      RN7 = 1
      NV  = MV
      DO 100 J = 1,IN
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
C
C***  READ NV VALUES OF THE COORDINATES, THE SOLUTION AND
C     THE DERIVATIVES FROM FILE 6
C
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,X,NV,IERR,UR6)
         CALL FDS317(IFILE6,IOS,RN6,RL,PFE,Y,NV,IERR,UR6)
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,U  (1,IK),NV,IERR,UR6)
         DO 15 IK = 1,NK
   15    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UX (1,IK),NV,IERR,UR6)
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UXX(1,IK),NV,IERR,UR6)
         DO 25 IK = 1,NK
   25    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UY (1,IK),NV,IERR,UR6)
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UYY(1,IK),NV,IERR,UR6)
         IF(PARA) THEN
         DO 35 IK = 1,NK
   35    CALL FDS317(IFILE6,IOS,RN6,RL,PFE,UT (1,IK),NV,IERR,UR6)
         END IF
C
C***  COMPUTE THE JACOBI-MATRICES FOR NV INNER GRIDPOINTS
C
      DO 60 IE = 1,NK
      DO 60 IK = 1,NK
C
C***  INITIALIZE PU-ARRAYS
C
      DO 55 I = 1,MV
         PU  (I) = ZERO
         PUX (I) = ZERO
         PUXX(I) = ZERO
         PUY (I) = ZERO
         PUYY(I) = ZERO
  55  CONTINUE
      DO 160 I = 1,MT
         PUT(I) = ZERO
  160 CONTINUE
C
C***     PARTIAL DERIVATIVES FOR EQUATION IE AND SOLUTION COMPONENT IK
C
         CALL FDSU03(IE,IK,T,X,Y,U,UT,UX,UXX,UY,UYY,PU,PUT,
     &               PUX,PUXX,PUY,PUYY,MT,MV,NK,NV)
C
C***     WRITE THE JACOBI-MATRICES (IN MV PARTS) ON FILE 7
C
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PU  ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUX ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUXX,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUY ,NV,IERR,UR7)
         CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUYY,NV,IERR,UR7)
         IF(PARA) CALL FDS318(IFILE7,IOS,RN7,RL,PFE,PUT,NV,IERR,UR7)
         IF(IOS.NE.0) THEN
            IERR = 21 + IFILE7 * 10000
            RETURN
         ENDIF
   60 CONTINUE
C
  100 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF21----------------------------------------------------
      E    N    D
C:::46    ,,,,,FDSF22.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF22 (IRAND,N,NK,MT,MV,T,X,Y,U,UT,UX,UXX,UY,UYY,
     &                   PU,PUT,PUX,PUXX,PUY,PUYY,IFILE4,
     &                   UR4,RL4,RNJ,PARA,FDSU04,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 2 2   COMPUTES THE ELEMENTS OF THE JACOBI-MATRICES ***
C**      FOR ONE BOUNDARY-LINE.  FROM FILE 4  N VALUES FOR THE      ***
C**      SOLUTION AND THE DERIVATIVES ARE READ. THESE VALUES ARE    ***
C**      STORED IN THE SORTING OF THE BOUNDARY-LINE.                ***
C**      THE JACOBI-MATRICES ARE WRITTEN ON FILE 4.                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  IRAND,N,NK,MT,MV,IFILE4,UR4,RL4,RNJ,IERR
      DOUBLE PRECISION  T,X(MV),Y(MV),U(MV,NK),UT(MT,NK),UX(MV,NK),
     &                  UXX(MV,NK),UY(MV,NK),UYY(MV,NK),PU(MV),
     &                  PUT(MV),PUX(MV),PUXX(MV),PUY(MV),PUYY(MV)
      LOGICAL  PARA
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C IRAND  I  I   I IN  I  NUMBER OF THE BOUNDARY-LINE.
C        I      I     I  IRAND = 1 :  X = XAN
C        I      I     I          2 :  X = XEN
C        I      I     I          3 :  Y = YAN
C        I      I     I          4 :  Y = YEN
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS WITHIN THE BOUNDARY-LINE
C--------I------I-----I------------------------------------------------
C X,Y    I  DP  I IN  I  COORDINATES OF THE BOUNDARY POINTS
C        I      I     I  ARRAYS : X(MV) , Y(MV)
C--------I------I-----I------------------------------------------------
C RL4    I  I   I IN  I  RECORD LENGTH FOR FILE 4
C--------I------I-----I------------------------------------------------
C RNJ    I  I   I IN  I  RECORD NUMBER
C--------I------I-----I------------------------------------------------
C FDSU04 I  E   I IN  I  NAME OF THE USER-SUBROUTINE FOR THE
C        I      I     I  BOUNDARY-JACOBI-MATRICES
C--------I------I-----I------------------------------------------------
C FOR THE DESCRIPTION OF THE OTHER PARAMETERS SEE FDSF21.
C----------------------------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I,IE,IK,IOS,PFE,RN4
      DOUBLE PRECISION  ZERO
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
C***  READ THE BOUNDARY-VALUES OF THE SOLUTION AND THE
C     DERIVATIVES FROM FILE 4
C
         RN4 = (IRAND - 1) * NK + 1
         DO 10 IK = 1,NK
   10    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,U  (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 20 IK = 1,NK
   20    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UX (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 30 IK = 1,NK
   30    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UXX(1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 40 IK = 1,NK
   40    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UY (1,IK),N,IERR,UR4)
         RN4 = RN4 + 3 * NK
         DO 50 IK = 1,NK
   50    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UYY(1,IK),N,IERR,UR4)
         IF(PARA) THEN
         RN4 = RN4 + 3 * NK
         DO 60 IK = 1,NK
   60    CALL FDS317(IFILE4,IOS,RN4,RL4,PFE,UT(1,IK),N,IERR,UR4)
         END IF
C
C***  COMPUTE THE BOUNDARY-JACOBI-MATRICES
C
      DO 200 IE = 1,NK
      DO 200 IK = 1,NK
C
C***  INITIALIZE PU-ARRAYS
C
      DO 150 I = 1,MV
         PU  (I) = ZERO
         PUX (I) = ZERO
         PUXX(I) = ZERO
         PUY (I) = ZERO
         PUYY(I) = ZERO
  150 CONTINUE
      DO 160 I = 1,MT
         PUT(I) = ZERO
  160 CONTINUE
C
C***     PARTIAL DERIVATIVES FOR EQUATION IE AND SOLUTION COMPONENT IK
C
         CALL FDSU04(IRAND,IE,IK,T,X,Y,U,UT,UX,UXX,UY,UYY,
     &               PU,PUT,PUX,PUXX,PUY,PUYY,MT,MV,NK,N)
C
C***     WRITE THE JACOBI-MATRICES ON FILE 4
C
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PU  ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUX ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUXX,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUY ,N,IERR,UR4)
         CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUYY,N,IERR,UR4)
         IF(PARA) CALL FDS318(IFILE4,IOS,RNJ,RL4,PFE,PUT,N,IERR,UR4)
         IF(IOS.NE.0) THEN
            IERR = 22 + IFILE4 * 10000
            RETURN
         ENDIF
  200 CONTINUE
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF22----------------------------------------------------
      E    N    D
C:::47    ,,,,,FDSF40.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF40 (EPS,IINFO,DINFO,LINFO,IFILE,UR,U1,IW,MIW,
     &                   DW,MDW,ILIN,LLIN,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   F D S F 4 0    COMPUTATION OF THE QD-MATRIX.                  ***
C**   FOR EACH BLOCK-DIAGONAL FDSF41 IS CALLED FOR THE COMPUTATION  ***
C**   OF THE DIAGONALPARTS. FDS441 MERGES THE DIAGONALPARTS TO THE  ***
C**   DIAGONALS OF THE MATRIX AND WRITES THEM ON SEQUENTIAL FILE 8. ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  IINFO(1),IFILE(1),UR(1),IW(1),MIW,MDW,ILIN(1),IERR
      DOUBLE PRECISION  EPS,DINFO(1),U1(1),DW(1)
      LOGICAL  LINFO(1),LLIN(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C IINFO  I  I   I IN  I  INFORMATION-VECTOR         ARRAY : IINFO(23)
C--------I------I-----I------------------------------------------------
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR
C        I      I     I  ARRAY : DINFO(MNX+MNY+2)
C--------I------I-----I------------------------------------------------
C LINFO  I  L   I IN  I  INFORMATION-VECTOR         ARRAY : LINFO(3)
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS               ARRAY : IFILE(8)
C--------I------I-----I------------------------------------------------
C UR     I  I   I I/O I  SYNCHRONISATION-VARIABLES     ARRAY : UR(8)
C--------I------I-----I------------------------------------------------
C U1     I  DP  I  -  I  WORKARRAY FOR 1 DIAGONAL      ARRAY : U1(M)
C--------I------I-----I------------------------------------------------
C IW     I  I   I  -  I  WORKARRAY                     ARRAY : IW(MIW)
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  LENGTH OF IW          ( MIW >= 3 * IDMAX )
C--------I------I-----I------------------------------------------------
C DW     I  DP  I  -  I  WORKARRAY                     ARRAY : DW(MDW)
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  LENGTH OF DW          ( MDW >= MAX(M,10*MV)
C--------I------I-----I------------------------------------------------
C ILIN   I  I   I I/O I  INFORMATION-VECTOR FOR LINSOL
C        I      I     I  ARRAY : ILIN(13)
C--------I------I-----I------------------------------------------------
C LLIN   I  L   I OUT I  DIAGONALSOCCUPATION         ARRAY : LLIN(MD)
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
      INTEGER  NK,NX,NY,N,M,MV,RL,IN,M222,NBDX,NBDY,
     &         IDMAX,II1,II2,II3,II4,II7,
     &         II8,II9,II10,II11,II12,I,ID,IFJ,IFF,IFD,
     &         IFM,RNF,RND,MD,ND,DIAGNR,IMM,IDOKU,LOUT
      DOUBLE PRECISION   HT
      LOGICAL  PARA, LX, LY
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      NK    = IINFO(1)
      NX    = IINFO(2)
      NY    = IINFO(3)
      N     = IINFO(9)
      M     = IINFO(10)
      MV    = IINFO(11)
      RL    = IINFO(12)
      IN    = IINFO(13)
      M222  = IINFO(14)
      IMM   = IINFO(16)
      NBDX  = IINFO(17)
      NBDY  = IINFO(18)
      IDMAX = IINFO(23)
C
      HT    = DINFO(IMM)
C
      PARA  = LINFO(1)
      LX    = LINFO(2)
      LY    = LINFO(3)
C
      IF(MIW.LT.3*IDMAX.OR.MDW.LT.M.OR.MDW.LT.10*MV) THEN
         IERR = 40
         RETURN
      ENDIF
C
      II1  = 1
      II2  = II1  + MV
      II3  = II2  + MV
      II4  = II3  + MV
      II7  = II4  + MV
      II8  = II7  + MV
      II9  = II8  + MV
      II10 = II9  + MV
      II11 = II10 + MV
      II12 = II11 + MV
C
      ID  = 0
      IFJ = 7
      IFF = 2
      IFD = 6
      IFM = ILIN(7)
      RNF = 15
      RND = 1
      MD  = 2 * M - 1
C
C***  UPPER BLOCK-DIAGONALS
C
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      DO 130  I = 1,NBDY
         DIAGNR = I * NX * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  130 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Y-BLOCK-DIAGONALS
C
      DO 140  I = 1,NBDY
         DIAGNR = (NY-(NBDY+1-I))*NX*NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  140 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      DO 150  I = 1,NBDX
         DIAGNR = (NY-1)*NX*NK+I*NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  150 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  X-BLOCK-DIAGONALS
C
      DO 160  I = 1,NBDX
         DIAGNR = M - (NBDX + 1 - I) * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  160 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  MAIN-BLOCK-DIAGONAL
C
      DIAGNR = M
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .TRUE.,PARA,.TRUE.,.TRUE.,IERR)
      IF(IERR.NE.0) RETURN
C
C***  LOWER BLOCK-DIAGONALS
C
C***  X-BLOCK-DIAGONALS
C
      DO 170  I = 1,NBDX
         DIAGNR = M + I * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  170 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  X-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LX) THEN
      DO 180  I = 1,NBDX
         DIAGNR = M + (NX - (NBDX + 1 - I)) * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.TRUE.,.FALSE.,IERR)
  180 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  Y-BLOCK-DIAGONALS
C
      DO 190  I = 1,NBDY
         DIAGNR = M + I * NX * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  190 CONTINUE
      IF(IERR.NE.0) RETURN
C
C***  Y-BLOCK-DIAGONALS ( PERIODIC PART )
C
      IF(LY) THEN
      DO 200  I = 1,NBDY
         DIAGNR = M + (NY - (NBDY + 1 - I)) * NX * NK
         CALL FDSF41(EPS,U1,HT,DW(II1),DW(II2),DW(II3),DW(II4),
     &   DW(II7),DW(II8),DW(II9),DW(II10),DW(II11),DW(II12),
     &   DIAGNR,ID,IW,IDMAX,IFILE(IFJ),IFILE(IFF),
     &   IFILE(IFD),IN,MV,M222,N,NK,RL,RNF,RND,UR(IFJ),UR(IFF),UR(IFD),
     &   .FALSE.,.FALSE.,.FALSE.,.TRUE.,IERR)
  200 CONTINUE
      IF(IERR.NE.0) RETURN
      ENDIF
C
C***  MERGE THE DIAGONALPARTS TO COMPLETE DIAGONALS
C
      CALL FDS441(M,N,NK,ID,ND,MD,IW,LLIN,IFILE(IFD),MV,RL,
     &            UR(IFD),IFILE(IFM),UR(IFM),U1,DW,ILIN,IERR)
      IF(IERR.NE.0) RETURN
C
C***  INFORMATION FOR LINSOL
      ILIN(5) = ND
      ILIN(6) = 1
C
C***  THE OTHER COMPONENTS ARE DEFINED IN THE FIDISOL-MAINPROGRAMM
C
      IDOKU = ILIN(13)
      LOUT  = ILIN(12)
      IF(IDOKU.GE.3) WRITE(LOUT,1000) ID, ND
 1000 FORMAT(1X,I7,' DIAGONAL PARTS MERGED TO',
     &         I7,' DIAGONALS. (MATRIX COMPUTATION)')
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF40----------------------------------------------------
      E    N    D
C:::48    ,,,,,FDSF41.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSF41 (EPS,D,HT,HX,HXX,HY,HYY,PU,PUT,PUX,PUXX,
     &                   PUY,PUYY,DIAGNR,ID,IDIAG,IDMAX,IFILE1,
     &                   IFILE2,IFILE3,IN,MV,M222,N,NK,RL,RN2,
     &                   RN3,UR1,UR2,UR3,LU,LUT,LUX,LUY,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S F 4 1  COMPUTES NK * NK DIAGONALPARTS OF ONE BLOCK-  ***
C**      DIAGONAL. FROM FILE 1 THE ELEMENTS OF THE JACOBI-MATRICES  ***
C**      ARE READ. FROM FILE 2 THE IN FDSE12 SORTED COEFFICIENTS    ***
C**      OF THE DIFFERENCE FORMULAE ARE READ. THE COMPUTED          ***
C**      DIAGONALPARTS ARE WRITTEN ON FILE 3.                       ***
C**      CAUTION : THE COEFFICIENTS OF THE DIFFERENCE FORMULAE      ***
C**      FOR EACH BLOCK-DIAGONAL MUST BE SORTED IN THAT WAY,        ***
C**      THAT THEY CAN BE READ SEQUENTIELLY OUT OF OF FILE 2.       ***
C**      THIS SUBROUTINE CAN BE USED FOR PARABOLIC AND ELLIPTIC     ***
C**      PROBLEMS.                                                  ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -------------------                                        ***
C**                                                                 ***
      INTEGER  DIAGNR,ID,IDMAX,IDIAG(3,IDMAX),IFILE1,IFILE2,IFILE3,
     &         IN,MV,M222,N,NK,RL,RN2,RN3,UR1,UR2,UR3,IERR
C**                                                                 ***
      DOUBLE PRECISION  EPS,D(N),HT,HX(MV),HXX(MV),HY(MV),HYY(MV),
     &                  PU(MV),PUT(MV),PUX(MV),PUXX(MV),
     &                  PUY(MV),PUYY(MV)
C**                                                                 ***
      LOGICAL  LU, LUT, LUX, LUY
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   ---------------------------                                   ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT
C--------I------I-----I------------------------------------------------
C D      I  DP  I  -  I  WORKARRAY FOR 1 DIAGONALPART
C        I      I     I  ARRAY : D(N)
C--------I------I-----I------------------------------------------------
C HT     I  DP  I IN  I  COEFFICIENT FOR THE T-DERIVATIVE
C        I      I     I  ( IF PROBLEM IS PARABOLIC )
C--------I------I-----I------------------------------------------------
C HX,HXX I  DP  I  -  I  WORKARRAYS FOR THE SORTED DIFFERENCE FORMULAE
C HY,HYY I      I     I  ARRAY : H..( MV )
C--------I------I-----I------------------------------------------------
C PU,PUT I  DP  I  -  I  WORKARRAYS FOR THE ELEMENTS OF THE JACOBI-
C PUX,XX I      I     I  MATRICES
C PUY,YY I      I     I  ARRAYS : PU..( MV )
C--------I------I-----I------------------------------------------------
C DIAGNR I  I   I IN  I  ABSOLUTE DIAGONALNUMBER OF THE DIAGONALPART
C        I      I     I  FOR IGL = IKO = 1
C--------I------I-----I------------------------------------------------
C ID     I  I   I I/O I  NUMBER OF DIAGONALPARTS
C--------I------I-----I------------------------------------------------
C IDIAG  I  I   I OUT I  INFORMATION ABOUT THE DIAGONALPARTS
C        I      I     I  ARRAY : IDIAG( 3,IDMAX )
C--------I------I-----I------------------------------------------------
C IDMAX  I  I   I IN  I  ARRAYBOUND FOR IDIAG
C--------I------I-----I------------------------------------------------
C IFILE1,I  I   I IN  I  UNIT NUMBERS OF THE FILES
C 2,3    I      I     I
C--------I------I-----I------------------------------------------------
C IN     I  I   I IN  I  = (NX * NY) / MV ROUNDED UPON THE NEXT
C        I      I     I  INTEGER
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE RECORD OF THE
C        I      I     I  DIRECT-ACCESS-FILE
C--------I------I-----I------------------------------------------------
C M222   I  I   I IN  I  NUMBER OF DIFFERENT JACOBI-MATRICES
C        I      I     I  ( ELL : M222 = 5 , PAR : M222 = 6 )
C--------I------I-----I------------------------------------------------
C N      I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C RL     I  I   I IN  I  RECORD LENGTH
C--------I------I-----I------------------------------------------------
C RN2,3  I  I   I I/O I  RECORDNUMBERS FOR FILE 2 AND FILE 3
C--------I------I-----I------------------------------------------------
C UR1,2,3I  I   I I/O I  SYNCHRONISATION-VARIABLES
C--------I------I-----I------------------------------------------------
C LU     I  L   I IN  I  = TRUE : MAIN-BLOCK-DIAGONAL
C--------I------I-----I------------------------------------------------
C LUT    I  L   I IN  I  = TRUE : PARABOLIC MAIN-BLOCK-DIAGONAL
C--------I------I-----I------------------------------------------------
C LUX,LUYI  L   I IN  I  = TRUE : X-,Y-BLOCK-DIAGONAL
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER   I,IA,IGL,IKO,INKRP,IOS,J,NV,PFE,RNH,RNP,RNP1
      EXTERNAL  FDS318
      DOUBLE PRECISION  ZERO, FDS101
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ZERO = 0.0 )
C**                                                                 ***
C**** START OF CALCULATION :
C     --------------------
C
      RNP1  = 1-M222
      INKRP = NK * NK * M222
      DO 100 I = 1,MV
         PUT(I) = ZERO
  100 CONTINUE
      IF(IN.EQ.1) THEN
C        THE DIFF.FORMULAE-COEFF. ARE READ ONLY ONCE.
         IF(LUX) THEN
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HX ,N,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HXX,N,IERR,UR2)
         END IF
         IF(LUY) THEN
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HY ,N,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RN2,RL,PFE,HYY,N,IERR,UR2)
         END IF
      END IF
C
C***  LOOP OVER NK * NK DIAGONALPARTS
C
      DO 400 IGL = 1,NK
      DO 400 IKO = 1,NK
      RNP1 = RNP1 + M222
C
C***  LOOP OVER MV-PARTS
C
      RNH = RN2
      DO 300 J = 1,IN
         IA = (J - 1) * MV
         NV = MV
         IF(J.EQ.IN) NV = N - (IN - 1) * MV
         RNP = RNP1 + (J - 1) * INKRP
         IF(LU) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PU,NV,IERR,UR1)
         ELSE
            RNP = RNP + 1
         END IF
         IF(LUX) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUX ,NV,IERR,UR1)
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUXX,NV,IERR,UR1)
         ELSE
            RNP = RNP + 2
         END IF
         IF(LUX.AND.IN.GT.1) THEN
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HX  ,NV,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HXX ,NV,IERR,UR2)
         END IF
         IF(LUY) THEN
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUY ,NV,IERR,UR1)
            CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUYY,NV,IERR,UR1)
         ELSE
            RNP = RNP + 2
         END IF
         IF(LUY.AND.IN.GT.1) THEN
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HY  ,NV,IERR,UR2)
            CALL FDS317(IFILE2,IOS,RNH,RL,PFE,HYY ,NV,IERR,UR2)
         END IF
         IF(LUT) CALL FDS317(IFILE1,IOS,RNP,RL,PFE,PUT,NV,IERR,UR1)
C
         IF(.NOT.LU) GO TO 210
C
C***     COMPUTE DIAGONALPART FOR MAIN BLOCK-DIAGONAL
C
         DO 200 I = 1,NV
         D(I+IA) = PU(I)+HX(I)*PUX(I)+HXX(I)*PUXX(I)
     &            +HY(I)*PUY(I)+HYY(I)*PUYY(I)+HT*PUT(I)
  200    CONTINUE
         GO TO 300
  210    IF(.NOT. LUX) GO TO 230
C
C***     COMPUTE DIAGONALPART FOR X-BLOCK-DIAGONAL
C
         DO 220 I = 1,NV
            D(I+IA) = HX(I)*PUX(I)+HXX(I)*PUXX(I)
  220    CONTINUE
         GO TO 300
  230    IF(.NOT. LUY) GO TO 300
C
C***     COMPUTE DIAGONALPART FOR Y-BLOCK-DIAGONAL
C
         DO 240 I = 1,NV
            D(I+IA) = HY(I)*PUY(I)+HYY(I)*PUYY(I)
  240    CONTINUE
C
  300 CONTINUE
C
C***     IS THERE ANY DIAGONALVALUE NOTEQUAL ZERO ?
C
         IF(FDS101(N,D,ZERO).LE.EPS) GO TO 400
C
C***     INFORMATION ABOUT THE DIAGONALPART
C
         ID = ID + 1
         IF(ID.GT.IDMAX) THEN
            IERR = 41
            RETURN
         ENDIF
         IDIAG(1,ID) = DIAGNR - IKO + IGL
         IDIAG(2,ID) = IGL
         IDIAG(3,ID) = RN3
C
C***     WRITE DIAGONALPART ON FILE
C
         CALL FDS331(D,N,MV,IFILE3,RN3,RL,UR3,FDS318,IERR)
         IF(IERR.NE.0) RETURN
C
  400 CONTINUE
      IF(IN.GT.1)  RN2 = RNH
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C-----END OF FDSF41 ---------------------------------------------------
      E    N    D
C:::::      ,,,,,FDSJAC.....                                                    
C                                                                               
C                                                                               
C                                                                               
C**********************************************************************         
C        1         2         3         4         5         6         7*         
C**********************************************************************         
C**                                                                 ***         
C**                                                                 ***         
      SUBROUTINE FDSJAC (DEFMAX,IINFO,DINFO,LINFO,IFILE,UR,U1,U2,IWORK,         
     &                   MIW,DWORK,MDW,FDSU01,FDSU02,LOUT,EPS,IERR)             
C**                                                                 ***         
C**                                                                 ***         
C**********************************************************************         
C**                                                                 ***         
C**      F D S J A C   JACOBI-TEST .                                ***         
C**      THIS IS A VERSION FOR 2-DIMENSIONAL PROBLEMS.              ***         
C**      FOR EVERY JACOBI-MATRIX A NUMERICAL APPROXIMATION IS       ***         
C**      EVALUATED FROM THE DIFFERENCE QUOTIENT OF THE DEFECT.      ***         
C**      THIS NUMERICAL APPROXIMATION OF THE JACOBI-MATRIX IS       ***         
C**      COMPARED WITH THE RESULTS OF THE JACOBI-COMPUTATION        ***         
C**      IN SUBROUTINE FDSU03 AND FDSU04.                           ***         
C**                                                                 ***         
C**********************************************************************         
C**                                                                 ***         
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1985                     ***         
C**                                                                 ***         
C**********************************************************************         
C**                                                                 ***         
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***         
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***         
C**                                                                 ***         
      IMPLICIT CHARACTER*1 ( A - Z )                                            
C**                                                                 ***         
C**-----------------------------------------------------------------***         
C**                                                                 ***         
C**      FORMAL PARAMETERS :                                        ***         
C**      -------------------                                        ***         
C**                                                                 ***         
      INTEGER  IINFO(1),IFILE(1),UR(1),IWORK(1),MIW,MDW,LOUT,IERR               
      DOUBLE PRECISION  DEFMAX,DINFO(1),U1(1),U2(1),DWORK(1),EPS                
      LOGICAL  LINFO(1)                                                         
      EXTERNAL  FDSU01 , FDSU02                                                 
C**                                                                 ***         
C**-----------------------------------------------------------------***         
C**                                                                 ***         
C**   LIST OF FORMAL PARAMETERS :                                   ***         
C**   ---------------------------                                   ***         
C**                                                                 ***         
C--------I------I-----I------------------------------------------------         
C NAME   I TYPE I I/O I     MEANING                                             
C--------I------I-----I------------------------------------------------         
C--------I------I-----I------------------------------------------------         
C DEFMAX I  DP  I OUT I  MAXIMUM OF THE DEFECT                                  
C--------I------I-----I------------------------------------------------         
C IINFO  I  I   I IN  I  INFORMATION-VECTOR                                     
C        I      I     I  ARRAY : IINFO(24)                                      
C--------I------I-----I------------------------------------------------         
C DINFO  I  DP  I IN  I  INFORMATION-VECTOR                                     
C        I      I     I  ARRAY : DINFO(MNX+MNY+2)                               
C--------I------I-----I------------------------------------------------         
C LINFO  I  L   I IN  I  INFORMATION-VECTOR                                     
C        I      I     I  ARRAY : LINFO(3)                                       
C--------I------I-----I------------------------------------------------         
C IFILE  I  I   I IN  I  UNIT-NUMBERS                                           
C        I      I     I  ARRAY : IFILE(7)                                       
C--------I------I-----I------------------------------------------------         
C UR     I  I   I I/O I  SYNCHRONISATION VARIABLES                              
C        I      I     I  ARRAY : UR(7)                                          
C--------I------I-----I------------------------------------------------         
C U1,U2  I  DP  I  -  I  TWO WORKARRAYS FOR COMPLETE SOLUTION                   
C        I      I     I  ARRAY : U1(M) , U2(M)                                  
C--------I------I-----I------------------------------------------------         
C IWORK  I  I   I  -  I  INTEGER WORKARRAY OF LENGTH MIW                        
C--------I------I-----I------------------------------------------------         
C MIW    I  I   I IN  I  LENGTH OF IWORK  ( MIW >= 3 * MV )                     
C--------I------I-----I------------------------------------------------         
C DWORK  I  DP  I  -  I  REAL WORKARRAY OF LENGTH MDW                           
C--------I------I-----I------------------------------------------------         
C MDW    I  I   I IN  I  LENGTH OF DWORK                                        
C        I      I     I  ( MDW >= M222*NK+MT*NK+(2+6*NK)*MV )                   
C        I      I     I  ( MDW >= M+4*MV)                                       
C--------I------I-----I------------------------------------------------         
C FDSU01 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE INNER DEFECT           
C--------I------I-----I------------------------------------------------         
C FDSU02 I  E   I IN  I  NAME OF USER-SUBROUTINE FOR THE BOUNDARY               
C        I      I     I  DEFECT                                                 
C--------I------I-----I------------------------------------------------         
C LOUT   I  I   I IN  I  UNIT-NUMBER OF OUTPUTFILE                              
C--------I------I-----I------------------------------------------------         
C EPS    I  DP  I IN  I  SMALL MACHINE-CONSTANT                                 
C--------I------I-----I------------------------------------------------         
C IERR   I  I   I OUT I  ERROR-INDICATOR                                        
C--------I------I-----I------------------------------------------------         
C**                                                                 ***         
C**                                                                 ***         
C**        LOCAL PARAMETERS :                                       ***         
C**        ----------------                                         ***         
C**                                                                 ***         
      INTEGER  NK,NX,NY,MNX,MNY,MLF,N,M,MV,RL,RL4,IN,M222,MT,                   
     &         IX,IY,IT,II1,II2,II3,II4,II5,II6,II7,II8,II9,                    
     &         II12,I1,I2,I3,RN1,RN5,I                                          
      DOUBLE PRECISION     T, ABT                                                           
      LOGICAL  PARA, LX, LY                                                     
CJAC                                                                            
      DOUBLE PRECISION    JSTEP,FEX,QUOT,BB(1)                                              
      INTEGER IJAC,RN7,JA,PFE,III,J,K,IOS,J1,Z1,L,IGL,IPT,IWRONG                
      LOGICAL JERR                                                              
      CHARACTER*7 JATEXT                                                        
C                                                                               
      PARAMETER ( JSTEP = 0.0001, IJAC = 5 )                                    
C                                                                               
      COMMON /FEE/ JA,FEX(1)                                                    
      COMMON /RET/ BB                                                           
C**                                                                 ***         
C                                                                               
C                                                                               
C**** START OF CALCULATION :                                                    
C     ---------------------                                                     
C                                                                               
C                                                                               
      NK   = IINFO(1)                                                           
      NX   = IINFO(2)                                                           
      NY   = IINFO(3)                                                           
      MNX  = IINFO(5)                                                           
      MNY  = IINFO(6)                                                           
      MLF  = IINFO(8)                                                           
      N    = IINFO(9)                                                           
      M    = IINFO(10)                                                          
      MV   = IINFO(11)                                                          
      RL   = IINFO(12)                                                          
      IN   = IINFO(13)                                                          
      M222 = IINFO(14)                                                          
      MT   = IINFO(15)                                                          
      RL4  = IINFO(24)                                                          
C                                                                               
      IX   = 0                                                                  
      IY   = MNX + IX                                                           
      IT   = MNY + IY + 1                                                       
      T    = DINFO(IT)                                                          
      PARA = LINFO(1)                                                           
      LX   = LINFO(2)                                                           
      LY   = LINFO(3)                                                           
C                                                                               
      IF(MIW.LT.3*MV.OR.MDW.LT.(M222+MT)*NK+(2+6*NK)*MV                         
     &   .OR.MDW.LT.M+4*MV) THEN                                                
         IERR = 10                                                              
         RETURN                                                                 
      ENDIF                                                                     
C                                                                               
      IWRONG = 0                                                                
C                                                                               
      DO 500 III=1,JA                                                           
C                                                                               
      IF(III.EQ.1) JATEXT = 'DP/DU  '                                           
      IF(III.EQ.2) JATEXT = 'DP/DUX '                                           
      IF(III.EQ.3) JATEXT = 'DP/DUXX'                                           
      IF(III.EQ.4) JATEXT = 'DP/DUY '                                           
      IF(III.EQ.5) JATEXT = 'DP/DUYY'                                           
      IF(III.EQ.6) JATEXT = 'DP/DUT '                                           
C                                                                               
      DO 490 J=1,NK                                                             
C                                                                               
      Z1 = JA * NK                                                              
      DO 20 I=1,Z1                                                              
         FEX(I) = 0.0                                                           
   20 CONTINUE                                                                  
C                                                                               
      FEX((J-1)*JA+III) = JSTEP                                                 
C                                                                               
      II1  = 1 + M222 * NK                                                      
      II2  = II1  + MV                                                          
      II4  = II2  + MV                                                          
      II5  = II4  + MV * NK                                                     
      II6  = II5  + MT * NK                                                     
      II7  = II6  + MV * NK                                                     
      II8  = II7  + MV * NK                                                     
      II9  = II8  + MV * NK                                                     
C                                                                               
C***     SORTING OF THE SOLUTION FOR THE COMPUTATION                            
C        OF THE DERIVATIVES                                                     
C                                                                               
      CALL FDS422(N,NX,NY,NK,MV,M222,U1,U2,DWORK(1),IFILE(3),                   
     &            IFILE(4),UR(3),UR(4),RL,RL4,IERR)                             
      IF(IERR.NE.0) RETURN                                                      
C                                                                               
C***     COMPUTATION OF THE X- AND Y-DERIVATIVES                                
C                                                                               
      I1 = 1                                                                    
      I2 = I1 + MV                                                              
      I3 = I2 + MV                                                              
      CALL FDSE14(N,NX,NY,NK,MNX,MNY,MLF,MV,M222,IN,                            
     &            IWORK(I1),IWORK(I2),IWORK(I3),DWORK(II1),                     
     &            U1,U2,DWORK(1),IFILE(2),IFILE(3),IFILE(4),                    
     &            IFILE(5),UR(2),UR(3),UR(4),UR(5),RL,RL4,.FALSE.,IERR)         
      IF(IERR.NE.0) RETURN                                                      
      IF(PARA)  THEN                                                            
C                                                                               
C***     COMPUTATION OF THE T-DERIVATIVE                                        
C                                                                               
      ABT = DINFO(IT+1)                                                         
      RN1 = IINFO(43)*2*IN*NK+1                                                 
      CALL FDSF14(N,NX,NY,NK,MV,M222,IN,ABT,U1,U2,DWORK(1),                     
     &            IFILE(1),IFILE(3),IFILE(4),IFILE(5),UR(1),                    
     &            UR(3),UR(4),UR(5),RN1,RL,RL4,IERR)                            
      IF(IERR.NE.0) RETURN                                                      
      END IF                                                                    
C                                                                               
C***     SORTING OF THE SOLUTION AND DERIVATIVES FOR THE                        
C        COMPUTATION OF THE INNER DEFECT.                                       
C                                                                               
      CALL FDS423(N,NK,NX,NY,MV,IN,IFILE(3),UR(3),IFILE(5),UR(5),               
     &            IFILE(6),UR(6),RL,DINFO(IX+1),DINFO(IY+1),                    
     &            DWORK(II1),DWORK(II2),DWORK(II4),                             
     &            DWORK(1),M222,LX,LY,IERR)                                     
      IF(IERR.NE.0) RETURN                                                      
C                                                                               
C***     COMPUTATION OF THE INNER DEFECT                                        
C                                                                               
      II12 = II9  + MV * NK                                                     
      CALL FDSF15(N,NK,MT,MV,IN,T,DWORK(II1),DWORK(II2),                        
     &            DWORK(II4),DWORK(II5),DWORK(II6),DWORK(II7),                  
     &            DWORK(II8),DWORK(II9),DWORK(II12),IFILE(6),                   
     &            IFILE(5),UR(6),UR(5),RL,PARA,FDSU01,IERR)                     
      IF(IERR.NE.0) RETURN                                                      
      RN5 = IN * NK + 1                                                         
      IF(LX) GO TO 220                                                          
C                                                                               
C***     DEFECT FOR BOUNDARY X = XAN                                            
C                                                                               
CDIR$ IVDEP                                                                     
*VOCL LOOP,NOVREC                                                               
         DO 200 I2 = 1,NY                                                       
            DWORK(II1+I2-1) = DINFO(IX+1 )                                      
            DWORK(II2+I2-1) = DINFO(IY+I2)                                      
  200    CONTINUE                                                               
         CALL FDSF16(1,NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),                     
     &            DWORK(II4),DWORK(II5),DWORK(II6),                             
     &            DWORK(II7),DWORK(II8),DWORK(II9),                             
     &            DWORK(II12),IFILE(4),IFILE(5),                                
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)                      
         IF(IERR.NE.0) RETURN                                                   
C                                                                               
C***     DEFECT FOR BOUNDARY X = XEN                                            
C                                                                               
         DO 210 I2 = 1,NY                                                       
           DWORK(II1+I2-1) = DINFO(IX+NX)                                       
  210    CONTINUE                                                               
         CALL FDSF16(2,NY,NK,MT,MV,T,DWORK(II1),DWORK(II2),                     
     &            DWORK(II4),DWORK(II5),DWORK(II6),                             
     &            DWORK(II7),DWORK(II8),DWORK(II9),                             
     &            DWORK(II12),IFILE(4),IFILE(5),                                
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)                      
         IF(IERR.NE.0) RETURN                                                   
  220 IF(LY) GO TO 280                                                          
C                                                                               
C***     DEFECT FOR BOUNDARY Y = YAN                                            
C                                                                               
CDIR$ IVDEP                                                                     
*VOCL LOOP,NOVREC                                                               
         DO 230 I1 = 1,NX                                                       
            DWORK(II1+I1-1) = DINFO(IX+I1)                                      
            DWORK(II2+I1-1) = DINFO(IY+1 )                                      
  230    CONTINUE                                                               
         CALL FDSF16(3,NX,NK,MT,MV,T,DWORK(II1),DWORK(II2),                     
     &            DWORK(II4),DWORK(II5),DWORK(II6),                             
     &            DWORK(II7),DWORK(II8),DWORK(II9),                             
     &            DWORK(II12),IFILE(4),IFILE(5),                                
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)                      
         IF(IERR.NE.0) RETURN                                                   
C                                                                               
C***     DEFECT FOR BOUNDARY Y = YEN                                            
C                                                                               
         DO 240 I1 = 1,NX                                                       
           DWORK(II2+I1-1) = DINFO(IY+NY)                                       
  240    CONTINUE                                                               
         CALL FDSF16(4,NX,NK,MT,MV,T,DWORK(II1),DWORK(II2),                     
     &            DWORK(II4),DWORK(II5),DWORK(II6),                             
     &            DWORK(II7),DWORK(II8),DWORK(II9),                             
     &            DWORK(II12),IFILE(4),IFILE(5),                                
     &            UR(4),UR(5),RL,RL4,RN5,PARA,FDSU02,IERR)                      
         IF(IERR.NE.0) RETURN                                                   
C                                                                               
C***     MERGE THE INNER DEFECT WITH THE BOUNDARY DEFECT                        
C                                                                               
  280    II1 = 1                                                                
         II2 = II1 + M                                                          
         II3 = II2 + MV                                                         
         II4 = II3 + MV                                                         
         II5 = II4 + MV                                                         
         CALL FDS424(NK,NX,NY,N,MV,IN,IFILE(5),IFILE(3),UR(5),UR(3),            
     &            RL,DWORK(II1),DWORK(II2),DWORK(II3),DWORK(II4),               
     &            DWORK(II5),U1,DEFMAX,LX,LY,IERR)                              
         IF(IERR.NE.0) RETURN                                                   
C                                                                               
C COMPUTE JACOBIS FROM THE DEFECT                                               
C                                                                               
      DO 320 L=1,NK                                                             
      DO 310 I=1,N                                                              
         U2((L-1)*N+I)=(BB((I-1)*NK+L)-U1((I-1)*NK+L))/JSTEP                    
  310 CONTINUE                                                                  
  320 CONTINUE                                                                  
C                                                                               
C READ JACOBIS                                                                  
C                                                                               
      DO 340 K = 1,NK                                                           
      RN7 = 1+(J-1)*JA+(K-1)*JA*NK+(III-1)                                      
      J1 = (K-1)*N+1                                                            
      CALL FDS317(IFILE(7),IOS,RN7,RL,PFE,DWORK(J1),N,IERR,UR(7))               
      IF (IOS.NE.0) WRITE(LOUT,601)                                             
  340 CONTINUE                                                                  
C                                                                               
C*** COMPARE NUMER. COMPUTED JACOBIS (ARRAY U2) WITH JACOBIS COMPUTED           
C*** IN USER-SUBROUTINES FDSU03 AND FDSU04 (ARRAY DWORK)                        
C                                                                               
      L = 0                                                                     
      DO 380 IGL=1,NK                                                           
C                                                                               
      K=0                                                                       
      DO 360 I=1,N                                                              
      L=L+1                                                                     
      JERR = .FALSE.                                                            
      IF (DWORK(L).EQ.0.OR.U2(L).EQ.0) THEN                                     
         IF (ABS(U2(L)).GT.1.E-4.OR.ABS(DWORK(L)).GT.1.E-4) THEN                
            K=K+1                                                               
            JERR = .TRUE.                                                       
         ENDIF                                                                  
      ELSE                                                                      
         QUOT = U2(L)/DWORK(L)                                                  
         IF ( (QUOT.LT.0.99.OR.QUOT.GT.1.01)                                    
     &       .AND. ABS(U2(L)-DWORK(L)).GT.EPS*100 ) THEN                        
            K=K+1                                                               
            JERR = .TRUE.                                                       
         ENDIF                                                                  
      ENDIF                                                                     
      IF(JERR.AND.(K.LE.IJAC)) THEN                                             
         IPT = I                                                                
         I1  = MOD(IPT-1,NX) + 1                                                
         I2  = (IPT-1)/NX + 1                                                   
         IF(LX) IPT=I1+(I2-1)*MNX                                               
         IF (K.EQ.1) WRITE(LOUT,602) JATEXT,J,IGL                               
         WRITE(LOUT,603) IPT,DINFO(IX+I1),DINFO(IY+I2),U2(L),DWORK(L)           
      ENDIF                                                                     
  360 CONTINUE                                                                  
C                                                                               
      IWRONG = IWRONG + K                                                       
      IF (K.GT.0) WRITE(LOUT,604) K, JATEXT, J, IGL                             
  380 CONTINUE                                                                  
C                                                                               
C                                                                               
  490 CONTINUE                                                                  
  500 CONTINUE                                                                  
C                                                                               
      IF (IWRONG.EQ.0) WRITE(LOUT,605)                                          
      IF (IWRONG.GT.0) WRITE(LOUT,606) IWRONG                                   
      FEX(JA*NK) = 0.0                                                          
C                                                                               
C**** END OF CALCULATION                                                        
C     ------------------                                                        
C                                                                               
  601 FORMAT(3X,'ERROR WHEN READ THE JACOBIS ')                                 
  602 FORMAT(1X,'INCORRECT JACOBIS ',1A7,' FOR SOLUTION COMPONENT',             
     &       I3,' AND EQUATION',I3,' :')                                        
  603 FORMAT(3X,'POINT',I6,'  (',G11.3,',',G11.3,') :'/                         
     &       3X,'NUMER. COMPUTED JACOBIS :',G12.4,                              
     &       '  JACOBIS FROM FDSU03/FDSU04 :',G12.4)                            
  604 FORMAT(1X,I6,' JACOBIS ',1A7,' FOR SOLUTION COMPONENT',I3,                
     &       ' AND EQUATION',I3,' ARE WRONG'/                                   
     &       /7X,' - THE FIRST SEE ABOVE'/'0')                                  
  605 FORMAT(3X,'END OF THE JACOBI-TEST :  ALL JACOBIS ARE O.K.'/'0')           
  606 FORMAT(3X,'END OF THE JACOBI-TEST :',                                     
     &       I9,' JACOBIS ARE WRONG'/'0')                                       
C                                                                               
      R E T U R N                                                               
C-----END OF FDSJAC----------------------------------------------------         
      E    N    D                                                               
C:::49    ,,,,,FDST01.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDST01 (NX,NOX,X,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S T 0 1   CHECKS THE NUMERICAL PARAMETERS IN ONE       ***
C**                    SPACE DIRECTION.                             ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER           NX, NOX, IERR
      DOUBLE PRECISION    X(1)
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C NX     I  I   I IN  I  NUMBER OF GRIDPOINTS
C--------I------I-----I------------------------------------------------
C NOX    I  I   I IN  I  ORDER OF THE DIFFERENCE FORMULAE
C--------I------I-----I------------------------------------------------
C X      I  DP  I IN  I  COORDINATES OF THE GRIDPOINTS
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, NOX4
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      NOX4 = NOX + 4
      IF(NX.LT.NOX4) THEN
         IERR = 1
         WRITE(6,1010) NX, NOX4
      ENDIF
      IF(MOD(NOX,2).NE.0.OR.NOX.LT.2) THEN
         IERR = 1
         WRITE(6,1020) NOX
      ENDIF
      DO 100  I = 2,NX
         IF(X(I).LE.X(I-1)) GO TO 200
  100 CONTINUE
      GO TO 300
  200 IERR = 1
      WRITE(6,1030) (X(I), I = 1,NX)
C
C
C**** END OF CALCULATION
C     ------------------
C
  300 R E T U R N
C
 1010 FORMAT(' NX = ',I3,' MUST BE GREATER/EQUAL NOX + 4 = ',
     &       I3)
 1020 FORMAT(' NOX = ',I3,' MUST BE 2, 4, 6, 8, 10,...')
 1030 FORMAT(' GRID POINTS MUST BE STRICTLY INCREASING:'/(5G15.4))
C
C-----END OF FDST01----------------------------------------------------
      E    N    D
C:::50    ,,,,,FDST02.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
*VOCL TOTAL,SCALAR
      SUBROUTINE FDST02 (LOUT,IFILE,IF1,IF2,MDW,M1,MIW,M2,
     &                   MV,M3,NK,TOL,EPS,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S T 0 2   CHECKS GENERAL INPUT PARAMETERS LIKE ARRAY   ***
C**                    BOUNDS AND TOLERANCE.                        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  LOUT,IFILE(1),IF1,IF2,MDW,M1,MIW,M2,MV,M3,NK,IERR
      DOUBLE PRECISION  TOL, EPS
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C MDW    I  I   I IN  I  DIMENSION OF DWORK
C--------I------I-----I------------------------------------------------
C IFILE  I  I   I IN  I  UNIT-NUMBERS OF FILE IF1 TO IF2
C        I      I     I  ARRAY : IFILE(IF2)
C--------I------I-----I------------------------------------------------
C M1     I  I   I IN  I  REQUIRED DIMENSION OF DWORK
C--------I------I-----I------------------------------------------------
C MIW    I  I   I IN  I  DIMENSION OF IWORK
C--------I------I-----I------------------------------------------------
C M2     I  I   I IN  I  REQUIRED DIMENSION OF IWORK
C--------I------I-----I------------------------------------------------
C MV     I  I   I IN  I  NUMBER OF VALUES WRITTEN IN ONE FILE RECORD
C--------I------I-----I------------------------------------------------
C M3     I  I   I IN  I  REQUIRED DIMENSION OF ONE FILE RECORD
C--------I------I-----I------------------------------------------------
C NK     I  I   I IN  I  NUMBER OF SOLUTION COMPONENTS
C--------I------I-----I------------------------------------------------
C TOL    I  DP  I I/O I  RELATIVE TOLERANCE        ( EPS <= TOL <= 1 )
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE CONSTANT
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  I, J
      DOUBLE PRECISION  ONE
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER  ( ONE = 1.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      IF(LOUT.LT.1) THEN
         IERR = 1
         WRITE(6,1010) LOUT
      ENDIF
      IF(MDW.LT.M1) THEN
         IERR = 1
         WRITE(6,1020) MDW, M1
      ENDIF
      IF(MIW.LT.M2) THEN
         IERR = 1
         WRITE(6,1030) MIW, M2
      ENDIF
      IF(MV.LT.M3) THEN
         IERR = 1
         WRITE(6,1040) MV, M3
      ENDIF
      IF(NK.LT.1) THEN
         IERR = 1
         WRITE(6,1050) NK
      ENDIF
      IF(TOL.LT.EPS.OR.TOL.GT.ONE) THEN
         WRITE(6,1060)
         IF(TOL.LT.EPS) TOL = EPS
         IF(TOL.GT.ONE) TOL = ONE
      ENDIF
      DO 10 I=IF1,IF2
         IF(IFILE(I).EQ.LOUT) GO TO 20
   10 CONTINUE
      GO TO 30
   20 IERR = 1
      WRITE(6,1070) LOUT
   30 DO 40 I=IF1,IF2-1
         DO 40 J=I+1,IF2
            IF(IFILE(I).EQ.IFILE(J)) GO TO 50
   40 CONTINUE
      GO TO 100
   50 IERR = 1
      WRITE(6,1080) (IFILE(I), I=IF1,IF2)
C
C
C**** END OF CALCULATION
C     ------------------
C
  100 R E T U R N
C
 1010 FORMAT(' LOUT = ',I4,' MUST BE GREATER THAN 0.')
 1020 FORMAT(' MDW = ',I7,' MUST BE GREATER/EQUAL',I8)
 1030 FORMAT(' MIW = ',I7,' MUST BE GREATER/EQUAL',I8)
 1040 FORMAT(' MV = ',I7,' MUST BE GREATER/EQUAL',I8)
 1050 FORMAT(' NK = ',I4,' MUST BE GREATER THAN 0.')
 1060 FORMAT(' TOL HAS BEEN RESTRICTED BETWEEN EPS AND ONE.')
 1070 FORMAT(' FILE NUMBERS MUST BE DIFFERENT FROM',
     &       ' OUTPUT FILE',I5)
 1080 FORMAT(' FILE NUMBERS MUST BE DIFFERENT:'/1X,10I4)
C
C-----END OF FDST02----------------------------------------------------
      E    N    D
C:::51    ,,,,,FDST03.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDST03 (H,HMIN,HMAX,T0,TEND,IOUT,DTOUT,EPS,IERR)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S T 0 3   CHECKS PARABOLIC INPUT PARAMETERS (STEP SIZE,***
C**                    INTERVAL, OUTPUT CONTROL)                    ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER           IOUT, IERR
      DOUBLE PRECISION  H,HMIN,HMAX,T0,TEND,DTOUT,EPS
C**
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C H      I  DP  I IN  I  INITIAL STEP SIZE
C--------I------I-----I------------------------------------------------
C HMIN   I  DP  I IN  I  MINIMUM STEP SIZE          ( ABS(H) >= HMIN )
C--------I------I-----I------------------------------------------------
C HMAX   I  DP  I IN  I  MAXIMUM STEP SIZE          ( ABS(H) <= HMAX )
C--------I------I-----I------------------------------------------------
C T0     I  DP  I IN  I  INITIAL COORDINATE
C--------I------I-----I------------------------------------------------
C TEND   I  DP  I IN  I  END OF PARABOLIC DIRECTION
C--------I------I-----I------------------------------------------------
C IOUT   I  I   I IN  I  OUTPUT CONTROL
C--------I------I-----I------------------------------------------------
C DTOUT  I  DP  I IN  I  OUTPUT STEP SIZE
C--------I------I-----I------------------------------------------------
C EPS    I  DP  I IN  I  SMALL MACHINE CONSTANT
C--------I------I-----I------------------------------------------------
C IERR   I  I   I OUT I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER           ISIG
      DOUBLE PRECISION  ZERO, TEN
C**                                                                 ***
C**        CONSTANTS:                                               ***
C**        ---------                                                ***
C**                                                                 ***
      PARAMETER ( ZERO=0.0 , TEN=10.0 )
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      HMIN = ABS(HMIN)
      HMAX = ABS(HMAX)
      HMIN = MAX(HMIN,EPS)
      IF(HMAX.LT.TEN*EPS)
     &   HMAX = ABS(TEND-T0)
      IF(HMIN.GT.HMAX) THEN
         IERR = 1
         WRITE(6,1010) HMIN, HMAX
      ENDIF
      IF(H*(TEND-T0).LE.ZERO) THEN
         IERR = 1
         WRITE(6,1020) H, TEND, T0
      ENDIF
      ISIG = 1
      IF(H.LT.ZERO) ISIG = - 1
      IF(ABS(H).LT.HMIN) H = ISIG * HMIN
      IF(ABS(H).GT.HMAX) H = ISIG * HMAX
      IF(IOUT.LE.0.AND.DTOUT*(TEND-T0).LE.ZERO) THEN
         IERR = 1
         WRITE(6,1030) DTOUT
      ENDIF
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1010 FORMAT(' HMIN =',G10.2,' MUST BE LESS/EQUAL HMAX =',G10.2)
 1020 FORMAT(' H*(TEND-T0) MUST BE GREATER 0.'/
     &       ' H,TEND,T0: ',3G12.2)
 1030 FORMAT(' INCORRECT USE OF DTOUT:',G12.2)
C
C-----END OF FDST03----------------------------------------------------
      E    N    D
C:::52    ,,,,,FDST05.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDST05 (LOUT,T0,TEND,H,HMIN,HMAX,IOUT,DTOUT,LMAX,
     &                   LOT1,LTERR,LGLOB)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S T 0 5   PRINTS THE PARABOLIC INPUT PARAMETERS        ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER           LOUT, IOUT
      DOUBLE PRECISION  T0,TEND,H,HMIN,HMAX,DTOUT
      LOGICAL           LMAX,LOT1,LTERR,LGLOB
C**
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT-NUMBER OF OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C T0,TENDI  DP  I IN  I  PARABOLIC INTERVAL
C--------I------I-----I------------------------------------------------
C H,HMIN,I  DP  I IN  I  STEP SIZE
C HMAX   I      I     I
C--------I------I-----I------------------------------------------------
C IOUT,  I  I   I IN  I  OUTPUT CONTROL
C DTOUT  I  DP  I     I
C--------I------I-----I------------------------------------------------
C LMAX,  I  L   I IN  I  CONTROL OF THE ORDER
C LOT1   I      I     I
C--------I------I-----I------------------------------------------------
C LTERR  I  L   I IN  I  CONTROL OF THE STEP SIZE
C--------I------I-----I------------------------------------------------
C LGLOB  I  L   I IN  I  COMPUTATION OF THE GLOBAL ERROR
C--------I------I-----I------------------------------------------------
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      WRITE(LOUT,1010) T0, TEND, H, HMIN, HMAX
      IF(IOUT.LE.0) WRITE(LOUT,1020) DTOUT
      IF(IOUT.GT.0) WRITE(LOUT,1021) IOUT
      IF(IOUT.EQ.-1) WRITE(LOUT,1022)
      IF(LMAX) THEN
         WRITE(LOUT,1030)
      ELSE
         WRITE(LOUT,1031)
      ENDIF
      IF(LOT1) THEN
         WRITE(LOUT,1040)
      ELSE
         WRITE(LOUT,1041)
      ENDIF
      IF(LTERR) THEN
         WRITE(LOUT,1050)
      ELSE
         WRITE(LOUT,1051)
      ENDIF
      IF(LGLOB)
     &   WRITE(LOUT,1060)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1010 FORMAT(' '/' PARABOLIC INPUT PARAMETERS :'/' T0 =',G15.4,
     &         ' TEND =',G13.4/' H  =',G15.4,' HMIN =',G13.4,
     &         ' HMAX =',G13.4)
 1020 FORMAT(' OUTPUT ROUTINE CALLED WITH T-INCREMENT DTOUT =',
     &         G10.2)
 1021 FORMAT(' OUTPUT ROUTINE CALLED EVERY',I3,'-TH STEP')
 1022 FORMAT(' THE SOLUTION IS INTERPOLATED AT T=TOUT')
 1030 FORMAT(' CONTROL OF THE STEP SIZE AND ORDER WITH THE',
     &       ' MAXIMUM OF THE ERROR'/' OVER ALL EQUATIONS')
 1031 FORMAT(' CONTROL OF THE STEP SIZE AND ORDER WITH THE',
     &       ' ERROR OF EACH EQUATION')
 1040 FORMAT(' CONTROL OF THE ORDER IN THE RANGE',
     &       ' FROM 1 TO NOT+1')
 1041 FORMAT(' CONTROL OF THE ORDER IN THE RANGE',
     &       ' FROM NOT-1 TO NOT+1')
 1050 FORMAT(' CONTROL OF THE STEP SIZE WITH MAXIMUM',
     &       ' ERROR OVER ALL T-STEPS')
 1051 FORMAT(' CONTROL OF THE STEP SIZE WITH ACTUAL ERROR')
 1060 FORMAT(' AN ESTIMATE OF THE GLOBAL ERROR WILL BE COMPUTED')
C
C
C-----END OF FDST05----------------------------------------------------
      E    N    D
C:::53    ,,,,,FDST10.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDST10(LOUT,IERR,TEXT1)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S T 1 0   PRINTS A DIAGNOSTIC MESSAGE AT THE END OF    ***
C**                    THE COMPUTATION IN FIDISOL.                  ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1983                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER   LOUT, IERR
      CHARACTER   TEXT1 * 6
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I IN  I  UNIT NUMBER OF OUTPUT-FILE
C--------I------I-----I------------------------------------------------
C IERR   I  I   I IN  I  ERROR-INDICATOR
C--------I------I-----I------------------------------------------------
C TEXT1  I C*6  I IN  I  NAME OF THE CALLING FIDISOL-PROGRAM
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
      INTEGER  U
C**                                                                 ***
C**-----------------------------------------------------------------***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
      WRITE(LOUT,1000)
      IF(IERR.EQ.0  ) WRITE(LOUT,2000) TEXT1
      IF(IERR.NE.0  ) WRITE(LOUT,3000) TEXT1, IERR
      IF(IERR.EQ.1  ) WRITE(LOUT,3001)
      IF(IERR.EQ.2  ) WRITE(LOUT,3002)
      IF(IERR.EQ.12 ) WRITE(LOUT,3012)
      IF(IERR.EQ.41 ) WRITE(LOUT,3041)
      IF(IERR.EQ.200) WRITE(LOUT,3200)
      IF(IERR.EQ.320) WRITE(LOUT,3320)
      IF(IERR.GE.321.AND.IERR.LE.323) WRITE(LOUT,3321)
      IF(IERR.GE.500.AND.IERR.LT.600) WRITE(LOUT,3500)
      IF(IERR.GE.600.AND.IERR.LT.700) WRITE(LOUT,3600)
      IF(IERR.GT.1000) THEN
         U = IERR / 10000
         WRITE(LOUT,4000) U
      ENDIF
      WRITE(LOUT,1001)
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
C
 1000 FORMAT(' '/1H ,70('*')/)
 1001 FORMAT(1H ,70('*')/)
 2000 FORMAT(1H ,1A6,'  -  SOLUTION AND ERROR ESTIMATES',
     &       ' ARE COMPUTED.')
 3000 FORMAT(1H ,1A6,'  -  ERROR NO.',I10/)
 3001 FORMAT(' INCORRECT INPUT PARAMETERS.')
 3002 FORMAT(' FILE ERROR IN ROUTINE OPEN.')
 3012 FORMAT(' DIFFERENCE FORMULAE COULD NOT BE COMPUTED.')
 3041 FORMAT(' WORK ARRAY IWORK TOO SMALL.'/
     &       ' INCREASE MIW >= 3*NK*NK*(2*(NOX+NOY+NOZ)+7).')
 3200 FORMAT(' NEWTON ITERATION NOT COMPLETE.'/
     &       ' ERROR ESTIMATES NOT COMPUTED.')
 3320 FORMAT(' SOLUTION IS COMPUTED.'/
     &       ' THE COMPUTATION OF THE ERROR ESTIMATES FAILED.')
 3321 FORMAT(' SOLUTION AND ERROR ESTIMATE ARE COMPUTED.'/
     &   ' THE COMPUTATION OF THE SEPARATED ERROR ESTIMATES FAILED.')
 3500 FORMAT(' ERROR IN LINEAR EQUATION SOLVER LINSOL.')
 3600 FORMAT(' GRID OPTIMIZATION FAILED, BASIC SOLUTION IS COMPUTED.')
 4000 FORMAT(' FILE ERROR ON UNIT :',I3/
     &       ' ASSIGN FILE LARGER.')
C
C-----END OF FDST10----------------------------------------------------
C
      E    N    D
C:::54    ,,,,,FDSVER.....
C
C
C
C**********************************************************************
C        1         2         3         4         5         6         7*
C**********************************************************************
C**                                                                 ***
C**                                                                 ***
      SUBROUTINE FDSVER(LOUT)
C**                                                                 ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      F D S V E R   INFORMATION OF THE FIDISOL-RELEASE           ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**      COPYRIGHT UNIVERSITAET KARLSRUHE, 1991                     ***
C**                                                                 ***
C**********************************************************************
C**                                                                 ***
C**   THE IMPLICIT CHARACTER-INSTRUCTION HAS THE AIM,               ***
C**   THAT ALL VARIABLES MUST BE DECLARED EXPLICITLY.               ***
C**                                                                 ***
      IMPLICIT CHARACTER*1 ( A - Z )
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**      FORMAL PARAMETERS :                                        ***
C**      -----------------                                          ***
C**                                                                 ***
      INTEGER  LOUT
C**                                                                 ***
C**-----------------------------------------------------------------***
C**                                                                 ***
C**   LIST OF FORMAL PARAMETERS :                                   ***
C**   -------------------------                                     ***
C**                                                                 ***
C--------I------I-----I------------------------------------------------
C NAME   I TYPE I I/O I     MEANING
C--------I------I-----I------------------------------------------------
C--------I------I-----I------------------------------------------------
C LOUT   I  I   I  I  I  OUTPUT UNIT
C--------I------I-----I------------------------------------------------
C**                                                                 ***
C**                                                                 ***
C**        LOCAL PARAMETERS :                                       ***
C**        ----------------                                         ***
C**                                                                 ***
C**                                                                 ***
C
C
C**** START OF CALCULATION :
C     ---------------------
C
C
      WRITE (LOUT,1000)
C
C
C
C**** END OF CALCULATION
C     ------------------
C
      R E T U R N
 1000 FORMAT(' ',70('*'),/,' VERSION 3.8 FEBRUARY 1992',/,
     &   ' ',70('*'))
C-----END OF FDSVER----------------------------------------------------
      E    N    D
C================================================C
C         FUNCTION   P8SCNT
C
C================================================C
      FUNCTION P8SCNT(A,N)
      INTEGER P8SCNT,N,I,Z
      LOGICAL A(N)
      Z = 0
      DO 10 I=1,N
          IF(A(I)) THEN
            Z = Z+1
          END IF
  10   CONTINUE
          P8SCNT = Z
        RETURN
      END
C=================================================C
C         FUNCTION   P8SEI
C
C=================================================C
      FUNCTION P8SEI(A,B,NA,NB)
      INTEGER P8SEI,NA,NB,I,K
      INTEGER A(NA),B(NB)
      K = MIN(NA,NB)
      I = 0
  10   CONTINUE
            I = I + 1
          IF(I.GT.K) GOTO 20
          IF(A(I).NE.B(I)) GOTO 10
  20   CONTINUE
          P8SEI = I-1
        RETURN
      END
C=================================================C
C         FUNCTION   P8SEII
C
C=================================================C
      FUNCTION P8SEII(A,B,NA)
      INTEGER P8SEII,NA,I,K
      INTEGER A(NA),B
      K = NA
      I = 0
  10   CONTINUE
            I = I + 1
          IF(I.GT.K) GOTO 20
          IF(A(I).NE.B) GOTO 10
  20   CONTINUE
          P8SEII = I-1
        RETURN
      END
C=================================================C
C         FUNCTION   P8SEQ
C
C=================================================C
      FUNCTION P8SEQ(A,B,NA,NB)
      INTEGER P8SEQ,NA,NB,I,K
      DOUBLE PRECISION A(NA),B(NB)
      K = MIN(NA,NB)
      I = 0
  10   CONTINUE
            I = I + 1
          IF(I.GT.K) GOTO 20
          IF(A(I).NE.B(I)) GOTO 10
  20   CONTINUE
          P8SEQ = I-1
        RETURN
      END
C=================================================C
C         FUNCTION   P8SEQI
C
C=================================================C
      FUNCTION P8SEQI(A,B,NA)
      INTEGER P8SEQI,NA,I,K
      DOUBLE PRECISION A(NA)
      K = NA
      I = 0
  10   CONTINUE
            I = I + 1
          IF(I.GT.K) GOTO 20
          IF(A(I).NE.B) GOTO 10
  20   CONTINUE
          P8SEQI = I-1
        RETURN
      END
C==========================================C
C         FUNCTION   P8SMAX
C
C==========================================C
      FUNCTION P8SMAX(A,NA)
      INTEGER NA,I
      DOUBLE PRECISION A(NA),P8SMAX,MAXI
       MAXI = A(1)
      DO 10 I=2,NA
        IF(A(I).GT.MAXI) THEN
        MAXI = A(I)
        END IF
  10   CONTINUE
          P8SMAX = MAXI
        RETURN
      END
C==========================================C
C         FUNCTION   P8SMIN
C
C==========================================C
      FUNCTION P8SMIN(A,NA)
      INTEGER NA,I
      DOUBLE PRECISION A(NA),P8SMIN,MINI
       MINI = A(1)
      DO 10 I=2,NA
        IF(A(I).LT.MINI) THEN
        MINI = A(I)
        END IF
  10   CONTINUE
          P8SMIN = MINI
        RETURN
      END
C========================================C
C      SUBROUTINE    P8VCMR
C
C========================================C
      SUBROUTINE P8VCMR(A,B,C,N)
      INTEGER N,I,Z
      LOGICAL B(N)
      DOUBLE PRECISION A(N),C(N)
             Z=0
      DO 10 I=1,N
           IF(B(I)) THEN
               Z  = Z + 1
             C(Z) = A(I)
           END IF
  10   CONTINUE
        RETURN
      END
C=============================================C
C      SUBROUTINE    P8VGTI    , P8VGATHR MIT INTEGER
C
C=============================================C
      SUBROUTINE P8VGTI(A,B,C,NA,NB,NC)
      INTEGER NA,NB,NC,I,B(NB)
      INTEGER A(NA),C(NC)
      DO 10 I=1,NB
             C(I) = A(B(I))
  10   CONTINUE
        RETURN
      END
C================================================C
C      SUBROUTINE    P8VGTP    , P8VGATHP
C
C================================================C
      SUBROUTINE P8VGTP(A,I,N,B,NA,NB)
      INTEGER NA,NB,I,N,K
      DOUBLE PRECISION A(NA),B(NB)
      DO 10 K=1,N
             B(K) = A(1+(K-1)*I)
  10   CONTINUE
        RETURN
      END
C=============================================C
C      SUBROUTINE    P8VGTR    , P8VGATHR
C
C=============================================C
      SUBROUTINE P8VGTR(A,B,C,NA,NB,NC)
      INTEGER NA,NB,NC,I,B(NB)
      DOUBLE PRECISION A(NA),C(NC)
      DO 10 I=1,NB
             C(I) = A(B(I))
  10   CONTINUE
        RETURN
      END
C=======================================C
C      SUBROUTINE    P8VINT
C
C=======================================C
      SUBROUTINE P8VINT(A1,A2,A,N)
      INTEGER I,N
      INTEGER A1,A2,A(N)
            A(1) = A1
       DO 10 I=2,N
           A(I) = A1 + (I-1)*A2
  10   CONTINUE
        RETURN
      END
C========================================C
C      SUBROUTINE    P8VMKO
C
C========================================C
      SUBROUTINE P8VMKO(A1,A2,A,N)
      INTEGER A1,A2,N,I,J,N1,N2,J1,N1H
      LOGICAL A(N),LOG
        N1 = N/A2
        N2 = N - N1*A2
      IF(N2.GE.A1) THEN
        LOG = .FALSE.
        N1H =  N1 + 1
        J1  =  N1*A2 + A1 + 1
      ELSE
        LOG = .TRUE.
        N1H =  N1
        J1  =  N1*A2 + 1
      END IF
       DO 10 J=1,N1H
       DO 10 I=1,A1
            A(I + (J-1)*A2) = .TRUE.
  10   CONTINUE
C      DO 20 I=J,A2-A1
       DO 20 I=1,A2-A1
       DO 20 J=1,N1
            A(I + (J-1)*A2+A1) = .FALSE.
  20   CONTINUE
       IF(N-J1.LT.10) THEN
CDIR$ NOVECTOR
       DO 30 J=J1,N
            A(J) = LOG
  30   CONTINUE
CDIR$ VECTOR
       ELSE
       DO 31 J=J1,N
            A(J) = LOG
  31   CONTINUE
       END IF
        RETURN
      END
C=========================================C
C      SUBROUTINE    P8VMKZ
C
C=========================================C
      SUBROUTINE P8VMKZ(A1,A2,A,N)
      INTEGER A1,A2,N,I,J,N1,N2,J1,N1H
      LOGICAL A(N),LOG
        N1 = N/A2
        N2 = N - N1*A2
      IF(N2.GE.A1) THEN
        LOG = .TRUE.
        N1H =  N1 + 1
        J1  =  N1*A2 + A1 + 1
      ELSE
        LOG = .FALSE.
        N1H =  N1
        J1  =  N1*A2 + 1
      END IF
       DO 10 J=1,N1H
       DO 10 I=1,A1
            A(I + (J-1)*A2) = .FALSE.
  10   CONTINUE
       DO 20 I=1,A2-A1
       DO 20 J=1,N1
            A(I + (J-1)*A2+A1) = .TRUE.
  20   CONTINUE
       IF(N-J1.LT.10) THEN
CDIR$ NOVECTOR
       DO 30 J=J1,N
            A(J) = LOG
  30   CONTINUE
CDIR$ VECTOR
       ELSE
       DO 31 J=J1,N
            A(J) = LOG
  31   CONTINUE
       END IF
        RETURN
      END
C===============================================C
C      SUBROUTINE    P8VSC1   , P8VSCATR
C
C===============================================C
      SUBROUTINE P8VSC1(A,B,C,NA,NB,NC)
      INTEGER NA,NB,NC,B(NB),K
      DOUBLE PRECISION A(NA),C(NC)
      DO 5 K = 1,NC
         C(K) = 0.
  5   CONTINUE
      DO 10 K=1,NB
           C(B(K)) = A(K)
  10   CONTINUE
        RETURN
      END
C===============================================C
C      SUBROUTINE    P8VSCI    , P8VSCATR MIT INTEGER
C
C===============================================C
      SUBROUTINE P8VSCI(A,B,C,NA,NB,NC)
      INTEGER NA,NB,NC,B(NB),K
      INTEGER A(NA),C(NC)
      DO 10 K=1,NB
           C(B(K)) = A(K)
  10   CONTINUE
        RETURN
      END
C===============================================C
C      SUBROUTINE    P8VSCP    , P8VSCATP
C
C===============================================C
      SUBROUTINE P8VSCP(A,I,N,B,NA,NB)
      INTEGER I,N,NA,NB,K
      DOUBLE PRECISION A(NA),B(NB)
      IF(NA.EQ.1) THEN
       DO  9 K=1,N
           B(1+(K-1)*I) = A(1)
   9   CONTINUE
      ELSE
       DO 10 K=1,N
           B(1+(K-1)*I) = A(K)
  10   CONTINUE
      END IF
      RETURN
      END
C===============================================C
C      SUBROUTINE    P8VSCR    , P8VSCATR
C
C===============================================C
      SUBROUTINE P8VSCR(A,B,C,NA,NB,NC)
      INTEGER NA,NB,NC,B(NB),K
      DOUBLE PRECISION A(NA),C(NC)
      DO 10 K=1,NB
           C(B(K)) = A(K)
  10   CONTINUE
        RETURN
      END
C==========================================================C
C      SUBROUTINE    P8VSPS    , P8VSCATP MIT A REELL
C
C==========================================================C
      SUBROUTINE P8VSPS(A,I,N,B,NB)
      INTEGER I,N,NB,K
      DOUBLE PRECISION A,B(NB)
       DO  9 K=1,N
           B(1+(K-1)*I) = A
   9   CONTINUE
      RETURN
      END
C================================================C
C      SUBROUTINE    P8VXPN    , P8VXPND
C
C================================================C
      SUBROUTINE P8VXPN(A,B,C,NA,NB)
      INTEGER NA,NB,I,Z
      LOGICAL B(NB)
      DOUBLE PRECISION A(NA),C(NB)
             Z=0
      DO 10 I=1,NB
           IF(.NOT.B(I)) THEN
             C(I) = 0.0
           END IF
           IF(B(I)) THEN
               Z  = Z + 1
             C(I) = A(Z)
           END IF
  10   CONTINUE
        RETURN
      END
      SUBROUTINE SECOND(TIME)
C
      DOUBLE PRECISION TIME
C
      CALL CLOCK(TIME,0,2)
C
      RETURN
      END
C================================================C
C      SUBROUTINE    VKABS      ,   VABS
C
C================================================C
      SUBROUTINE VKABS(A,B,NA,NB)
      INTEGER NA,NB,I
      DOUBLE PRECISION A(NA),B(NB)
      DO 10 I=1,NA
        B(I) = ABS(A(I))
  10   CONTINUE
        RETURN
      END
